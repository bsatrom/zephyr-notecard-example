
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	60 19 00 20 19 4b 00 08 71 88 00 08 ed 4a 00 08     `.. .K..q....J..
 8000010:	ed 4a 00 08 ed 4a 00 08 ed 4a 00 08 00 00 00 00     .J...J...J......
	...
 800002c:	0d 48 00 08 ed 4a 00 08 00 00 00 00 b9 47 00 08     .H...J.......G..
 800003c:	a5 5e 00 08                                         .^..

08000040 <_irq_vector_table>:
 8000040:	bd 48 00 08 bd 48 00 08 bd 48 00 08 bd 48 00 08     .H...H...H...H..
 8000050:	bd 48 00 08 bd 48 00 08 bd 48 00 08 bd 48 00 08     .H...H...H...H..
 8000060:	bd 48 00 08 bd 48 00 08 bd 48 00 08 bd 48 00 08     .H...H...H...H..
 8000070:	bd 48 00 08 bd 48 00 08 bd 48 00 08 bd 48 00 08     .H...H...H...H..
 8000080:	bd 48 00 08 bd 48 00 08 bd 48 00 08 bd 48 00 08     .H...H...H...H..
 8000090:	bd 48 00 08 bd 48 00 08 bd 48 00 08 bd 48 00 08     .H...H...H...H..
 80000a0:	bd 48 00 08 bd 48 00 08 bd 48 00 08 bd 48 00 08     .H...H...H...H..
 80000b0:	bd 48 00 08 bd 48 00 08 bd 48 00 08 bd 48 00 08     .H...H...H...H..
 80000c0:	bd 48 00 08 bd 48 00 08 bd 48 00 08 bd 48 00 08     .H...H...H...H..
 80000d0:	bd 48 00 08 bd 48 00 08 bd 48 00 08 bd 48 00 08     .H...H...H...H..
 80000e0:	bd 48 00 08 bd 48 00 08 bd 48 00 08 bd 48 00 08     .H...H...H...H..
 80000f0:	bd 48 00 08 bd 48 00 08 bd 48 00 08 bd 48 00 08     .H...H...H...H..
 8000100:	bd 48 00 08 bd 48 00 08 bd 48 00 08 bd 48 00 08     .H...H...H...H..
 8000110:	bd 48 00 08 bd 48 00 08 bd 48 00 08 bd 48 00 08     .H...H...H...H..
 8000120:	bd 48 00 08 bd 48 00 08 bd 48 00 08 bd 48 00 08     .H...H...H...H..
 8000130:	bd 48 00 08 bd 48 00 08 bd 48 00 08 bd 48 00 08     .H...H...H...H..
 8000140:	bd 48 00 08 bd 48 00 08 bd 48 00 08 bd 48 00 08     .H...H...H...H..
 8000150:	bd 48 00 08 bd 48 00 08 bd 48 00 08 bd 48 00 08     .H...H...H...H..
 8000160:	bd 48 00 08 bd 48 00 08 bd 48 00 08 bd 48 00 08     .H...H...H...H..
 8000170:	bd 48 00 08 bd 48 00 08 bd 48 00 08 bd 48 00 08     .H...H...H...H..
 8000180:	bd 48 00 08 bd 48 00 08 bd 48 00 08 bd 48 00 08     .H...H...H...H..
 8000190:	bd 48 00 08 bd 48 00 08 bd 48 00 08 bd 48 00 08     .H...H...H...H..
 80001a0:	bd 48 00 08 bd 48 00 08 bd 48 00 08 bd 48 00 08     .H...H...H...H..
 80001b0:	bd 48 00 08 bd 48 00 08 bd 48 00 08                 .H...H...H..

Disassembly of section text:

080001c0 <__aeabi_drsub>:
 80001c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001c4:	e002      	b.n	80001cc <__adddf3>
 80001c6:	bf00      	nop

080001c8 <__aeabi_dsub>:
 80001c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001cc <__adddf3>:
 80001cc:	b530      	push	{r4, r5, lr}
 80001ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001d6:	ea94 0f05 	teq	r4, r5
 80001da:	bf08      	it	eq
 80001dc:	ea90 0f02 	teqeq	r0, r2
 80001e0:	bf1f      	itttt	ne
 80001e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001f2:	f000 80e2 	beq.w	80003ba <__adddf3+0x1ee>
 80001f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001fe:	bfb8      	it	lt
 8000200:	426d      	neglt	r5, r5
 8000202:	dd0c      	ble.n	800021e <__adddf3+0x52>
 8000204:	442c      	add	r4, r5
 8000206:	ea80 0202 	eor.w	r2, r0, r2
 800020a:	ea81 0303 	eor.w	r3, r1, r3
 800020e:	ea82 0000 	eor.w	r0, r2, r0
 8000212:	ea83 0101 	eor.w	r1, r3, r1
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	2d36      	cmp	r5, #54	; 0x36
 8000220:	bf88      	it	hi
 8000222:	bd30      	pophi	{r4, r5, pc}
 8000224:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000228:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800022c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000230:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000234:	d002      	beq.n	800023c <__adddf3+0x70>
 8000236:	4240      	negs	r0, r0
 8000238:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800023c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000240:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000244:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x84>
 800024a:	4252      	negs	r2, r2
 800024c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000250:	ea94 0f05 	teq	r4, r5
 8000254:	f000 80a7 	beq.w	80003a6 <__adddf3+0x1da>
 8000258:	f1a4 0401 	sub.w	r4, r4, #1
 800025c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000260:	db0d      	blt.n	800027e <__adddf3+0xb2>
 8000262:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000266:	fa22 f205 	lsr.w	r2, r2, r5
 800026a:	1880      	adds	r0, r0, r2
 800026c:	f141 0100 	adc.w	r1, r1, #0
 8000270:	fa03 f20e 	lsl.w	r2, r3, lr
 8000274:	1880      	adds	r0, r0, r2
 8000276:	fa43 f305 	asr.w	r3, r3, r5
 800027a:	4159      	adcs	r1, r3
 800027c:	e00e      	b.n	800029c <__adddf3+0xd0>
 800027e:	f1a5 0520 	sub.w	r5, r5, #32
 8000282:	f10e 0e20 	add.w	lr, lr, #32
 8000286:	2a01      	cmp	r2, #1
 8000288:	fa03 fc0e 	lsl.w	ip, r3, lr
 800028c:	bf28      	it	cs
 800028e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000292:	fa43 f305 	asr.w	r3, r3, r5
 8000296:	18c0      	adds	r0, r0, r3
 8000298:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800029c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a0:	d507      	bpl.n	80002b2 <__adddf3+0xe6>
 80002a2:	f04f 0e00 	mov.w	lr, #0
 80002a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80002b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002b6:	d31b      	bcc.n	80002f0 <__adddf3+0x124>
 80002b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002bc:	d30c      	bcc.n	80002d8 <__adddf3+0x10c>
 80002be:	0849      	lsrs	r1, r1, #1
 80002c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002c8:	f104 0401 	add.w	r4, r4, #1
 80002cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002d4:	f080 809a 	bcs.w	800040c <__adddf3+0x240>
 80002d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002dc:	bf08      	it	eq
 80002de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002e2:	f150 0000 	adcs.w	r0, r0, #0
 80002e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ea:	ea41 0105 	orr.w	r1, r1, r5
 80002ee:	bd30      	pop	{r4, r5, pc}
 80002f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002f4:	4140      	adcs	r0, r0
 80002f6:	eb41 0101 	adc.w	r1, r1, r1
 80002fa:	3c01      	subs	r4, #1
 80002fc:	bf28      	it	cs
 80002fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000302:	d2e9      	bcs.n	80002d8 <__adddf3+0x10c>
 8000304:	f091 0f00 	teq	r1, #0
 8000308:	bf04      	itt	eq
 800030a:	4601      	moveq	r1, r0
 800030c:	2000      	moveq	r0, #0
 800030e:	fab1 f381 	clz	r3, r1
 8000312:	bf08      	it	eq
 8000314:	3320      	addeq	r3, #32
 8000316:	f1a3 030b 	sub.w	r3, r3, #11
 800031a:	f1b3 0220 	subs.w	r2, r3, #32
 800031e:	da0c      	bge.n	800033a <__adddf3+0x16e>
 8000320:	320c      	adds	r2, #12
 8000322:	dd08      	ble.n	8000336 <__adddf3+0x16a>
 8000324:	f102 0c14 	add.w	ip, r2, #20
 8000328:	f1c2 020c 	rsb	r2, r2, #12
 800032c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000330:	fa21 f102 	lsr.w	r1, r1, r2
 8000334:	e00c      	b.n	8000350 <__adddf3+0x184>
 8000336:	f102 0214 	add.w	r2, r2, #20
 800033a:	bfd8      	it	le
 800033c:	f1c2 0c20 	rsble	ip, r2, #32
 8000340:	fa01 f102 	lsl.w	r1, r1, r2
 8000344:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000348:	bfdc      	itt	le
 800034a:	ea41 010c 	orrle.w	r1, r1, ip
 800034e:	4090      	lslle	r0, r2
 8000350:	1ae4      	subs	r4, r4, r3
 8000352:	bfa2      	ittt	ge
 8000354:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000358:	4329      	orrge	r1, r5
 800035a:	bd30      	popge	{r4, r5, pc}
 800035c:	ea6f 0404 	mvn.w	r4, r4
 8000360:	3c1f      	subs	r4, #31
 8000362:	da1c      	bge.n	800039e <__adddf3+0x1d2>
 8000364:	340c      	adds	r4, #12
 8000366:	dc0e      	bgt.n	8000386 <__adddf3+0x1ba>
 8000368:	f104 0414 	add.w	r4, r4, #20
 800036c:	f1c4 0220 	rsb	r2, r4, #32
 8000370:	fa20 f004 	lsr.w	r0, r0, r4
 8000374:	fa01 f302 	lsl.w	r3, r1, r2
 8000378:	ea40 0003 	orr.w	r0, r0, r3
 800037c:	fa21 f304 	lsr.w	r3, r1, r4
 8000380:	ea45 0103 	orr.w	r1, r5, r3
 8000384:	bd30      	pop	{r4, r5, pc}
 8000386:	f1c4 040c 	rsb	r4, r4, #12
 800038a:	f1c4 0220 	rsb	r2, r4, #32
 800038e:	fa20 f002 	lsr.w	r0, r0, r2
 8000392:	fa01 f304 	lsl.w	r3, r1, r4
 8000396:	ea40 0003 	orr.w	r0, r0, r3
 800039a:	4629      	mov	r1, r5
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	fa21 f004 	lsr.w	r0, r1, r4
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f094 0f00 	teq	r4, #0
 80003aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ae:	bf06      	itte	eq
 80003b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003b4:	3401      	addeq	r4, #1
 80003b6:	3d01      	subne	r5, #1
 80003b8:	e74e      	b.n	8000258 <__adddf3+0x8c>
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf18      	it	ne
 80003c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c4:	d029      	beq.n	800041a <__adddf3+0x24e>
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	d005      	beq.n	80003de <__adddf3+0x212>
 80003d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003d6:	bf04      	itt	eq
 80003d8:	4619      	moveq	r1, r3
 80003da:	4610      	moveq	r0, r2
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	ea91 0f03 	teq	r1, r3
 80003e2:	bf1e      	ittt	ne
 80003e4:	2100      	movne	r1, #0
 80003e6:	2000      	movne	r0, #0
 80003e8:	bd30      	popne	{r4, r5, pc}
 80003ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ee:	d105      	bne.n	80003fc <__adddf3+0x230>
 80003f0:	0040      	lsls	r0, r0, #1
 80003f2:	4149      	adcs	r1, r1
 80003f4:	bf28      	it	cs
 80003f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003fa:	bd30      	pop	{r4, r5, pc}
 80003fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000400:	bf3c      	itt	cc
 8000402:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000406:	bd30      	popcc	{r4, r5, pc}
 8000408:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800040c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf1a      	itte	ne
 8000420:	4619      	movne	r1, r3
 8000422:	4610      	movne	r0, r2
 8000424:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000428:	bf1c      	itt	ne
 800042a:	460b      	movne	r3, r1
 800042c:	4602      	movne	r2, r0
 800042e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000432:	bf06      	itte	eq
 8000434:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000438:	ea91 0f03 	teqeq	r1, r3
 800043c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	bf00      	nop

08000444 <__aeabi_ui2d>:
 8000444:	f090 0f00 	teq	r0, #0
 8000448:	bf04      	itt	eq
 800044a:	2100      	moveq	r1, #0
 800044c:	4770      	bxeq	lr
 800044e:	b530      	push	{r4, r5, lr}
 8000450:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000454:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000458:	f04f 0500 	mov.w	r5, #0
 800045c:	f04f 0100 	mov.w	r1, #0
 8000460:	e750      	b.n	8000304 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_i2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800047c:	bf48      	it	mi
 800047e:	4240      	negmi	r0, r0
 8000480:	f04f 0100 	mov.w	r1, #0
 8000484:	e73e      	b.n	8000304 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_f2d>:
 8000488:	0042      	lsls	r2, r0, #1
 800048a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800048e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000492:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000496:	bf1f      	itttt	ne
 8000498:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800049c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004a4:	4770      	bxne	lr
 80004a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004aa:	bf08      	it	eq
 80004ac:	4770      	bxeq	lr
 80004ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004b2:	bf04      	itt	eq
 80004b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e71c      	b.n	8000304 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aed8 	beq.w	80002b2 <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6bd      	b.n	80002b2 <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpun>:
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	d102      	bne.n	8000a7c <__aeabi_dcmpun+0x10>
 8000a76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7a:	d10a      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x20>
 8000a86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8a:	d102      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	f04f 0001 	mov.w	r0, #1
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_d2iz>:
 8000a98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa0:	d215      	bcs.n	8000ace <__aeabi_d2iz+0x36>
 8000aa2:	d511      	bpl.n	8000ac8 <__aeabi_d2iz+0x30>
 8000aa4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aac:	d912      	bls.n	8000ad4 <__aeabi_d2iz+0x3c>
 8000aae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	4240      	negne	r0, r0
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d105      	bne.n	8000ae0 <__aeabi_d2iz+0x48>
 8000ad4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad8:	bf08      	it	eq
 8000ada:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_uldivmod>:
 8000ae8:	b953      	cbnz	r3, 8000b00 <__aeabi_uldivmod+0x18>
 8000aea:	b94a      	cbnz	r2, 8000b00 <__aeabi_uldivmod+0x18>
 8000aec:	2900      	cmp	r1, #0
 8000aee:	bf08      	it	eq
 8000af0:	2800      	cmpeq	r0, #0
 8000af2:	bf1c      	itt	ne
 8000af4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000af8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000afc:	f000 b82a 	b.w	8000b54 <__aeabi_idiv0>
 8000b00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b08:	f000 f846 	bl	8000b98 <__udivmoddi4>
 8000b0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b14:	b004      	add	sp, #16
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2ulz>:
 8000b18:	b5d0      	push	{r4, r6, r7, lr}
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <__aeabi_d2ulz+0x34>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	4606      	mov	r6, r0
 8000b20:	460f      	mov	r7, r1
 8000b22:	f7ff fd09 	bl	8000538 <__aeabi_dmul>
 8000b26:	f000 f817 	bl	8000b58 <__aeabi_d2uiz>
 8000b2a:	4604      	mov	r4, r0
 8000b2c:	f7ff fc8a 	bl	8000444 <__aeabi_ui2d>
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <__aeabi_d2ulz+0x38>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	f7ff fd00 	bl	8000538 <__aeabi_dmul>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	4630      	mov	r0, r6
 8000b3e:	4639      	mov	r1, r7
 8000b40:	f7ff fb42 	bl	80001c8 <__aeabi_dsub>
 8000b44:	f000 f808 	bl	8000b58 <__aeabi_d2uiz>
 8000b48:	4621      	mov	r1, r4
 8000b4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000b4c:	3df00000 	.word	0x3df00000
 8000b50:	41f00000 	.word	0x41f00000

08000b54 <__aeabi_idiv0>:
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__udivmoddi4>:
 8000b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b9c:	4607      	mov	r7, r0
 8000b9e:	468c      	mov	ip, r1
 8000ba0:	4608      	mov	r0, r1
 8000ba2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000ba4:	4615      	mov	r5, r2
 8000ba6:	463c      	mov	r4, r7
 8000ba8:	4619      	mov	r1, r3
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	f040 80c6 	bne.w	8000d3c <__udivmoddi4+0x1a4>
 8000bb0:	4282      	cmp	r2, r0
 8000bb2:	fab2 f782 	clz	r7, r2
 8000bb6:	d946      	bls.n	8000c46 <__udivmoddi4+0xae>
 8000bb8:	b14f      	cbz	r7, 8000bce <__udivmoddi4+0x36>
 8000bba:	f1c7 0e20 	rsb	lr, r7, #32
 8000bbe:	fa24 fe0e 	lsr.w	lr, r4, lr
 8000bc2:	fa00 f307 	lsl.w	r3, r0, r7
 8000bc6:	40bd      	lsls	r5, r7
 8000bc8:	ea4e 0c03 	orr.w	ip, lr, r3
 8000bcc:	40bc      	lsls	r4, r7
 8000bce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000bd2:	fa1f fe85 	uxth.w	lr, r5
 8000bd6:	fbbc f9f8 	udiv	r9, ip, r8
 8000bda:	0c22      	lsrs	r2, r4, #16
 8000bdc:	fb08 c319 	mls	r3, r8, r9, ip
 8000be0:	fb09 fa0e 	mul.w	sl, r9, lr
 8000be4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000be8:	459a      	cmp	sl, r3
 8000bea:	d928      	bls.n	8000c3e <__udivmoddi4+0xa6>
 8000bec:	18eb      	adds	r3, r5, r3
 8000bee:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bf2:	d204      	bcs.n	8000bfe <__udivmoddi4+0x66>
 8000bf4:	459a      	cmp	sl, r3
 8000bf6:	d902      	bls.n	8000bfe <__udivmoddi4+0x66>
 8000bf8:	f1a9 0002 	sub.w	r0, r9, #2
 8000bfc:	442b      	add	r3, r5
 8000bfe:	eba3 030a 	sub.w	r3, r3, sl
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb3 f2f8 	udiv	r2, r3, r8
 8000c08:	fb08 3312 	mls	r3, r8, r2, r3
 8000c0c:	fb02 fe0e 	mul.w	lr, r2, lr
 8000c10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c14:	45a6      	cmp	lr, r4
 8000c16:	d914      	bls.n	8000c42 <__udivmoddi4+0xaa>
 8000c18:	192c      	adds	r4, r5, r4
 8000c1a:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000c1e:	d203      	bcs.n	8000c28 <__udivmoddi4+0x90>
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	d901      	bls.n	8000c28 <__udivmoddi4+0x90>
 8000c24:	1e93      	subs	r3, r2, #2
 8000c26:	442c      	add	r4, r5
 8000c28:	eba4 040e 	sub.w	r4, r4, lr
 8000c2c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c30:	b11e      	cbz	r6, 8000c3a <__udivmoddi4+0xa2>
 8000c32:	40fc      	lsrs	r4, r7
 8000c34:	2300      	movs	r3, #0
 8000c36:	6034      	str	r4, [r6, #0]
 8000c38:	6073      	str	r3, [r6, #4]
 8000c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c3e:	4648      	mov	r0, r9
 8000c40:	e7dd      	b.n	8000bfe <__udivmoddi4+0x66>
 8000c42:	4613      	mov	r3, r2
 8000c44:	e7f0      	b.n	8000c28 <__udivmoddi4+0x90>
 8000c46:	b902      	cbnz	r2, 8000c4a <__udivmoddi4+0xb2>
 8000c48:	deff      	udf	#255	; 0xff
 8000c4a:	bb87      	cbnz	r7, 8000cae <__udivmoddi4+0x116>
 8000c4c:	1a83      	subs	r3, r0, r2
 8000c4e:	2101      	movs	r1, #1
 8000c50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c54:	b2aa      	uxth	r2, r5
 8000c56:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5a:	0c20      	lsrs	r0, r4, #16
 8000c5c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c60:	fb0c f802 	mul.w	r8, ip, r2
 8000c64:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c68:	4598      	cmp	r8, r3
 8000c6a:	d963      	bls.n	8000d34 <__udivmoddi4+0x19c>
 8000c6c:	18eb      	adds	r3, r5, r3
 8000c6e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c72:	d204      	bcs.n	8000c7e <__udivmoddi4+0xe6>
 8000c74:	4598      	cmp	r8, r3
 8000c76:	d902      	bls.n	8000c7e <__udivmoddi4+0xe6>
 8000c78:	f1ac 0002 	sub.w	r0, ip, #2
 8000c7c:	442b      	add	r3, r5
 8000c7e:	eba3 0308 	sub.w	r3, r3, r8
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c88:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c8c:	fb0c f202 	mul.w	r2, ip, r2
 8000c90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c94:	42a2      	cmp	r2, r4
 8000c96:	d94f      	bls.n	8000d38 <__udivmoddi4+0x1a0>
 8000c98:	192c      	adds	r4, r5, r4
 8000c9a:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8000c9e:	d204      	bcs.n	8000caa <__udivmoddi4+0x112>
 8000ca0:	42a2      	cmp	r2, r4
 8000ca2:	d902      	bls.n	8000caa <__udivmoddi4+0x112>
 8000ca4:	f1ac 0302 	sub.w	r3, ip, #2
 8000ca8:	442c      	add	r4, r5
 8000caa:	1aa4      	subs	r4, r4, r2
 8000cac:	e7be      	b.n	8000c2c <__udivmoddi4+0x94>
 8000cae:	f1c7 0c20 	rsb	ip, r7, #32
 8000cb2:	fa20 f80c 	lsr.w	r8, r0, ip
 8000cb6:	fa00 f307 	lsl.w	r3, r0, r7
 8000cba:	fa24 fc0c 	lsr.w	ip, r4, ip
 8000cbe:	40bd      	lsls	r5, r7
 8000cc0:	ea4c 0203 	orr.w	r2, ip, r3
 8000cc4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc8:	b2ab      	uxth	r3, r5
 8000cca:	fbb8 fcfe 	udiv	ip, r8, lr
 8000cce:	0c11      	lsrs	r1, r2, #16
 8000cd0:	fb0e 801c 	mls	r0, lr, ip, r8
 8000cd4:	fb0c f903 	mul.w	r9, ip, r3
 8000cd8:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 8000cdc:	4581      	cmp	r9, r0
 8000cde:	fa04 f407 	lsl.w	r4, r4, r7
 8000ce2:	d923      	bls.n	8000d2c <__udivmoddi4+0x194>
 8000ce4:	1828      	adds	r0, r5, r0
 8000ce6:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000cea:	d204      	bcs.n	8000cf6 <__udivmoddi4+0x15e>
 8000cec:	4581      	cmp	r9, r0
 8000cee:	d902      	bls.n	8000cf6 <__udivmoddi4+0x15e>
 8000cf0:	f1ac 0102 	sub.w	r1, ip, #2
 8000cf4:	4428      	add	r0, r5
 8000cf6:	eba0 0009 	sub.w	r0, r0, r9
 8000cfa:	b292      	uxth	r2, r2
 8000cfc:	fbb0 fcfe 	udiv	ip, r0, lr
 8000d00:	fb0e 001c 	mls	r0, lr, ip, r0
 8000d04:	fb0c f803 	mul.w	r8, ip, r3
 8000d08:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 8000d0c:	4598      	cmp	r8, r3
 8000d0e:	d90f      	bls.n	8000d30 <__udivmoddi4+0x198>
 8000d10:	18eb      	adds	r3, r5, r3
 8000d12:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000d16:	d204      	bcs.n	8000d22 <__udivmoddi4+0x18a>
 8000d18:	4598      	cmp	r8, r3
 8000d1a:	d902      	bls.n	8000d22 <__udivmoddi4+0x18a>
 8000d1c:	f1ac 0202 	sub.w	r2, ip, #2
 8000d20:	442b      	add	r3, r5
 8000d22:	eba3 0308 	sub.w	r3, r3, r8
 8000d26:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8000d2a:	e791      	b.n	8000c50 <__udivmoddi4+0xb8>
 8000d2c:	4661      	mov	r1, ip
 8000d2e:	e7e2      	b.n	8000cf6 <__udivmoddi4+0x15e>
 8000d30:	4662      	mov	r2, ip
 8000d32:	e7f6      	b.n	8000d22 <__udivmoddi4+0x18a>
 8000d34:	4660      	mov	r0, ip
 8000d36:	e7a2      	b.n	8000c7e <__udivmoddi4+0xe6>
 8000d38:	4663      	mov	r3, ip
 8000d3a:	e7b6      	b.n	8000caa <__udivmoddi4+0x112>
 8000d3c:	4283      	cmp	r3, r0
 8000d3e:	d905      	bls.n	8000d4c <__udivmoddi4+0x1b4>
 8000d40:	b10e      	cbz	r6, 8000d46 <__udivmoddi4+0x1ae>
 8000d42:	e9c6 7000 	strd	r7, r0, [r6]
 8000d46:	2100      	movs	r1, #0
 8000d48:	4608      	mov	r0, r1
 8000d4a:	e776      	b.n	8000c3a <__udivmoddi4+0xa2>
 8000d4c:	fab3 f183 	clz	r1, r3
 8000d50:	b981      	cbnz	r1, 8000d74 <__udivmoddi4+0x1dc>
 8000d52:	4283      	cmp	r3, r0
 8000d54:	d301      	bcc.n	8000d5a <__udivmoddi4+0x1c2>
 8000d56:	42ba      	cmp	r2, r7
 8000d58:	d80a      	bhi.n	8000d70 <__udivmoddi4+0x1d8>
 8000d5a:	1abc      	subs	r4, r7, r2
 8000d5c:	eb60 0303 	sbc.w	r3, r0, r3
 8000d60:	2001      	movs	r0, #1
 8000d62:	469c      	mov	ip, r3
 8000d64:	2e00      	cmp	r6, #0
 8000d66:	d068      	beq.n	8000e3a <__udivmoddi4+0x2a2>
 8000d68:	e9c6 4c00 	strd	r4, ip, [r6]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	e764      	b.n	8000c3a <__udivmoddi4+0xa2>
 8000d70:	4608      	mov	r0, r1
 8000d72:	e7f7      	b.n	8000d64 <__udivmoddi4+0x1cc>
 8000d74:	f1c1 0c20 	rsb	ip, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f40c 	lsr.w	r4, r2, ip
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	fa02 f501 	lsl.w	r5, r2, r1
 8000d84:	fa00 f301 	lsl.w	r3, r0, r1
 8000d88:	fa27 f20c 	lsr.w	r2, r7, ip
 8000d8c:	fa20 fb0c 	lsr.w	fp, r0, ip
 8000d90:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8000d94:	4313      	orrs	r3, r2
 8000d96:	fbbb f8f9 	udiv	r8, fp, r9
 8000d9a:	fa1f fe84 	uxth.w	lr, r4
 8000d9e:	fb09 bb18 	mls	fp, r9, r8, fp
 8000da2:	0c1a      	lsrs	r2, r3, #16
 8000da4:	fb08 fa0e 	mul.w	sl, r8, lr
 8000da8:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8000dac:	4592      	cmp	sl, r2
 8000dae:	fa07 f701 	lsl.w	r7, r7, r1
 8000db2:	d93e      	bls.n	8000e32 <__udivmoddi4+0x29a>
 8000db4:	18a2      	adds	r2, r4, r2
 8000db6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000dba:	d204      	bcs.n	8000dc6 <__udivmoddi4+0x22e>
 8000dbc:	4592      	cmp	sl, r2
 8000dbe:	d902      	bls.n	8000dc6 <__udivmoddi4+0x22e>
 8000dc0:	f1a8 0002 	sub.w	r0, r8, #2
 8000dc4:	4422      	add	r2, r4
 8000dc6:	eba2 020a 	sub.w	r2, r2, sl
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	fbb2 f8f9 	udiv	r8, r2, r9
 8000dd0:	fb09 2218 	mls	r2, r9, r8, r2
 8000dd4:	fb08 fe0e 	mul.w	lr, r8, lr
 8000dd8:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000ddc:	4596      	cmp	lr, r2
 8000dde:	d92a      	bls.n	8000e36 <__udivmoddi4+0x29e>
 8000de0:	18a2      	adds	r2, r4, r2
 8000de2:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8000de6:	d204      	bcs.n	8000df2 <__udivmoddi4+0x25a>
 8000de8:	4596      	cmp	lr, r2
 8000dea:	d902      	bls.n	8000df2 <__udivmoddi4+0x25a>
 8000dec:	f1a8 0302 	sub.w	r3, r8, #2
 8000df0:	4422      	add	r2, r4
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	fba0 9305 	umull	r9, r3, r0, r5
 8000dfa:	eba2 020e 	sub.w	r2, r2, lr
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	46ce      	mov	lr, r9
 8000e02:	4698      	mov	r8, r3
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0x274>
 8000e06:	d106      	bne.n	8000e16 <__udivmoddi4+0x27e>
 8000e08:	454f      	cmp	r7, r9
 8000e0a:	d204      	bcs.n	8000e16 <__udivmoddi4+0x27e>
 8000e0c:	ebb9 0e05 	subs.w	lr, r9, r5
 8000e10:	eb63 0804 	sbc.w	r8, r3, r4
 8000e14:	3801      	subs	r0, #1
 8000e16:	b186      	cbz	r6, 8000e3a <__udivmoddi4+0x2a2>
 8000e18:	ebb7 030e 	subs.w	r3, r7, lr
 8000e1c:	eb62 0708 	sbc.w	r7, r2, r8
 8000e20:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e24:	40cb      	lsrs	r3, r1
 8000e26:	ea4c 0303 	orr.w	r3, ip, r3
 8000e2a:	40cf      	lsrs	r7, r1
 8000e2c:	e9c6 3700 	strd	r3, r7, [r6]
 8000e30:	e79c      	b.n	8000d6c <__udivmoddi4+0x1d4>
 8000e32:	4640      	mov	r0, r8
 8000e34:	e7c7      	b.n	8000dc6 <__udivmoddi4+0x22e>
 8000e36:	4643      	mov	r3, r8
 8000e38:	e7db      	b.n	8000df2 <__udivmoddi4+0x25a>
 8000e3a:	4631      	mov	r1, r6
 8000e3c:	e6fd      	b.n	8000c3a <__udivmoddi4+0xa2>

08000e3e <strcmp>:
 8000e3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e46:	2a01      	cmp	r2, #1
 8000e48:	bf28      	it	cs
 8000e4a:	429a      	cmpcs	r2, r3
 8000e4c:	d0f7      	beq.n	8000e3e <strcmp>
 8000e4e:	1ad0      	subs	r0, r2, r3
 8000e50:	4770      	bx	lr

08000e52 <strlen>:
 8000e52:	4603      	mov	r3, r0
 8000e54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e58:	2a00      	cmp	r2, #0
 8000e5a:	d1fb      	bne.n	8000e54 <strlen+0x2>
 8000e5c:	1a18      	subs	r0, r3, r0
 8000e5e:	3801      	subs	r0, #1
 8000e60:	4770      	bx	lr
 8000e62:	0000      	movs	r0, r0
 8000e64:	0000      	movs	r0, r0
	...

08000e68 <JAtoN>:
                                 * The "E" may actually be an "e".  E and X
                                 * may both be omitted (but not just one).
                                 */
char **endPtr;              /* If non-NULL, store terminating character's
                                 * address here. */
{
 8000e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e6c:	b087      	sub	sp, #28
 8000e6e:	4680      	mov	r8, r0
 8000e70:	9105      	str	r1, [sp, #20]
 8000e72:	4603      	mov	r3, r0
    /*
     * Strip off leading blanks and check for a sign.
     */

    p = string;
    while (*p == ' ') {
 8000e74:	7819      	ldrb	r1, [r3, #0]
 8000e76:	2920      	cmp	r1, #32
 8000e78:	461a      	mov	r2, r3
 8000e7a:	f103 0301 	add.w	r3, r3, #1
 8000e7e:	d0f9      	beq.n	8000e74 <JAtoN+0xc>
        p += 1;
    }
    if (*p == '-') {
 8000e80:	292d      	cmp	r1, #45	; 0x2d
 8000e82:	d121      	bne.n	8000ec8 <JAtoN+0x60>
        sign = TRUE;
        p += 1;
 8000e84:	461a      	mov	r2, r3
        sign = TRUE;
 8000e86:	2301      	movs	r3, #1
    } else {
        if (*p == '+') {
            p += 1;
 8000e88:	9304      	str	r3, [sp, #16]
        }
        sign = FALSE;
 8000e8a:	4616      	mov	r6, r2
    /*
     * Count the number of digits in the mantissa (including the decimal
     * point), and also locate the decimal point.
     */

    decPt = -1;
 8000e8c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    for (mantSize = 0; ; mantSize += 1) {
        c = *p;
 8000e90:	4635      	mov	r5, r6
 8000e92:	46b2      	mov	sl, r6
 8000e94:	f815 7b01 	ldrb.w	r7, [r5], #1
        if (c < '0' || c > '9') {
 8000e98:	f1a7 0130 	sub.w	r1, r7, #48	; 0x30
 8000e9c:	2909      	cmp	r1, #9
 8000e9e:	eba6 0302 	sub.w	r3, r6, r2
 8000ea2:	d916      	bls.n	8000ed2 <JAtoN+0x6a>
            if ((c != '.') || (decPt >= 0)) {
 8000ea4:	2f2e      	cmp	r7, #46	; 0x2e
 8000ea6:	d101      	bne.n	8000eac <JAtoN+0x44>
 8000ea8:	1c60      	adds	r0, r4, #1
 8000eaa:	d013      	beq.n	8000ed4 <JAtoN+0x6c>
     * they can't affect the value anyway.
     */

    pExp  = p;
    p -= mantSize;
    if (decPt < 0) {
 8000eac:	1c61      	adds	r1, r4, #1
        decPt = mantSize;
    } else {
        mantSize -= 1;                  /* One of the digits was the point. */
 8000eae:	bf14      	ite	ne
 8000eb0:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 8000eb4:	461c      	moveq	r4, r3
    }
    if (mantSize > 18) {
 8000eb6:	2b12      	cmp	r3, #18
 8000eb8:	dd0f      	ble.n	8000eda <JAtoN+0x72>
        fracExp = decPt - 18;
 8000eba:	3c12      	subs	r4, #18
        mantSize = 18;
 8000ebc:	2312      	movs	r3, #18
 8000ebe:	469c      	mov	ip, r3
 8000ec0:	2000      	movs	r0, #0
            p += 1;
            if (c == '.') {
                c = *p;
                p += 1;
            }
            frac1 = 10*frac1 + (c - '0');
 8000ec2:	f04f 0e0a 	mov.w	lr, #10
 8000ec6:	e019      	b.n	8000efc <JAtoN+0x94>
            p += 1;
 8000ec8:	292b      	cmp	r1, #43	; 0x2b
 8000eca:	bf08      	it	eq
 8000ecc:	461a      	moveq	r2, r3
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e7da      	b.n	8000e88 <JAtoN+0x20>
 8000ed2:	4623      	mov	r3, r4
        c = *p;
 8000ed4:	462e      	mov	r6, r5
 8000ed6:	461c      	mov	r4, r3
 8000ed8:	e7da      	b.n	8000e90 <JAtoN+0x28>
    if (mantSize == 0) {
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d13d      	bne.n	8000f5a <JAtoN+0xf2>
        fraction = 0.0;
 8000ede:	461a      	mov	r2, r3
 8000ee0:	e099      	b.n	8001016 <JAtoN+0x1ae>
            c = *p;
 8000ee2:	7811      	ldrb	r1, [r2, #0]
            if (c == '.') {
 8000ee4:	292e      	cmp	r1, #46	; 0x2e
                c = *p;
 8000ee6:	bf08      	it	eq
 8000ee8:	7851      	ldrbeq	r1, [r2, #1]
            frac1 = 10*frac1 + (c - '0');
 8000eea:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
            p += 1;
 8000eee:	bf14      	ite	ne
 8000ef0:	3201      	addne	r2, #1
                p += 1;
 8000ef2:	3202      	addeq	r2, #2
            frac1 = 10*frac1 + (c - '0');
 8000ef4:	fb0e 1000 	mla	r0, lr, r0, r1
        for ( ; mantSize > 9; mantSize -= 1) {
 8000ef8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8000efc:	f1bc 0f09 	cmp.w	ip, #9
 8000f00:	dcef      	bgt.n	8000ee2 <JAtoN+0x7a>
 8000f02:	2b08      	cmp	r3, #8
 8000f04:	f1c3 0109 	rsb	r1, r3, #9
 8000f08:	bfd8      	it	le
 8000f0a:	2100      	movle	r1, #0
 8000f0c:	440b      	add	r3, r1
        }
        frac2 = 0L;
 8000f0e:	f04f 0b00 	mov.w	fp, #0
            p += 1;
            if (c == '.') {
                c = *p;
                p += 1;
            }
            frac2 = 10*frac2 + (c - '0');
 8000f12:	f04f 0c0a 	mov.w	ip, #10
        for (; mantSize > 0; mantSize -= 1) {
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	dc21      	bgt.n	8000f5e <JAtoN+0xf6>
        }
        fraction = (1.0e9 * frac1) + frac2;
 8000f1a:	f7ff faa3 	bl	8000464 <__aeabi_i2d>
 8000f1e:	a344      	add	r3, pc, #272	; (adr r3, 8001030 <JAtoN+0x1c8>)
 8000f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f24:	f7ff fb08 	bl	8000538 <__aeabi_dmul>
 8000f28:	4680      	mov	r8, r0
 8000f2a:	4658      	mov	r0, fp
 8000f2c:	4689      	mov	r9, r1
 8000f2e:	f7ff fa99 	bl	8000464 <__aeabi_i2d>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4640      	mov	r0, r8
 8000f38:	4649      	mov	r1, r9
 8000f3a:	f7ff f947 	bl	80001cc <__adddf3>
    /*
     * Skim off the exponent.
     */

    p = pExp;
    if ((*p == 'E') || (*p == 'e')) {
 8000f3e:	f007 07df 	and.w	r7, r7, #223	; 0xdf
 8000f42:	2f45      	cmp	r7, #69	; 0x45
        fraction = (1.0e9 * frac1) + frac2;
 8000f44:	e9cd 0102 	strd	r0, r1, [sp, #8]
    if ((*p == 'E') || (*p == 'e')) {
 8000f48:	d142      	bne.n	8000fd0 <JAtoN+0x168>
        p += 1;
        if (*p == '-') {
 8000f4a:	7873      	ldrb	r3, [r6, #1]
 8000f4c:	2b2d      	cmp	r3, #45	; 0x2d
 8000f4e:	d113      	bne.n	8000f78 <JAtoN+0x110>
            expSign = TRUE;
            p += 1;
 8000f50:	1cb5      	adds	r5, r6, #2
            expSign = TRUE;
 8000f52:	2101      	movs	r1, #1
        } else {
            if (*p == '+') {
                p += 1;
            }
            expSign = FALSE;
 8000f54:	2300      	movs	r3, #0
        }
        while (*p >= '0' && *p <= '9') {
            exp = exp * 10 + (*p - '0');
 8000f56:	260a      	movs	r6, #10
 8000f58:	e015      	b.n	8000f86 <JAtoN+0x11e>
        fracExp = decPt - mantSize;
 8000f5a:	1ae4      	subs	r4, r4, r3
 8000f5c:	e7af      	b.n	8000ebe <JAtoN+0x56>
            c = *p;
 8000f5e:	7811      	ldrb	r1, [r2, #0]
            if (c == '.') {
 8000f60:	292e      	cmp	r1, #46	; 0x2e
                c = *p;
 8000f62:	bf08      	it	eq
 8000f64:	7851      	ldrbeq	r1, [r2, #1]
            frac2 = 10*frac2 + (c - '0');
 8000f66:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
            p += 1;
 8000f6a:	bf14      	ite	ne
 8000f6c:	3201      	addne	r2, #1
                p += 1;
 8000f6e:	3202      	addeq	r2, #2
            frac2 = 10*frac2 + (c - '0');
 8000f70:	fb0c 1b0b 	mla	fp, ip, fp, r1
        for (; mantSize > 0; mantSize -= 1) {
 8000f74:	3b01      	subs	r3, #1
 8000f76:	e7ce      	b.n	8000f16 <JAtoN+0xae>
            if (*p == '+') {
 8000f78:	2b2b      	cmp	r3, #43	; 0x2b
 8000f7a:	d100      	bne.n	8000f7e <JAtoN+0x116>
                p += 1;
 8000f7c:	1cb5      	adds	r5, r6, #2
            expSign = FALSE;
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e7e8      	b.n	8000f54 <JAtoN+0xec>
            exp = exp * 10 + (*p - '0');
 8000f82:	fb06 2303 	mla	r3, r6, r3, r2
            p += 1;
 8000f86:	46aa      	mov	sl, r5
        while (*p >= '0' && *p <= '9') {
 8000f88:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000f8c:	3a30      	subs	r2, #48	; 0x30
 8000f8e:	b2d0      	uxtb	r0, r2
 8000f90:	2809      	cmp	r0, #9
 8000f92:	d9f6      	bls.n	8000f82 <JAtoN+0x11a>
        }
    }
    if (expSign) {
 8000f94:	b1e9      	cbz	r1, 8000fd2 <JAtoN+0x16a>
        exp = fracExp - exp;
 8000f96:	1ae4      	subs	r4, r4, r3
     * Do this by processing the exponent one bit at a time to combine
     * many powers of 2 of 10. Then combine the exponent with the
     * fraction.
     */

    if (exp < 0) {
 8000f98:	2c00      	cmp	r4, #0
 8000f9a:	f240 13ff 	movw	r3, #511	; 0x1ff
        expSign = TRUE;
        exp = -exp;
 8000f9e:	bfba      	itte	lt
 8000fa0:	4264      	neglt	r4, r4
        expSign = TRUE;
 8000fa2:	2601      	movlt	r6, #1
    } else {
        expSign = FALSE;
 8000fa4:	2600      	movge	r6, #0
 8000fa6:	4f24      	ldr	r7, [pc, #144]	; (8001038 <JAtoN+0x1d0>)
 8000fa8:	f8df b090 	ldr.w	fp, [pc, #144]	; 800103c <JAtoN+0x1d4>
 8000fac:	429c      	cmp	r4, r3
        exp = fracExp + exp;
 8000fae:	46d0      	mov	r8, sl
    }
    if (exp > MAX_EXPONENT) {
 8000fb0:	bfa8      	it	ge
 8000fb2:	461c      	movge	r4, r3
        expSign = FALSE;
 8000fb4:	250a      	movs	r5, #10
 8000fb6:	f04f 0a00 	mov.w	sl, #0
        exp = MAX_EXPONENT;
    }
    dblExp = 1.0;
    int d;
    for (d = 0; exp != 0; exp >>= 1, d += 1) {
 8000fba:	b10c      	cbz	r4, 8000fc0 <JAtoN+0x158>
        /* Table giving binary powers of 10.  Entry */
        /* is 10^2^i.  Used to convert decimal */
        /* exponents into floating-point numbers. */
        JNUMBER p10 = 0.0;
        switch (d) {
 8000fbc:	3d01      	subs	r5, #1
 8000fbe:	d10a      	bne.n	8000fd6 <JAtoN+0x16e>
        }
        if (exp & 01) {
            dblExp *= p10;
        }
    }
    if (expSign) {
 8000fc0:	bb0e      	cbnz	r6, 8001006 <JAtoN+0x19e>
        fraction /= dblExp;
    } else {
        fraction *= dblExp;
 8000fc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fc6:	4650      	mov	r0, sl
 8000fc8:	4659      	mov	r1, fp
 8000fca:	f7ff fab5 	bl	8000538 <__aeabi_dmul>
 8000fce:	e020      	b.n	8001012 <JAtoN+0x1aa>
    int exp = 0;                /* Exponent read from "EX" field. */
 8000fd0:	2300      	movs	r3, #0
        exp = fracExp + exp;
 8000fd2:	441c      	add	r4, r3
 8000fd4:	e7e0      	b.n	8000f98 <JAtoN+0x130>
 8000fd6:	e8f7 2302 	ldrd	r2, r3, [r7], #8
 8000fda:	e9cd 2300 	strd	r2, r3, [sp]
        if (p10 == 0.0) {
 8000fde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f7ff fd0f 	bl	8000a08 <__aeabi_dcmpeq>
 8000fea:	2800      	cmp	r0, #0
 8000fec:	d1e8      	bne.n	8000fc0 <JAtoN+0x158>
        if (exp & 01) {
 8000fee:	07e3      	lsls	r3, r4, #31
 8000ff0:	d507      	bpl.n	8001002 <JAtoN+0x19a>
            dblExp *= p10;
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	4659      	mov	r1, fp
 8000ff6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000ffa:	f7ff fa9d 	bl	8000538 <__aeabi_dmul>
 8000ffe:	4682      	mov	sl, r0
 8001000:	468b      	mov	fp, r1
    for (d = 0; exp != 0; exp >>= 1, d += 1) {
 8001002:	1064      	asrs	r4, r4, #1
 8001004:	e7d9      	b.n	8000fba <JAtoN+0x152>
        fraction /= dblExp;
 8001006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800100a:	4652      	mov	r2, sl
 800100c:	465b      	mov	r3, fp
 800100e:	f7ff fbbd 	bl	800078c <__aeabi_ddiv>
        fraction *= dblExp;
 8001012:	4603      	mov	r3, r0
 8001014:	460a      	mov	r2, r1
    }

done:
    if (endPtr != NULL) {
 8001016:	9905      	ldr	r1, [sp, #20]
 8001018:	b109      	cbz	r1, 800101e <JAtoN+0x1b6>
        *endPtr = (char *) p;
 800101a:	f8c1 8000 	str.w	r8, [r1]
    }

    if (sign) {
 800101e:	9904      	ldr	r1, [sp, #16]
 8001020:	b109      	cbz	r1, 8001026 <JAtoN+0x1be>
        return -fraction;
 8001022:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
    }
    return fraction;
}
 8001026:	4618      	mov	r0, r3
 8001028:	4611      	mov	r1, r2
 800102a:	b007      	add	sp, #28
 800102c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001030:	00000000 	.word	0x00000000
 8001034:	41cdcd65 	.word	0x41cdcd65
 8001038:	0800a408 	.word	0x0800a408
 800103c:	3ff00000 	.word	0x3ff00000

08001040 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static Jbool parse_value(J * const item, parse_buffer * const input_buffer)
{
 8001040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001044:	4605      	mov	r5, r0
 8001046:	b093      	sub	sp, #76	; 0x4c
    if ((input_buffer == NULL) || (input_buffer->content == NULL)) {
 8001048:	460c      	mov	r4, r1
 800104a:	b909      	cbnz	r1, 8001050 <parse_value+0x10>
fail:
    if (head != NULL) {
        JDelete(head);
    }

    return false;
 800104c:	2000      	movs	r0, #0
 800104e:	e027      	b.n	80010a0 <parse_value+0x60>
    if ((input_buffer == NULL) || (input_buffer->content == NULL)) {
 8001050:	6808      	ldr	r0, [r1, #0]
 8001052:	2800      	cmp	r0, #0
 8001054:	d0fa      	beq.n	800104c <parse_value+0xc>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), c_null, c_null_len) == 0)) {
 8001056:	688b      	ldr	r3, [r1, #8]
 8001058:	6862      	ldr	r2, [r4, #4]
 800105a:	1d19      	adds	r1, r3, #4
 800105c:	4291      	cmp	r1, r2
 800105e:	d80d      	bhi.n	800107c <parse_value+0x3c>
 8001060:	4993      	ldr	r1, [pc, #588]	; (80012b0 <parse_value+0x270>)
 8001062:	2204      	movs	r2, #4
 8001064:	6809      	ldr	r1, [r1, #0]
 8001066:	4418      	add	r0, r3
 8001068:	f008 fe80 	bl	8009d6c <strncmp>
 800106c:	b930      	cbnz	r0, 800107c <parse_value+0x3c>
        item->type = JNULL;
 800106e:	2304      	movs	r3, #4
 8001070:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
 8001072:	68a3      	ldr	r3, [r4, #8]
 8001074:	3304      	adds	r3, #4
    input_buffer->offset++;
 8001076:	60a3      	str	r3, [r4, #8]
    return true;
 8001078:	2001      	movs	r0, #1
 800107a:	e011      	b.n	80010a0 <parse_value+0x60>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), c_false, c_false_len) == 0)) {
 800107c:	68a3      	ldr	r3, [r4, #8]
 800107e:	6862      	ldr	r2, [r4, #4]
 8001080:	1d59      	adds	r1, r3, #5
 8001082:	4291      	cmp	r1, r2
 8001084:	d80f      	bhi.n	80010a6 <parse_value+0x66>
 8001086:	6820      	ldr	r0, [r4, #0]
 8001088:	498a      	ldr	r1, [pc, #552]	; (80012b4 <parse_value+0x274>)
 800108a:	2205      	movs	r2, #5
 800108c:	6809      	ldr	r1, [r1, #0]
 800108e:	4418      	add	r0, r3
 8001090:	f008 fe6c 	bl	8009d6c <strncmp>
 8001094:	b938      	cbnz	r0, 80010a6 <parse_value+0x66>
        input_buffer->offset += 5;
 8001096:	68a3      	ldr	r3, [r4, #8]
        item->type = JFalse;
 8001098:	2001      	movs	r0, #1
 800109a:	60e8      	str	r0, [r5, #12]
        input_buffer->offset += 5;
 800109c:	3305      	adds	r3, #5
        input_buffer->offset += 4;
 800109e:	60a3      	str	r3, [r4, #8]
}
 80010a0:	b013      	add	sp, #76	; 0x4c
 80010a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), c_true, c_true_len) == 0)) {
 80010a6:	68a3      	ldr	r3, [r4, #8]
 80010a8:	6862      	ldr	r2, [r4, #4]
 80010aa:	1d19      	adds	r1, r3, #4
 80010ac:	4291      	cmp	r1, r2
 80010ae:	d80e      	bhi.n	80010ce <parse_value+0x8e>
 80010b0:	6820      	ldr	r0, [r4, #0]
 80010b2:	4981      	ldr	r1, [pc, #516]	; (80012b8 <parse_value+0x278>)
 80010b4:	2204      	movs	r2, #4
 80010b6:	6809      	ldr	r1, [r1, #0]
 80010b8:	4418      	add	r0, r3
 80010ba:	f008 fe57 	bl	8009d6c <strncmp>
 80010be:	b930      	cbnz	r0, 80010ce <parse_value+0x8e>
        item->type = JTrue;
 80010c0:	2302      	movs	r3, #2
 80010c2:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
 80010c4:	68a3      	ldr	r3, [r4, #8]
        item->valueint = 1;
 80010c6:	2001      	movs	r0, #1
 80010c8:	6168      	str	r0, [r5, #20]
        input_buffer->offset += 4;
 80010ca:	3304      	adds	r3, #4
 80010cc:	e7e7      	b.n	800109e <parse_value+0x5e>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"')) {
 80010ce:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 80010d2:	4283      	cmp	r3, r0
 80010d4:	d2ba      	bcs.n	800104c <parse_value+0xc>
 80010d6:	6821      	ldr	r1, [r4, #0]
 80010d8:	5cca      	ldrb	r2, [r1, r3]
 80010da:	2a22      	cmp	r2, #34	; 0x22
 80010dc:	eb01 0603 	add.w	r6, r1, r3
 80010e0:	d106      	bne.n	80010f0 <parse_value+0xb0>
        return parse_string(item, input_buffer);
 80010e2:	4621      	mov	r1, r4
 80010e4:	4628      	mov	r0, r5
}
 80010e6:	b013      	add	sp, #76	; 0x4c
 80010e8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return parse_string(item, input_buffer);
 80010ec:	f000 b962 	b.w	80013b4 <parse_string>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9')))) {
 80010f0:	2a2d      	cmp	r2, #45	; 0x2d
 80010f2:	d003      	beq.n	80010fc <parse_value+0xbc>
 80010f4:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80010f8:	2f09      	cmp	r7, #9
 80010fa:	d85d      	bhi.n	80011b8 <parse_value+0x178>
    unsigned char *after_end = NULL;
 80010fc:	2200      	movs	r2, #0
 80010fe:	9201      	str	r2, [sp, #4]
    if ((input_buffer == NULL) || (input_buffer->content == NULL)) {
 8001100:	2900      	cmp	r1, #0
 8001102:	d0a3      	beq.n	800104c <parse_value+0xc>
 8001104:	a902      	add	r1, sp, #8
 8001106:	1ac3      	subs	r3, r0, r3
 8001108:	4688      	mov	r8, r1
            number_c_string[i] = decimal_point;
 800110a:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
        switch (buffer_at_offset(input_buffer)[i]) {
 800110e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001112:	2839      	cmp	r0, #57	; 0x39
 8001114:	d80f      	bhi.n	8001136 <parse_value+0xf6>
 8001116:	282a      	cmp	r0, #42	; 0x2a
 8001118:	d919      	bls.n	800114e <parse_value+0x10e>
 800111a:	f1a0 072b 	sub.w	r7, r0, #43	; 0x2b
 800111e:	2f0e      	cmp	r7, #14
 8001120:	d815      	bhi.n	800114e <parse_value+0x10e>
 8001122:	e8df f007 	tbb	[pc, r7]
 8001126:	140c      	.short	0x140c
 8001128:	0c14360c 	.word	0x0c14360c
 800112c:	0c0c0c0c 	.word	0x0c0c0c0c
 8001130:	0c0c0c0c 	.word	0x0c0c0c0c
 8001134:	0c          	.byte	0x0c
 8001135:	00          	.byte	0x00
 8001136:	f000 07df 	and.w	r7, r0, #223	; 0xdf
 800113a:	2f45      	cmp	r7, #69	; 0x45
 800113c:	d107      	bne.n	800114e <parse_value+0x10e>
            number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800113e:	7008      	strb	r0, [r1, #0]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++) {
 8001140:	3201      	adds	r2, #1
 8001142:	2a3f      	cmp	r2, #63	; 0x3f
 8001144:	f101 0101 	add.w	r1, r1, #1
 8001148:	d001      	beq.n	800114e <parse_value+0x10e>
 800114a:	429a      	cmp	r2, r3
 800114c:	d1df      	bne.n	800110e <parse_value+0xce>
    number_c_string[i] = '\0';
 800114e:	ab12      	add	r3, sp, #72	; 0x48
 8001150:	441a      	add	r2, r3
 8001152:	2300      	movs	r3, #0
 8001154:	f802 3c40 	strb.w	r3, [r2, #-64]
    number = JAtoN((const char*)number_c_string, (char**)&after_end);
 8001158:	a901      	add	r1, sp, #4
 800115a:	4640      	mov	r0, r8
 800115c:	f7ff fe84 	bl	8000e68 <JAtoN>
    if (number_c_string == after_end) {
 8001160:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8001164:	45c1      	cmp	r9, r8
    number = JAtoN((const char*)number_c_string, (char**)&after_end);
 8001166:	4606      	mov	r6, r0
 8001168:	460f      	mov	r7, r1
    if (number_c_string == after_end) {
 800116a:	f43f af6f 	beq.w	800104c <parse_value+0xc>
    item->valuenumber = number;
 800116e:	e9c5 6706 	strd	r6, r7, [r5, #24]
    if (number >= LONG_MAX) {
 8001172:	a34d      	add	r3, pc, #308	; (adr r3, 80012a8 <parse_value+0x268>)
 8001174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001178:	f7ff fc64 	bl	8000a44 <__aeabi_dcmpge>
 800117c:	b160      	cbz	r0, 8001198 <parse_value+0x158>
        item->valueint = LONG_MAX;
 800117e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        item->valueint = LONG_MIN;
 8001182:	616b      	str	r3, [r5, #20]
    item->type = JNumber;
 8001184:	2308      	movs	r3, #8
 8001186:	60eb      	str	r3, [r5, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001188:	68a3      	ldr	r3, [r4, #8]
 800118a:	eba9 0808 	sub.w	r8, r9, r8
 800118e:	4443      	add	r3, r8
 8001190:	e771      	b.n	8001076 <parse_value+0x36>
            number_c_string[i] = decimal_point;
 8001192:	f881 c000 	strb.w	ip, [r1]
            break;
 8001196:	e7d3      	b.n	8001140 <parse_value+0x100>
    } else if (number <= LONG_MIN) {
 8001198:	4b48      	ldr	r3, [pc, #288]	; (80012bc <parse_value+0x27c>)
 800119a:	2200      	movs	r2, #0
 800119c:	4630      	mov	r0, r6
 800119e:	4639      	mov	r1, r7
 80011a0:	f7ff fc46 	bl	8000a30 <__aeabi_dcmple>
 80011a4:	b110      	cbz	r0, 80011ac <parse_value+0x16c>
        item->valueint = LONG_MIN;
 80011a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80011aa:	e7ea      	b.n	8001182 <parse_value+0x142>
        item->valueint = (long int)number;
 80011ac:	4630      	mov	r0, r6
 80011ae:	4639      	mov	r1, r7
 80011b0:	f7ff fc72 	bl	8000a98 <__aeabi_d2iz>
 80011b4:	6168      	str	r0, [r5, #20]
 80011b6:	e7e5      	b.n	8001184 <parse_value+0x144>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '[')) {
 80011b8:	2a5b      	cmp	r2, #91	; 0x5b
 80011ba:	d14f      	bne.n	800125c <parse_value+0x21c>
    if (input_buffer->depth >= N_CJSON_NESTING_LIMIT) {
 80011bc:	68e2      	ldr	r2, [r4, #12]
 80011be:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80011c2:	f4bf af43 	bcs.w	800104c <parse_value+0xc>
    input_buffer->depth++;
 80011c6:	3201      	adds	r2, #1
 80011c8:	60e2      	str	r2, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[') {
 80011ca:	5cca      	ldrb	r2, [r1, r3]
 80011cc:	2a5b      	cmp	r2, #91	; 0x5b
 80011ce:	f47f af3d 	bne.w	800104c <parse_value+0xc>
    input_buffer->offset++;
 80011d2:	3301      	adds	r3, #1
 80011d4:	60a3      	str	r3, [r4, #8]
    buffer_skip_whitespace(input_buffer);
 80011d6:	4620      	mov	r0, r4
 80011d8:	f006 ff67 	bl	80080aa <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']')) {
 80011dc:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d25c      	bcs.n	800129e <parse_value+0x25e>
 80011e4:	6822      	ldr	r2, [r4, #0]
 80011e6:	5cd2      	ldrb	r2, [r2, r3]
 80011e8:	2a5d      	cmp	r2, #93	; 0x5d
 80011ea:	d109      	bne.n	8001200 <parse_value+0x1c0>
    J *head = NULL; /* head of the linked list */
 80011ec:	2700      	movs	r7, #0
    input_buffer->depth--;
 80011ee:	68e3      	ldr	r3, [r4, #12]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	60e3      	str	r3, [r4, #12]
    item->type = JArray;
 80011f4:	2320      	movs	r3, #32
    item->child = head;
 80011f6:	e9c5 7302 	strd	r7, r3, [r5, #8]
    input_buffer->offset++;
 80011fa:	68a3      	ldr	r3, [r4, #8]
 80011fc:	3301      	adds	r3, #1
 80011fe:	e73a      	b.n	8001076 <parse_value+0x36>
    input_buffer->offset--;
 8001200:	3b01      	subs	r3, #1
    J *current_item = NULL;
 8001202:	2600      	movs	r6, #0
    input_buffer->offset--;
 8001204:	60a3      	str	r3, [r4, #8]
    J *head = NULL; /* head of the linked list */
 8001206:	4637      	mov	r7, r6
        J *new_item = JNew_Item();
 8001208:	f006 ff71 	bl	80080ee <JNew_Item>
        if (new_item == NULL) {
 800120c:	46b0      	mov	r8, r6
 800120e:	4606      	mov	r6, r0
 8001210:	2800      	cmp	r0, #0
 8001212:	f000 8099 	beq.w	8001348 <parse_value+0x308>
        if (head == NULL) {
 8001216:	b1ff      	cbz	r7, 8001258 <parse_value+0x218>
            current_item->next = new_item;
 8001218:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
 800121c:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
 8001220:	68a3      	ldr	r3, [r4, #8]
 8001222:	3301      	adds	r3, #1
 8001224:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
 8001226:	4620      	mov	r0, r4
 8001228:	f006 ff3f 	bl	80080aa <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer)) {
 800122c:	4621      	mov	r1, r4
 800122e:	4630      	mov	r0, r6
 8001230:	f7ff ff06 	bl	8001040 <parse_value>
 8001234:	2800      	cmp	r0, #0
 8001236:	f000 808a 	beq.w	800134e <parse_value+0x30e>
        buffer_skip_whitespace(input_buffer);
 800123a:	4620      	mov	r0, r4
 800123c:	f006 ff35 	bl	80080aa <buffer_skip_whitespace>
    } while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001240:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8001244:	4293      	cmp	r3, r2
 8001246:	f080 8082 	bcs.w	800134e <parse_value+0x30e>
 800124a:	6822      	ldr	r2, [r4, #0]
 800124c:	5cd3      	ldrb	r3, [r2, r3]
 800124e:	2b2c      	cmp	r3, #44	; 0x2c
 8001250:	d0da      	beq.n	8001208 <parse_value+0x1c8>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']') {
 8001252:	2b5d      	cmp	r3, #93	; 0x5d
 8001254:	d17b      	bne.n	800134e <parse_value+0x30e>
 8001256:	e7ca      	b.n	80011ee <parse_value+0x1ae>
 8001258:	4607      	mov	r7, r0
 800125a:	e7e1      	b.n	8001220 <parse_value+0x1e0>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{')) {
 800125c:	2a7b      	cmp	r2, #123	; 0x7b
 800125e:	f47f aef5 	bne.w	800104c <parse_value+0xc>
    if (input_buffer->depth >= N_CJSON_NESTING_LIMIT) {
 8001262:	68e2      	ldr	r2, [r4, #12]
 8001264:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8001268:	f4bf aef0 	bcs.w	800104c <parse_value+0xc>
    input_buffer->depth++;
 800126c:	3201      	adds	r2, #1
 800126e:	60e2      	str	r2, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{')) {
 8001270:	5cca      	ldrb	r2, [r1, r3]
 8001272:	2a7b      	cmp	r2, #123	; 0x7b
 8001274:	f47f aeea 	bne.w	800104c <parse_value+0xc>
    input_buffer->offset++;
 8001278:	3301      	adds	r3, #1
 800127a:	60a3      	str	r3, [r4, #8]
    buffer_skip_whitespace(input_buffer);
 800127c:	4620      	mov	r0, r4
 800127e:	f006 ff14 	bl	80080aa <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}')) {
 8001282:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8001286:	4293      	cmp	r3, r2
 8001288:	d209      	bcs.n	800129e <parse_value+0x25e>
 800128a:	6822      	ldr	r2, [r4, #0]
 800128c:	5cd2      	ldrb	r2, [r2, r3]
 800128e:	2a7d      	cmp	r2, #125	; 0x7d
 8001290:	d116      	bne.n	80012c0 <parse_value+0x280>
    J *head = NULL; /* linked list head */
 8001292:	2700      	movs	r7, #0
    input_buffer->depth--;
 8001294:	68e3      	ldr	r3, [r4, #12]
 8001296:	3b01      	subs	r3, #1
 8001298:	60e3      	str	r3, [r4, #12]
    item->type = JObject;
 800129a:	2340      	movs	r3, #64	; 0x40
 800129c:	e7ab      	b.n	80011f6 <parse_value+0x1b6>
        input_buffer->offset--;
 800129e:	3b01      	subs	r3, #1
 80012a0:	60a3      	str	r3, [r4, #8]
    if (head != NULL) {
 80012a2:	e6d3      	b.n	800104c <parse_value+0xc>
 80012a4:	f3af 8000 	nop.w
 80012a8:	ffc00000 	.word	0xffc00000
 80012ac:	41dfffff 	.word	0x41dfffff
 80012b0:	2000000c 	.word	0x2000000c
 80012b4:	20000004 	.word	0x20000004
 80012b8:	20000018 	.word	0x20000018
 80012bc:	c1e00000 	.word	0xc1e00000
    J *current_item = NULL;
 80012c0:	2600      	movs	r6, #0
    input_buffer->offset--;
 80012c2:	3b01      	subs	r3, #1
 80012c4:	60a3      	str	r3, [r4, #8]
    J *head = NULL; /* linked list head */
 80012c6:	4637      	mov	r7, r6
        current_item->valuestring = NULL;
 80012c8:	46b0      	mov	r8, r6
        J *new_item = JNew_Item();
 80012ca:	f006 ff10 	bl	80080ee <JNew_Item>
        if (new_item == NULL) {
 80012ce:	46b1      	mov	r9, r6
 80012d0:	4606      	mov	r6, r0
 80012d2:	2800      	cmp	r0, #0
 80012d4:	d038      	beq.n	8001348 <parse_value+0x308>
        if (head == NULL) {
 80012d6:	b3af      	cbz	r7, 8001344 <parse_value+0x304>
            current_item->next = new_item;
 80012d8:	f8c9 0000 	str.w	r0, [r9]
            new_item->prev = current_item;
 80012dc:	f8c0 9004 	str.w	r9, [r0, #4]
        input_buffer->offset++;
 80012e0:	68a3      	ldr	r3, [r4, #8]
 80012e2:	3301      	adds	r3, #1
 80012e4:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
 80012e6:	4620      	mov	r0, r4
 80012e8:	f006 fedf 	bl	80080aa <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer)) {
 80012ec:	4621      	mov	r1, r4
 80012ee:	4630      	mov	r0, r6
 80012f0:	f000 f860 	bl	80013b4 <parse_string>
 80012f4:	b358      	cbz	r0, 800134e <parse_value+0x30e>
        buffer_skip_whitespace(input_buffer);
 80012f6:	4620      	mov	r0, r4
 80012f8:	f006 fed7 	bl	80080aa <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
 80012fc:	6933      	ldr	r3, [r6, #16]
 80012fe:	6233      	str	r3, [r6, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':')) {
 8001300:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8001304:	4293      	cmp	r3, r2
        current_item->valuestring = NULL;
 8001306:	f8c6 8010 	str.w	r8, [r6, #16]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':')) {
 800130a:	d220      	bcs.n	800134e <parse_value+0x30e>
 800130c:	6822      	ldr	r2, [r4, #0]
 800130e:	5cd2      	ldrb	r2, [r2, r3]
 8001310:	2a3a      	cmp	r2, #58	; 0x3a
 8001312:	d11c      	bne.n	800134e <parse_value+0x30e>
        input_buffer->offset++;
 8001314:	3301      	adds	r3, #1
 8001316:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
 8001318:	4620      	mov	r0, r4
 800131a:	f006 fec6 	bl	80080aa <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer)) {
 800131e:	4621      	mov	r1, r4
 8001320:	4630      	mov	r0, r6
 8001322:	f7ff fe8d 	bl	8001040 <parse_value>
 8001326:	b190      	cbz	r0, 800134e <parse_value+0x30e>
        buffer_skip_whitespace(input_buffer);
 8001328:	4620      	mov	r0, r4
 800132a:	f006 febe 	bl	80080aa <buffer_skip_whitespace>
    } while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800132e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8001332:	4293      	cmp	r3, r2
 8001334:	d20b      	bcs.n	800134e <parse_value+0x30e>
 8001336:	6822      	ldr	r2, [r4, #0]
 8001338:	5cd3      	ldrb	r3, [r2, r3]
 800133a:	2b2c      	cmp	r3, #44	; 0x2c
 800133c:	d0c5      	beq.n	80012ca <parse_value+0x28a>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}')) {
 800133e:	2b7d      	cmp	r3, #125	; 0x7d
 8001340:	d105      	bne.n	800134e <parse_value+0x30e>
 8001342:	e7a7      	b.n	8001294 <parse_value+0x254>
 8001344:	4607      	mov	r7, r0
 8001346:	e7cb      	b.n	80012e0 <parse_value+0x2a0>
    if (head != NULL) {
 8001348:	2f00      	cmp	r7, #0
 800134a:	f43f ae7f 	beq.w	800104c <parse_value+0xc>
        JDelete(head);
 800134e:	4638      	mov	r0, r7
 8001350:	f006 ff5c 	bl	800820c <JDelete>
 8001354:	e67a      	b.n	800104c <parse_value+0xc>
 8001356:	bf00      	nop

08001358 <JCreateNumber>:

    return item;
}

N_CJSON_PUBLIC(J *) JCreateNumber(JNUMBER num)
{
 8001358:	b5d0      	push	{r4, r6, r7, lr}
 800135a:	4606      	mov	r6, r0
 800135c:	460f      	mov	r7, r1
    J *item = JNew_Item();
 800135e:	f006 fec6 	bl	80080ee <JNew_Item>
    if(item) {
 8001362:	4604      	mov	r4, r0
 8001364:	b170      	cbz	r0, 8001384 <JCreateNumber+0x2c>
        item->type = JNumber;
 8001366:	2308      	movs	r3, #8
 8001368:	60c3      	str	r3, [r0, #12]
        item->valuenumber = num;
 800136a:	e9c0 6706 	strd	r6, r7, [r0, #24]

        /* use saturation in case of overflow */
        if (num >= LONG_MAX) {
 800136e:	a30e      	add	r3, pc, #56	; (adr r3, 80013a8 <JCreateNumber+0x50>)
 8001370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001374:	4630      	mov	r0, r6
 8001376:	4639      	mov	r1, r7
 8001378:	f7ff fb64 	bl	8000a44 <__aeabi_dcmpge>
 800137c:	b120      	cbz	r0, 8001388 <JCreateNumber+0x30>
            item->valueint = LONG_MAX;
 800137e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        } else if (num <= LONG_MIN) {
            item->valueint = LONG_MIN;
 8001382:	6163      	str	r3, [r4, #20]
            item->valueint = (long int)num;
        }
    }

    return item;
}
 8001384:	4620      	mov	r0, r4
 8001386:	bdd0      	pop	{r4, r6, r7, pc}
        } else if (num <= LONG_MIN) {
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <JCreateNumber+0x58>)
 800138a:	2200      	movs	r2, #0
 800138c:	4630      	mov	r0, r6
 800138e:	4639      	mov	r1, r7
 8001390:	f7ff fb4e 	bl	8000a30 <__aeabi_dcmple>
 8001394:	b110      	cbz	r0, 800139c <JCreateNumber+0x44>
            item->valueint = LONG_MIN;
 8001396:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800139a:	e7f2      	b.n	8001382 <JCreateNumber+0x2a>
            item->valueint = (long int)num;
 800139c:	4630      	mov	r0, r6
 800139e:	4639      	mov	r1, r7
 80013a0:	f7ff fb7a 	bl	8000a98 <__aeabi_d2iz>
 80013a4:	6160      	str	r0, [r4, #20]
    return item;
 80013a6:	e7ed      	b.n	8001384 <JCreateNumber+0x2c>
 80013a8:	ffc00000 	.word	0xffc00000
 80013ac:	41dfffff 	.word	0x41dfffff
 80013b0:	c1e00000 	.word	0xc1e00000

080013b4 <parse_string>:
{
 80013b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 80013b8:	680a      	ldr	r2, [r1, #0]
 80013ba:	688b      	ldr	r3, [r1, #8]
{
 80013bc:	4680      	mov	r8, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 80013be:	1c5d      	adds	r5, r3, #1
    if (buffer_at_offset(input_buffer)[0] != '\"') {
 80013c0:	18d0      	adds	r0, r2, r3
 80013c2:	5cd3      	ldrb	r3, [r2, r3]
 80013c4:	2b22      	cmp	r3, #34	; 0x22
{
 80013c6:	468a      	mov	sl, r1
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 80013c8:	4415      	add	r5, r2
    if (buffer_at_offset(input_buffer)[0] != '\"') {
 80013ca:	f040 80db 	bne.w	8001584 <parse_string+0x1d0>
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"')) {
 80013ce:	684c      	ldr	r4, [r1, #4]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 80013d0:	462f      	mov	r7, r5
        size_t skipped_bytes = 0;
 80013d2:	2300      	movs	r3, #0
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"')) {
 80013d4:	1ab9      	subs	r1, r7, r2
 80013d6:	42a1      	cmp	r1, r4
 80013d8:	f080 80d4 	bcs.w	8001584 <parse_string+0x1d0>
 80013dc:	7839      	ldrb	r1, [r7, #0]
 80013de:	2922      	cmp	r1, #34	; 0x22
 80013e0:	d10d      	bne.n	80013fe <parse_string+0x4a>
        output = (unsigned char*)_Malloc(allocation_length + 1);  // trailing '\0'
 80013e2:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80013e6:	1a38      	subs	r0, r7, r0
        output = (unsigned char*)_Malloc(allocation_length + 1);  // trailing '\0'
 80013e8:	4418      	add	r0, r3
 80013ea:	f000 fecb 	bl	8002184 <NoteMalloc>
        if (output == NULL) {
 80013ee:	4683      	mov	fp, r0
 80013f0:	2800      	cmp	r0, #0
 80013f2:	f000 80c7 	beq.w	8001584 <parse_string+0x1d0>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 80013f6:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8001590 <parse_string+0x1dc>
 80013fa:	4604      	mov	r4, r0
 80013fc:	e00f      	b.n	800141e <parse_string+0x6a>
            if (input_end[0] == '\\') {
 80013fe:	295c      	cmp	r1, #92	; 0x5c
 8001400:	d105      	bne.n	800140e <parse_string+0x5a>
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length) {
 8001402:	3701      	adds	r7, #1
 8001404:	1ab9      	subs	r1, r7, r2
 8001406:	428c      	cmp	r4, r1
 8001408:	f240 80bc 	bls.w	8001584 <parse_string+0x1d0>
                skipped_bytes++;
 800140c:	3301      	adds	r3, #1
            input_end++;
 800140e:	3701      	adds	r7, #1
 8001410:	e7e0      	b.n	80013d4 <parse_string+0x20>
        if (*input_pointer != '\\') {
 8001412:	782b      	ldrb	r3, [r5, #0]
 8001414:	2b5c      	cmp	r3, #92	; 0x5c
 8001416:	d012      	beq.n	800143e <parse_string+0x8a>
            *output_pointer++ = *input_pointer++;
 8001418:	f804 3b01 	strb.w	r3, [r4], #1
 800141c:	3501      	adds	r5, #1
    while (input_pointer < input_end) {
 800141e:	42bd      	cmp	r5, r7
 8001420:	d3f7      	bcc.n	8001412 <parse_string+0x5e>
    *output_pointer = '\0';
 8001422:	2300      	movs	r3, #0
 8001424:	7023      	strb	r3, [r4, #0]
    item->type = JString;
 8001426:	2310      	movs	r3, #16
    item->valuestring = (char*)output;
 8001428:	e9c8 3b03 	strd	r3, fp, [r8, #12]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800142c:	f8da 3000 	ldr.w	r3, [sl]
 8001430:	1afb      	subs	r3, r7, r3
    input_buffer->offset++;
 8001432:	3301      	adds	r3, #1
 8001434:	f8ca 3008 	str.w	r3, [sl, #8]
    return true;
 8001438:	2001      	movs	r0, #1
}
 800143a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((input_end - input_pointer) < 1) {
 800143e:	1b7a      	subs	r2, r7, r5
 8001440:	2a00      	cmp	r2, #0
 8001442:	dd0d      	ble.n	8001460 <parse_string+0xac>
            switch (input_pointer[1]) {
 8001444:	786b      	ldrb	r3, [r5, #1]
 8001446:	2b75      	cmp	r3, #117	; 0x75
 8001448:	d80a      	bhi.n	8001460 <parse_string+0xac>
 800144a:	2b6d      	cmp	r3, #109	; 0x6d
 800144c:	d811      	bhi.n	8001472 <parse_string+0xbe>
 800144e:	2b62      	cmp	r3, #98	; 0x62
 8001450:	d02a      	beq.n	80014a8 <parse_string+0xf4>
 8001452:	d825      	bhi.n	80014a0 <parse_string+0xec>
 8001454:	2b2f      	cmp	r3, #47	; 0x2f
 8001456:	d028      	beq.n	80014aa <parse_string+0xf6>
 8001458:	2b5c      	cmp	r3, #92	; 0x5c
 800145a:	d026      	beq.n	80014aa <parse_string+0xf6>
 800145c:	2b22      	cmp	r3, #34	; 0x22
 800145e:	d024      	beq.n	80014aa <parse_string+0xf6>
        _Free(output);
 8001460:	4658      	mov	r0, fp
 8001462:	f000 fe97 	bl	8002194 <NoteFree>
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001466:	f8da 0000 	ldr.w	r0, [sl]
 800146a:	1a28      	subs	r0, r5, r0
 800146c:	f8ca 0008 	str.w	r0, [sl, #8]
 8001470:	e08b      	b.n	800158a <parse_string+0x1d6>
            switch (input_pointer[1]) {
 8001472:	3b6e      	subs	r3, #110	; 0x6e
 8001474:	2b07      	cmp	r3, #7
 8001476:	d8f3      	bhi.n	8001460 <parse_string+0xac>
 8001478:	a101      	add	r1, pc, #4	; (adr r1, 8001480 <parse_string+0xcc>)
 800147a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800147e:	bf00      	nop
 8001480:	080014b5 	.word	0x080014b5
 8001484:	08001461 	.word	0x08001461
 8001488:	08001461 	.word	0x08001461
 800148c:	08001461 	.word	0x08001461
 8001490:	080014b9 	.word	0x080014b9
 8001494:	08001461 	.word	0x08001461
 8001498:	080014bd 	.word	0x080014bd
 800149c:	080014c1 	.word	0x080014c1
 80014a0:	2b66      	cmp	r3, #102	; 0x66
 80014a2:	d1dd      	bne.n	8001460 <parse_string+0xac>
                *output_pointer++ = '\f';
 80014a4:	230c      	movs	r3, #12
 80014a6:	e000      	b.n	80014aa <parse_string+0xf6>
                *output_pointer++ = '\b';
 80014a8:	2308      	movs	r3, #8
                *output_pointer++ = '\f';
 80014aa:	f804 3b01 	strb.w	r3, [r4], #1
            unsigned char sequence_length = 2;
 80014ae:	2302      	movs	r3, #2
            input_pointer += sequence_length;
 80014b0:	441d      	add	r5, r3
 80014b2:	e7b4      	b.n	800141e <parse_string+0x6a>
                *output_pointer++ = '\n';
 80014b4:	230a      	movs	r3, #10
 80014b6:	e7f8      	b.n	80014aa <parse_string+0xf6>
                *output_pointer++ = '\r';
 80014b8:	230d      	movs	r3, #13
 80014ba:	e7f6      	b.n	80014aa <parse_string+0xf6>
                *output_pointer++ = '\t';
 80014bc:	2309      	movs	r3, #9
 80014be:	e7f4      	b.n	80014aa <parse_string+0xf6>
    if ((input_end - first_sequence) < 6) {
 80014c0:	2a05      	cmp	r2, #5
 80014c2:	ddcd      	ble.n	8001460 <parse_string+0xac>
    first_code = parse_hex4(first_sequence + 2);
 80014c4:	1ca8      	adds	r0, r5, #2
 80014c6:	f006 fdcf 	bl	8008068 <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF))) {
 80014ca:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
 80014ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
 80014d2:	4606      	mov	r6, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF))) {
 80014d4:	d3c4      	bcc.n	8001460 <parse_string+0xac>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF)) {
 80014d6:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
 80014da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014de:	d22d      	bcs.n	800153c <parse_string+0x188>
        const unsigned char *second_sequence = first_sequence + 6;
 80014e0:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6) {
 80014e2:	1afb      	subs	r3, r7, r3
 80014e4:	2b05      	cmp	r3, #5
 80014e6:	ddbb      	ble.n	8001460 <parse_string+0xac>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u')) {
 80014e8:	79ab      	ldrb	r3, [r5, #6]
 80014ea:	2b5c      	cmp	r3, #92	; 0x5c
 80014ec:	d1b8      	bne.n	8001460 <parse_string+0xac>
 80014ee:	79eb      	ldrb	r3, [r5, #7]
 80014f0:	2b75      	cmp	r3, #117	; 0x75
 80014f2:	d1b5      	bne.n	8001460 <parse_string+0xac>
        second_code = parse_hex4(second_sequence + 2);
 80014f4:	f105 0008 	add.w	r0, r5, #8
 80014f8:	f006 fdb6 	bl	8008068 <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF)) {
 80014fc:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
 8001500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001504:	d2ac      	bcs.n	8001460 <parse_string+0xac>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001506:	ea09 2686 	and.w	r6, r9, r6, lsl #10
 800150a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800150e:	4330      	orrs	r0, r6
 8001510:	f500 3680 	add.w	r6, r0, #65536	; 0x10000
        sequence_length = 12; /* \uXXXX\uXXXX */
 8001514:	230c      	movs	r3, #12
        first_byte_mark = 0xF0; /* 11110000 */
 8001516:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
        utf8_length = 4;
 800151a:	2004      	movs	r0, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--) {
 800151c:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
 8001520:	fa54 fe8e 	uxtab	lr, r4, lr
 8001524:	45a6      	cmp	lr, r4
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8001526:	b2f2      	uxtb	r2, r6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--) {
 8001528:	d124      	bne.n	8001574 <parse_string+0x1c0>
    if (utf8_length > 1) {
 800152a:	2801      	cmp	r0, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800152c:	bf14      	ite	ne
 800152e:	ea42 020c 	orrne.w	r2, r2, ip
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001532:	f002 027f 	andeq.w	r2, r2, #127	; 0x7f
 8001536:	7022      	strb	r2, [r4, #0]
    *output_pointer += utf8_length;
 8001538:	4404      	add	r4, r0
                if (sequence_length == 0) {
 800153a:	e7b9      	b.n	80014b0 <parse_string+0xfc>
    if (codepoint < 0x80) {
 800153c:	287f      	cmp	r0, #127	; 0x7f
 800153e:	d90a      	bls.n	8001556 <parse_string+0x1a2>
    } else if (codepoint < 0x800) {
 8001540:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8001544:	d30c      	bcc.n	8001560 <parse_string+0x1ac>
    } else if (codepoint < 0x10000) {
 8001546:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800154a:	d30e      	bcc.n	800156a <parse_string+0x1b6>
    } else if (codepoint <= 0x10FFFF) {
 800154c:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 8001550:	d286      	bcs.n	8001460 <parse_string+0xac>
        sequence_length = 6; /* \uXXXX */
 8001552:	2306      	movs	r3, #6
 8001554:	e7df      	b.n	8001516 <parse_string+0x162>
 8001556:	2306      	movs	r3, #6
    unsigned char first_byte_mark = 0;
 8001558:	f04f 0c00 	mov.w	ip, #0
        utf8_length = 1;
 800155c:	2001      	movs	r0, #1
 800155e:	e7dd      	b.n	800151c <parse_string+0x168>
        sequence_length = 6; /* \uXXXX */
 8001560:	2306      	movs	r3, #6
        first_byte_mark = 0xC0; /* 11000000 */
 8001562:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
        utf8_length = 2;
 8001566:	2002      	movs	r0, #2
 8001568:	e7d8      	b.n	800151c <parse_string+0x168>
        sequence_length = 6; /* \uXXXX */
 800156a:	2306      	movs	r3, #6
        first_byte_mark = 0xE0; /* 11100000 */
 800156c:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
        utf8_length = 3;
 8001570:	2003      	movs	r0, #3
 8001572:	e7d3      	b.n	800151c <parse_string+0x168>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8001574:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001578:	f062 017f 	orn	r1, r2, #127	; 0x7f
 800157c:	f80e 1901 	strb.w	r1, [lr], #-1
        codepoint >>= 6;
 8001580:	09b6      	lsrs	r6, r6, #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--) {
 8001582:	e7cf      	b.n	8001524 <parse_string+0x170>
    if (input_pointer != NULL) {
 8001584:	2d00      	cmp	r5, #0
 8001586:	f47f af6e 	bne.w	8001466 <parse_string+0xb2>
    return false;
 800158a:	2000      	movs	r0, #0
 800158c:	e755      	b.n	800143a <parse_string+0x86>
 800158e:	bf00      	nop
 8001590:	000ffc00 	.word	0x000ffc00

08001594 <get_object_item>:
{
 8001594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001596:	460d      	mov	r5, r1
    if ((object == NULL) || (name == NULL)) {
 8001598:	b370      	cbz	r0, 80015f8 <get_object_item+0x64>
 800159a:	b369      	cbz	r1, 80015f8 <get_object_item+0x64>
    current_element = object->child;
 800159c:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive) {
 800159e:	b9fa      	cbnz	r2, 80015e0 <get_object_item+0x4c>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++) {
 80015a0:	4e16      	ldr	r6, [pc, #88]	; (80015fc <get_object_item+0x68>)
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0)) {
 80015a2:	b34c      	cbz	r4, 80015f8 <get_object_item+0x64>
 80015a4:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL)) {
 80015a6:	b1c3      	cbz	r3, 80015da <get_object_item+0x46>
    if (string1 == string2) {
 80015a8:	42ab      	cmp	r3, r5
 80015aa:	d020      	beq.n	80015ee <get_object_item+0x5a>
 80015ac:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 80015b0:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++) {
 80015b2:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 80015b6:	5d8a      	ldrb	r2, [r1, r6]
 80015b8:	f002 0203 	and.w	r2, r2, #3
 80015bc:	2a01      	cmp	r2, #1
 80015be:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80015c2:	5cb0      	ldrb	r0, [r6, r2]
 80015c4:	f000 0003 	and.w	r0, r0, #3
 80015c8:	460f      	mov	r7, r1
 80015ca:	bf08      	it	eq
 80015cc:	f101 0720 	addeq.w	r7, r1, #32
 80015d0:	2801      	cmp	r0, #1
 80015d2:	bf08      	it	eq
 80015d4:	3220      	addeq	r2, #32
 80015d6:	4297      	cmp	r7, r2
 80015d8:	d00b      	beq.n	80015f2 <get_object_item+0x5e>
            current_element = current_element->next;
 80015da:	6824      	ldr	r4, [r4, #0]
 80015dc:	e7e1      	b.n	80015a2 <get_object_item+0xe>
            current_element = current_element->next;
 80015de:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (strcmp(name, current_element->string) != 0)) {
 80015e0:	b154      	cbz	r4, 80015f8 <get_object_item+0x64>
 80015e2:	6a21      	ldr	r1, [r4, #32]
 80015e4:	4628      	mov	r0, r5
 80015e6:	f7ff fc2a 	bl	8000e3e <strcmp>
 80015ea:	2800      	cmp	r0, #0
 80015ec:	d1f7      	bne.n	80015de <get_object_item+0x4a>
}
 80015ee:	4620      	mov	r0, r4
 80015f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (*string1 == '\0') {
 80015f2:	2900      	cmp	r1, #0
 80015f4:	d1dd      	bne.n	80015b2 <get_object_item+0x1e>
 80015f6:	e7fa      	b.n	80015ee <get_object_item+0x5a>
        return NULL;
 80015f8:	2400      	movs	r4, #0
 80015fa:	e7f8      	b.n	80015ee <get_object_item+0x5a>
 80015fc:	0800af6d 	.word	0x0800af6d

08001600 <print_string_ptr>:
{
 8001600:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001604:	4605      	mov	r5, r0
    if (output_buffer == NULL) {
 8001606:	4608      	mov	r0, r1
 8001608:	b911      	cbnz	r1, 8001610 <print_string_ptr+0x10>
        return false;
 800160a:	2000      	movs	r0, #0
}
 800160c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (input == NULL) {
 8001610:	b33d      	cbz	r5, 8001662 <print_string_ptr+0x62>
 8001612:	4e45      	ldr	r6, [pc, #276]	; (8001728 <print_string_ptr+0x128>)
 8001614:	4629      	mov	r1, r5
    size_t escape_characters = 0;
 8001616:	f04f 0900 	mov.w	r9, #0
 800161a:	2401      	movs	r4, #1
 800161c:	468a      	mov	sl, r1
    for (input_pointer = input; *input_pointer; input_pointer++) {
 800161e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001622:	bb4b      	cbnz	r3, 8001678 <print_string_ptr+0x78>
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8001624:	ebaa 0a05 	sub.w	sl, sl, r5
 8001628:	44ca      	add	sl, r9
    output = ensure(output_buffer, output_length + 2);  // sizeof("\"\"")
 800162a:	f10a 0702 	add.w	r7, sl, #2
 800162e:	4639      	mov	r1, r7
 8001630:	f006 fd79 	bl	8008126 <ensure>
    if (output == NULL) {
 8001634:	4606      	mov	r6, r0
 8001636:	2800      	cmp	r0, #0
 8001638:	d0e7      	beq.n	800160a <print_string_ptr+0xa>
    if (escape_characters == 0) {
 800163a:	f04f 0b22 	mov.w	fp, #34	; 0x22
        memcpy(output + 1, input, output_length);
 800163e:	1c44      	adds	r4, r0, #1
        output[output_length + 1] = '\"';
 8001640:	f10a 0801 	add.w	r8, sl, #1
        output[0] = '\"';
 8001644:	f880 b000 	strb.w	fp, [r0]
    if (escape_characters == 0) {
 8001648:	f1b9 0f00 	cmp.w	r9, #0
 800164c:	d12a      	bne.n	80016a4 <print_string_ptr+0xa4>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800164e:	4652      	mov	r2, sl
 8001650:	4629      	mov	r1, r5
 8001652:	4620      	mov	r0, r4
 8001654:	f008 fb6c 	bl	8009d30 <memcpy>
        output[output_length + 1] = '\"';
 8001658:	f806 b008 	strb.w	fp, [r6, r8]
        output[output_length + 2] = '\0';
 800165c:	f806 9007 	strb.w	r9, [r6, r7]
        return true;
 8001660:	e008      	b.n	8001674 <print_string_ptr+0x74>
        output = ensure(output_buffer, 2);  // sizeof("\"\"")
 8001662:	2102      	movs	r1, #2
 8001664:	f006 fd5f 	bl	8008126 <ensure>
        if (output == NULL) {
 8001668:	2800      	cmp	r0, #0
 800166a:	d0ce      	beq.n	800160a <print_string_ptr+0xa>
        output[0] = '"';
 800166c:	2322      	movs	r3, #34	; 0x22
 800166e:	7003      	strb	r3, [r0, #0]
        output[1] = '"';
 8001670:	7043      	strb	r3, [r0, #1]
        output[2] = '\0';
 8001672:	7085      	strb	r5, [r0, #2]
    return true;
 8001674:	2001      	movs	r0, #1
 8001676:	e7c9      	b.n	800160c <print_string_ptr+0xc>
        switch (*input_pointer) {
 8001678:	2b22      	cmp	r3, #34	; 0x22
 800167a:	d80b      	bhi.n	8001694 <print_string_ptr+0x94>
 800167c:	2b07      	cmp	r3, #7
 800167e:	d90c      	bls.n	800169a <print_string_ptr+0x9a>
 8001680:	f1a3 0208 	sub.w	r2, r3, #8
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	fa04 f202 	lsl.w	r2, r4, r2
 800168a:	4232      	tst	r2, r6
 800168c:	d005      	beq.n	800169a <print_string_ptr+0x9a>
            escape_characters++;
 800168e:	f109 0901 	add.w	r9, r9, #1
            break;
 8001692:	e7c3      	b.n	800161c <print_string_ptr+0x1c>
        switch (*input_pointer) {
 8001694:	2b5c      	cmp	r3, #92	; 0x5c
 8001696:	d1c1      	bne.n	800161c <print_string_ptr+0x1c>
 8001698:	e7f9      	b.n	800168e <print_string_ptr+0x8e>
            if (*input_pointer < 32) {
 800169a:	2b1f      	cmp	r3, #31
                escape_characters += 5;
 800169c:	bf98      	it	ls
 800169e:	f109 0905 	addls.w	r9, r9, #5
    for (input_pointer = input; *input_pointer; input_pointer++) {
 80016a2:	e7bb      	b.n	800161c <print_string_ptr+0x1c>
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++) {
 80016a4:	3d01      	subs	r5, #1
            *output_pointer++ = '\\';
 80016a6:	f04f 095c 	mov.w	r9, #92	; 0x5c
                *output_pointer++ = 'u';
 80016aa:	f04f 0a75 	mov.w	sl, #117	; 0x75
                *output_pointer = 't';
 80016ae:	f04f 0b74 	mov.w	fp, #116	; 0x74
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++) {
 80016b2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80016b6:	b923      	cbnz	r3, 80016c2 <print_string_ptr+0xc2>
    output[output_length + 1] = '\"';
 80016b8:	2222      	movs	r2, #34	; 0x22
 80016ba:	f806 2008 	strb.w	r2, [r6, r8]
    output[output_length + 2] = '\0';
 80016be:	55f3      	strb	r3, [r6, r7]
 80016c0:	e7d8      	b.n	8001674 <print_string_ptr+0x74>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\')) {
 80016c2:	2b1f      	cmp	r3, #31
 80016c4:	d907      	bls.n	80016d6 <print_string_ptr+0xd6>
 80016c6:	2b22      	cmp	r3, #34	; 0x22
 80016c8:	d005      	beq.n	80016d6 <print_string_ptr+0xd6>
 80016ca:	2b5c      	cmp	r3, #92	; 0x5c
 80016cc:	d003      	beq.n	80016d6 <print_string_ptr+0xd6>
            *output_pointer = *input_pointer;
 80016ce:	7023      	strb	r3, [r4, #0]
 80016d0:	4622      	mov	r2, r4
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++) {
 80016d2:	1c54      	adds	r4, r2, #1
 80016d4:	e7ed      	b.n	80016b2 <print_string_ptr+0xb2>
            *output_pointer++ = '\\';
 80016d6:	4622      	mov	r2, r4
 80016d8:	f802 9b01 	strb.w	r9, [r2], #1
            switch (*input_pointer) {
 80016dc:	782b      	ldrb	r3, [r5, #0]
 80016de:	2b0d      	cmp	r3, #13
 80016e0:	d809      	bhi.n	80016f6 <print_string_ptr+0xf6>
 80016e2:	2b07      	cmp	r3, #7
 80016e4:	d918      	bls.n	8001718 <print_string_ptr+0x118>
 80016e6:	3b08      	subs	r3, #8
 80016e8:	2b05      	cmp	r3, #5
 80016ea:	d815      	bhi.n	8001718 <print_string_ptr+0x118>
 80016ec:	e8df f003 	tbb	[pc, r3]
 80016f0:	140d1109 	.word	0x140d1109
 80016f4:	0f0b      	.short	0x0f0b
 80016f6:	2b22      	cmp	r3, #34	; 0x22
 80016f8:	d001      	beq.n	80016fe <print_string_ptr+0xfe>
 80016fa:	2b5c      	cmp	r3, #92	; 0x5c
 80016fc:	d10c      	bne.n	8001718 <print_string_ptr+0x118>
                *output_pointer = 'b';
 80016fe:	7063      	strb	r3, [r4, #1]
                break;
 8001700:	e7e7      	b.n	80016d2 <print_string_ptr+0xd2>
                *output_pointer = 'b';
 8001702:	2362      	movs	r3, #98	; 0x62
 8001704:	e7fb      	b.n	80016fe <print_string_ptr+0xfe>
                *output_pointer = 'f';
 8001706:	2366      	movs	r3, #102	; 0x66
 8001708:	e7f9      	b.n	80016fe <print_string_ptr+0xfe>
                *output_pointer = 'n';
 800170a:	236e      	movs	r3, #110	; 0x6e
 800170c:	e7f7      	b.n	80016fe <print_string_ptr+0xfe>
                *output_pointer = 'r';
 800170e:	2372      	movs	r3, #114	; 0x72
 8001710:	e7f5      	b.n	80016fe <print_string_ptr+0xfe>
                *output_pointer = 't';
 8001712:	f884 b001 	strb.w	fp, [r4, #1]
                break;
 8001716:	e7dc      	b.n	80016d2 <print_string_ptr+0xd2>
                *output_pointer++ = 'u';
 8001718:	f884 a001 	strb.w	sl, [r4, #1]
                htoa16(*input_pointer, output_pointer);
 800171c:	7828      	ldrb	r0, [r5, #0]
 800171e:	1ca1      	adds	r1, r4, #2
 8001720:	f006 fd95 	bl	800824e <htoa16>
                output_pointer += 4;
 8001724:	1da2      	adds	r2, r4, #6
                break;
 8001726:	e7d4      	b.n	80016d2 <print_string_ptr+0xd2>
 8001728:	04000037 	.word	0x04000037

0800172c <print_value>:
{
 800172c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001730:	460c      	mov	r4, r1
 8001732:	b08d      	sub	sp, #52	; 0x34
    if ((item == NULL) || (output_buffer == NULL)) {
 8001734:	4606      	mov	r6, r0
 8001736:	b908      	cbnz	r0, 800173c <print_value+0x10>
    switch ((item->type) & 0xFF) {
 8001738:	2500      	movs	r5, #0
 800173a:	e05d      	b.n	80017f8 <print_value+0xcc>
    if ((item == NULL) || (output_buffer == NULL)) {
 800173c:	2900      	cmp	r1, #0
 800173e:	d0fb      	beq.n	8001738 <print_value+0xc>
    switch ((item->type) & 0xFF) {
 8001740:	7b05      	ldrb	r5, [r0, #12]
 8001742:	2d10      	cmp	r5, #16
 8001744:	f000 80ae 	beq.w	80018a4 <print_value+0x178>
 8001748:	dc18      	bgt.n	800177c <print_value+0x50>
 800174a:	1e6b      	subs	r3, r5, #1
 800174c:	2b07      	cmp	r3, #7
 800174e:	d8f3      	bhi.n	8001738 <print_value+0xc>
 8001750:	2b07      	cmp	r3, #7
 8001752:	d8f1      	bhi.n	8001738 <print_value+0xc>
 8001754:	a201      	add	r2, pc, #4	; (adr r2, 800175c <print_value+0x30>)
 8001756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175a:	bf00      	nop
 800175c:	080017e5 	.word	0x080017e5
 8001760:	08001801 	.word	0x08001801
 8001764:	08001739 	.word	0x08001739
 8001768:	080017cd 	.word	0x080017cd
 800176c:	08001739 	.word	0x08001739
 8001770:	08001739 	.word	0x08001739
 8001774:	08001739 	.word	0x08001739
 8001778:	08001811 	.word	0x08001811
 800177c:	2d40      	cmp	r5, #64	; 0x40
 800177e:	f000 80c0 	beq.w	8001902 <print_value+0x1d6>
 8001782:	2d80      	cmp	r5, #128	; 0x80
 8001784:	d07b      	beq.n	800187e <print_value+0x152>
 8001786:	2d20      	cmp	r5, #32
 8001788:	d1d6      	bne.n	8001738 <print_value+0xc>
        return print_array(item, output_buffer);
 800178a:	6886      	ldr	r6, [r0, #8]
    output_pointer = ensure(output_buffer, 1);
 800178c:	2101      	movs	r1, #1
 800178e:	4620      	mov	r0, r4
 8001790:	f006 fcc9 	bl	8008126 <ensure>
    if (output_pointer == NULL) {
 8001794:	2800      	cmp	r0, #0
 8001796:	d0cf      	beq.n	8001738 <print_value+0xc>
    *output_pointer = '[';
 8001798:	235b      	movs	r3, #91	; 0x5b
 800179a:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
 800179c:	68a3      	ldr	r3, [r4, #8]
 800179e:	3301      	adds	r3, #1
 80017a0:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
 80017a2:	68e3      	ldr	r3, [r4, #12]
 80017a4:	3301      	adds	r3, #1
 80017a6:	60e3      	str	r3, [r4, #12]
            *output_pointer++ = ',';
 80017a8:	272c      	movs	r7, #44	; 0x2c
            *output_pointer = '\0';
 80017aa:	f04f 0800 	mov.w	r8, #0
    while (current_element != NULL) {
 80017ae:	2e00      	cmp	r6, #0
 80017b0:	d17e      	bne.n	80018b0 <print_value+0x184>
    output_pointer = ensure(output_buffer, 2);
 80017b2:	2102      	movs	r1, #2
 80017b4:	4620      	mov	r0, r4
 80017b6:	f006 fcb6 	bl	8008126 <ensure>
    if (output_pointer == NULL) {
 80017ba:	2800      	cmp	r0, #0
 80017bc:	d0bc      	beq.n	8001738 <print_value+0xc>
    *output_pointer++ = ']';
 80017be:	235d      	movs	r3, #93	; 0x5d
 80017c0:	7003      	strb	r3, [r0, #0]
    *output_pointer = '\0';
 80017c2:	7046      	strb	r6, [r0, #1]
    output_buffer->depth--;
 80017c4:	68e3      	ldr	r3, [r4, #12]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	60e3      	str	r3, [r4, #12]
 80017ca:	e009      	b.n	80017e0 <print_value+0xb4>
        output = ensure(output_buffer, c_null_len+1);
 80017cc:	2105      	movs	r1, #5
 80017ce:	4620      	mov	r0, r4
 80017d0:	f006 fca9 	bl	8008126 <ensure>
        if (output == NULL) {
 80017d4:	2800      	cmp	r0, #0
 80017d6:	d0af      	beq.n	8001738 <print_value+0xc>
        strcpy((char*)output, c_null);
 80017d8:	4b98      	ldr	r3, [pc, #608]	; (8001a3c <print_value+0x310>)
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
 80017da:	6819      	ldr	r1, [r3, #0]
 80017dc:	f008 fabe 	bl	8009d5c <strcpy>
    return true;
 80017e0:	2501      	movs	r5, #1
 80017e2:	e009      	b.n	80017f8 <print_value+0xcc>
        output = ensure(output_buffer, c_false_len+1);
 80017e4:	2106      	movs	r1, #6
 80017e6:	4620      	mov	r0, r4
 80017e8:	f006 fc9d 	bl	8008126 <ensure>
        if (output == NULL) {
 80017ec:	2800      	cmp	r0, #0
 80017ee:	d0a3      	beq.n	8001738 <print_value+0xc>
        strcpy((char*)output, c_false);
 80017f0:	4b93      	ldr	r3, [pc, #588]	; (8001a40 <print_value+0x314>)
 80017f2:	6819      	ldr	r1, [r3, #0]
 80017f4:	f008 fab2 	bl	8009d5c <strcpy>
}
 80017f8:	4628      	mov	r0, r5
 80017fa:	b00d      	add	sp, #52	; 0x34
 80017fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        output = ensure(output_buffer, c_true_len+1);
 8001800:	2105      	movs	r1, #5
 8001802:	4620      	mov	r0, r4
 8001804:	f006 fc8f 	bl	8008126 <ensure>
        if (output == NULL) {
 8001808:	2800      	cmp	r0, #0
 800180a:	d095      	beq.n	8001738 <print_value+0xc>
        strcpy((char*)output, c_true);
 800180c:	4b8d      	ldr	r3, [pc, #564]	; (8001a44 <print_value+0x318>)
 800180e:	e7e4      	b.n	80017da <print_value+0xae>
    JNUMBER d = item->valuenumber;
 8001810:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
    if ((d * 0) != 0) {
 8001814:	2200      	movs	r2, #0
 8001816:	2300      	movs	r3, #0
 8001818:	4630      	mov	r0, r6
 800181a:	4639      	mov	r1, r7
 800181c:	f7fe fe8c 	bl	8000538 <__aeabi_dmul>
 8001820:	2200      	movs	r2, #0
 8001822:	2300      	movs	r3, #0
 8001824:	f7ff f8f0 	bl	8000a08 <__aeabi_dcmpeq>
 8001828:	b9e0      	cbnz	r0, 8001864 <print_value+0x138>
        strcpy(nbuf, "null");
 800182a:	4987      	ldr	r1, [pc, #540]	; (8001a48 <print_value+0x31c>)
 800182c:	a801      	add	r0, sp, #4
 800182e:	f008 fa95 	bl	8009d5c <strcpy>
        length = strlen(nbuf);
 8001832:	a801      	add	r0, sp, #4
 8001834:	f7ff fb0d 	bl	8000e52 <strlen>
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1))) {
 8001838:	282b      	cmp	r0, #43	; 0x2b
        length = strlen(nbuf);
 800183a:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1))) {
 800183c:	f63f af7c 	bhi.w	8001738 <print_value+0xc>
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8001840:	1c41      	adds	r1, r0, #1
 8001842:	4620      	mov	r0, r4
 8001844:	f006 fc6f 	bl	8008126 <ensure>
    if (output_pointer == NULL) {
 8001848:	2800      	cmp	r0, #0
 800184a:	f43f af75 	beq.w	8001738 <print_value+0xc>
 800184e:	4602      	mov	r2, r0
 8001850:	ab01      	add	r3, sp, #4
 8001852:	1946      	adds	r6, r0, r5
    for (i = 0; i < ((size_t)length); i++) {
 8001854:	42b2      	cmp	r2, r6
 8001856:	d10d      	bne.n	8001874 <print_value+0x148>
    output_pointer[i] = '\0';
 8001858:	2300      	movs	r3, #0
 800185a:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
 800185c:	68a0      	ldr	r0, [r4, #8]
 800185e:	4428      	add	r0, r5
 8001860:	60a0      	str	r0, [r4, #8]
    return true;
 8001862:	e7bd      	b.n	80017e0 <print_value+0xb4>
        JNtoA(d, nbuf, -1);
 8001864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001868:	aa01      	add	r2, sp, #4
 800186a:	4630      	mov	r0, r6
 800186c:	4639      	mov	r1, r7
 800186e:	f000 f967 	bl	8001b40 <JNtoA>
 8001872:	e7de      	b.n	8001832 <print_value+0x106>
        if (number_buffer[i] == decimal_point) {
 8001874:	f813 1b01 	ldrb.w	r1, [r3], #1
            output_pointer[i] = '.';
 8001878:	7011      	strb	r1, [r2, #0]
    for (i = 0; i < ((size_t)length); i++) {
 800187a:	3201      	adds	r2, #1
 800187c:	e7ea      	b.n	8001854 <print_value+0x128>
        if (item->valuestring == NULL) {
 800187e:	6900      	ldr	r0, [r0, #16]
 8001880:	2800      	cmp	r0, #0
 8001882:	f43f af59 	beq.w	8001738 <print_value+0xc>
        raw_length = strlen(item->valuestring) + 1;   // Trailing '\0';
 8001886:	f7ff fae4 	bl	8000e52 <strlen>
 800188a:	1c45      	adds	r5, r0, #1
        output = ensure(output_buffer, raw_length);
 800188c:	4629      	mov	r1, r5
 800188e:	4620      	mov	r0, r4
 8001890:	f006 fc49 	bl	8008126 <ensure>
        if (output == NULL) {
 8001894:	2800      	cmp	r0, #0
 8001896:	f43f af4f 	beq.w	8001738 <print_value+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800189a:	6931      	ldr	r1, [r6, #16]
 800189c:	462a      	mov	r2, r5
 800189e:	f008 fa47 	bl	8009d30 <memcpy>
 80018a2:	e79d      	b.n	80017e0 <print_value+0xb4>
    return print_string_ptr((unsigned char*)item->valuestring, p);
 80018a4:	6900      	ldr	r0, [r0, #16]
}
 80018a6:	b00d      	add	sp, #52	; 0x34
 80018a8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return print_string_ptr((unsigned char*)item->valuestring, p);
 80018ac:	f7ff bea8 	b.w	8001600 <print_string_ptr>
        if (!print_value(current_element, output_buffer)) {
 80018b0:	4621      	mov	r1, r4
 80018b2:	4630      	mov	r0, r6
 80018b4:	f7ff ff3a 	bl	800172c <print_value>
 80018b8:	2800      	cmp	r0, #0
 80018ba:	f43f af3d 	beq.w	8001738 <print_value+0xc>
        update_offset(output_buffer);
 80018be:	4620      	mov	r0, r4
 80018c0:	f006 fc08 	bl	80080d4 <update_offset>
        if (current_element->next) {
 80018c4:	6833      	ldr	r3, [r6, #0]
 80018c6:	b1bb      	cbz	r3, 80018f8 <print_value+0x1cc>
            length = (size_t) (output_buffer->format ? 2 : 1);
 80018c8:	6963      	ldr	r3, [r4, #20]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	bf14      	ite	ne
 80018ce:	f04f 0902 	movne.w	r9, #2
 80018d2:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
 80018d6:	f109 0101 	add.w	r1, r9, #1
 80018da:	4620      	mov	r0, r4
 80018dc:	f006 fc23 	bl	8008126 <ensure>
            if (output_pointer == NULL) {
 80018e0:	2800      	cmp	r0, #0
 80018e2:	f43f af29 	beq.w	8001738 <print_value+0xc>
            *output_pointer++ = ',';
 80018e6:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format) {
 80018e8:	6963      	ldr	r3, [r4, #20]
 80018ea:	b93b      	cbnz	r3, 80018fc <print_value+0x1d0>
            *output_pointer++ = ',';
 80018ec:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
 80018ee:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
 80018f2:	68a3      	ldr	r3, [r4, #8]
 80018f4:	444b      	add	r3, r9
 80018f6:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
 80018f8:	6836      	ldr	r6, [r6, #0]
 80018fa:	e758      	b.n	80017ae <print_value+0x82>
                *output_pointer++ = ' ';
 80018fc:	1c83      	adds	r3, r0, #2
 80018fe:	7045      	strb	r5, [r0, #1]
 8001900:	e7f5      	b.n	80018ee <print_value+0x1c2>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8001902:	694b      	ldr	r3, [r1, #20]
 8001904:	6885      	ldr	r5, [r0, #8]
 8001906:	2b00      	cmp	r3, #0
 8001908:	bf14      	ite	ne
 800190a:	2702      	movne	r7, #2
 800190c:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
 800190e:	1c79      	adds	r1, r7, #1
 8001910:	4620      	mov	r0, r4
 8001912:	f006 fc08 	bl	8008126 <ensure>
    if (output_pointer == NULL) {
 8001916:	2800      	cmp	r0, #0
 8001918:	f43f af0e 	beq.w	8001738 <print_value+0xc>
    *output_pointer++ = '{';
 800191c:	237b      	movs	r3, #123	; 0x7b
 800191e:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
 8001920:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format) {
 8001922:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
 8001924:	3201      	adds	r2, #1
 8001926:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format) {
 8001928:	b10b      	cbz	r3, 800192e <print_value+0x202>
        *output_pointer++ = '\n';
 800192a:	230a      	movs	r3, #10
 800192c:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
 800192e:	68a3      	ldr	r3, [r4, #8]
 8001930:	443b      	add	r3, r7
 8001932:	60a3      	str	r3, [r4, #8]
                *output_pointer++ = '\t';
 8001934:	2609      	movs	r6, #9
        *output_pointer++ = ':';
 8001936:	273a      	movs	r7, #58	; 0x3a
        if (output_buffer->format) {
 8001938:	6963      	ldr	r3, [r4, #20]
    while (current_item) {
 800193a:	b995      	cbnz	r5, 8001962 <print_value+0x236>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 800193c:	2b00      	cmp	r3, #0
 800193e:	d070      	beq.n	8001a22 <print_value+0x2f6>
 8001940:	68e1      	ldr	r1, [r4, #12]
 8001942:	3101      	adds	r1, #1
 8001944:	4620      	mov	r0, r4
 8001946:	f006 fbee 	bl	8008126 <ensure>
    if (output_pointer == NULL) {
 800194a:	2800      	cmp	r0, #0
 800194c:	f43f aef4 	beq.w	8001738 <print_value+0xc>
    if (output_buffer->format) {
 8001950:	6963      	ldr	r3, [r4, #20]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d16f      	bne.n	8001a36 <print_value+0x30a>
 8001956:	4603      	mov	r3, r0
    *output_pointer++ = '}';
 8001958:	227d      	movs	r2, #125	; 0x7d
 800195a:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800195c:	2200      	movs	r2, #0
 800195e:	705a      	strb	r2, [r3, #1]
 8001960:	e730      	b.n	80017c4 <print_value+0x98>
        if (output_buffer->format) {
 8001962:	b173      	cbz	r3, 8001982 <print_value+0x256>
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8001964:	68e1      	ldr	r1, [r4, #12]
 8001966:	4620      	mov	r0, r4
 8001968:	f006 fbdd 	bl	8008126 <ensure>
            if (output_pointer == NULL) {
 800196c:	2800      	cmp	r0, #0
 800196e:	f43f aee3 	beq.w	8001738 <print_value+0xc>
 8001972:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++) {
 8001974:	68e1      	ldr	r1, [r4, #12]
 8001976:	1a13      	subs	r3, r2, r0
 8001978:	4299      	cmp	r1, r3
 800197a:	d84f      	bhi.n	8001a1c <print_value+0x2f0>
            output_buffer->offset += output_buffer->depth;
 800197c:	68a3      	ldr	r3, [r4, #8]
 800197e:	440b      	add	r3, r1
 8001980:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer)) {
 8001982:	6a28      	ldr	r0, [r5, #32]
 8001984:	4621      	mov	r1, r4
 8001986:	f7ff fe3b 	bl	8001600 <print_string_ptr>
 800198a:	2800      	cmp	r0, #0
 800198c:	f43f aed4 	beq.w	8001738 <print_value+0xc>
        update_offset(output_buffer);
 8001990:	4620      	mov	r0, r4
 8001992:	f006 fb9f 	bl	80080d4 <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
 8001996:	6963      	ldr	r3, [r4, #20]
 8001998:	2b00      	cmp	r3, #0
 800199a:	bf14      	ite	ne
 800199c:	f04f 0802 	movne.w	r8, #2
 80019a0:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
 80019a4:	4641      	mov	r1, r8
 80019a6:	4620      	mov	r0, r4
 80019a8:	f006 fbbd 	bl	8008126 <ensure>
        if (output_pointer == NULL) {
 80019ac:	2800      	cmp	r0, #0
 80019ae:	f43f aec3 	beq.w	8001738 <print_value+0xc>
        *output_pointer++ = ':';
 80019b2:	7007      	strb	r7, [r0, #0]
        if (output_buffer->format) {
 80019b4:	6963      	ldr	r3, [r4, #20]
 80019b6:	b103      	cbz	r3, 80019ba <print_value+0x28e>
            *output_pointer++ = '\t';
 80019b8:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
 80019ba:	68a3      	ldr	r3, [r4, #8]
 80019bc:	4443      	add	r3, r8
 80019be:	60a3      	str	r3, [r4, #8]
        if (!print_value(current_item, output_buffer)) {
 80019c0:	4621      	mov	r1, r4
 80019c2:	4628      	mov	r0, r5
 80019c4:	f7ff feb2 	bl	800172c <print_value>
 80019c8:	2800      	cmp	r0, #0
 80019ca:	f43f aeb5 	beq.w	8001738 <print_value+0xc>
        update_offset(output_buffer);
 80019ce:	4620      	mov	r0, r4
 80019d0:	f006 fb80 	bl	80080d4 <update_offset>
        length = (size_t) ((output_buffer->format ? 1 : 0) + (current_item->next ? 1 : 0));
 80019d4:	682b      	ldr	r3, [r5, #0]
 80019d6:	6962      	ldr	r2, [r4, #20]
 80019d8:	f1b3 0800 	subs.w	r8, r3, #0
 80019dc:	bf18      	it	ne
 80019de:	f04f 0801 	movne.w	r8, #1
 80019e2:	2a00      	cmp	r2, #0
 80019e4:	bf18      	it	ne
 80019e6:	f108 0801 	addne.w	r8, r8, #1
        output_pointer = ensure(output_buffer, length + 1);
 80019ea:	f108 0101 	add.w	r1, r8, #1
 80019ee:	4620      	mov	r0, r4
 80019f0:	f006 fb99 	bl	8008126 <ensure>
        if (output_pointer == NULL) {
 80019f4:	2800      	cmp	r0, #0
 80019f6:	f43f ae9f 	beq.w	8001738 <print_value+0xc>
        if (current_item->next) {
 80019fa:	682b      	ldr	r3, [r5, #0]
 80019fc:	b113      	cbz	r3, 8001a04 <print_value+0x2d8>
            *output_pointer++ = ',';
 80019fe:	232c      	movs	r3, #44	; 0x2c
 8001a00:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format) {
 8001a04:	6963      	ldr	r3, [r4, #20]
 8001a06:	b113      	cbz	r3, 8001a0e <print_value+0x2e2>
            *output_pointer++ = '\n';
 8001a08:	230a      	movs	r3, #10
 8001a0a:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
 8001a0e:	2300      	movs	r3, #0
 8001a10:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
 8001a12:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
 8001a14:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
 8001a16:	4443      	add	r3, r8
 8001a18:	60a3      	str	r3, [r4, #8]
        current_item = current_item->next;
 8001a1a:	e78d      	b.n	8001938 <print_value+0x20c>
                *output_pointer++ = '\t';
 8001a1c:	f802 6b01 	strb.w	r6, [r2], #1
            for (i = 0; i < output_buffer->depth; i++) {
 8001a20:	e7a8      	b.n	8001974 <print_value+0x248>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8001a22:	2102      	movs	r1, #2
 8001a24:	e78e      	b.n	8001944 <print_value+0x218>
            *output_pointer++ = '\t';
 8001a26:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++) {
 8001a2a:	68e2      	ldr	r2, [r4, #12]
 8001a2c:	1a19      	subs	r1, r3, r0
 8001a2e:	3a01      	subs	r2, #1
 8001a30:	4291      	cmp	r1, r2
 8001a32:	d3f8      	bcc.n	8001a26 <print_value+0x2fa>
 8001a34:	e790      	b.n	8001958 <print_value+0x22c>
 8001a36:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
 8001a38:	2509      	movs	r5, #9
 8001a3a:	e7f6      	b.n	8001a2a <print_value+0x2fe>
 8001a3c:	2000000c 	.word	0x2000000c
 8001a40:	20000004 	.word	0x20000004
 8001a44:	20000018 	.word	0x20000018
 8001a48:	0800a852 	.word	0x0800a852

08001a4c <JParseWithOpts>:
{
 8001a4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    global_error.json = NULL;
 8001a50:	4f2f      	ldr	r7, [pc, #188]	; (8001b10 <JParseWithOpts+0xc4>)
{
 8001a52:	b085      	sub	sp, #20
 8001a54:	4605      	mov	r5, r0
 8001a56:	460e      	mov	r6, r1
 8001a58:	4691      	mov	r9, r2
    parse_buffer buffer = { 0, 0, 0, 0 };
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	2210      	movs	r2, #16
 8001a5e:	4668      	mov	r0, sp
    global_error.json = NULL;
 8001a60:	f04f 0800 	mov.w	r8, #0
    parse_buffer buffer = { 0, 0, 0, 0 };
 8001a64:	f008 f972 	bl	8009d4c <memset>
    global_error.position = 0;
 8001a68:	e9c7 8800 	strd	r8, r8, [r7]
    if (value == NULL) {
 8001a6c:	2d00      	cmp	r5, #0
 8001a6e:	d046      	beq.n	8001afe <JParseWithOpts+0xb2>
    buffer.length = strlen((const char*)value) + 1;   // Trailing '\0'
 8001a70:	4628      	mov	r0, r5
    buffer.content = (const unsigned char*)value;
 8001a72:	9500      	str	r5, [sp, #0]
    buffer.length = strlen((const char*)value) + 1;   // Trailing '\0'
 8001a74:	f7ff f9ed 	bl	8000e52 <strlen>
 8001a78:	3001      	adds	r0, #1
    buffer.offset = 0;
 8001a7a:	e9cd 0801 	strd	r0, r8, [sp, #4]
    item = JNew_Item();
 8001a7e:	f006 fb36 	bl	80080ee <JNew_Item>
    if (item == NULL) { /* memory fail */
 8001a82:	4604      	mov	r4, r0
 8001a84:	b380      	cbz	r0, 8001ae8 <JParseWithOpts+0x9c>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0)) {
 8001a86:	9800      	ldr	r0, [sp, #0]
 8001a88:	b128      	cbz	r0, 8001a96 <JParseWithOpts+0x4a>
 8001a8a:	9b02      	ldr	r3, [sp, #8]
 8001a8c:	b9e3      	cbnz	r3, 8001ac8 <JParseWithOpts+0x7c>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0)) {
 8001a8e:	9b01      	ldr	r3, [sp, #4]
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d80f      	bhi.n	8001ab4 <JParseWithOpts+0x68>
    return buffer;
 8001a94:	4668      	mov	r0, sp
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer)))) {
 8001a96:	f006 fb08 	bl	80080aa <buffer_skip_whitespace>
 8001a9a:	4601      	mov	r1, r0
 8001a9c:	4620      	mov	r0, r4
 8001a9e:	f7ff facf 	bl	8001040 <parse_value>
 8001aa2:	b1f0      	cbz	r0, 8001ae2 <JParseWithOpts+0x96>
    if (require_null_terminated) {
 8001aa4:	f1b9 0f00 	cmp.w	r9, #0
 8001aa8:	d110      	bne.n	8001acc <JParseWithOpts+0x80>
    if (return_parse_end) {
 8001aaa:	bb56      	cbnz	r6, 8001b02 <JParseWithOpts+0xb6>
}
 8001aac:	4620      	mov	r0, r4
 8001aae:	b005      	add	sp, #20
 8001ab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0)) {
 8001ab4:	4917      	ldr	r1, [pc, #92]	; (8001b14 <JParseWithOpts+0xc8>)
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	f008 f958 	bl	8009d6c <strncmp>
 8001abc:	2800      	cmp	r0, #0
 8001abe:	d1e9      	bne.n	8001a94 <JParseWithOpts+0x48>
        buffer->offset += 3;
 8001ac0:	9b02      	ldr	r3, [sp, #8]
 8001ac2:	3303      	adds	r3, #3
 8001ac4:	9302      	str	r3, [sp, #8]
 8001ac6:	e7e5      	b.n	8001a94 <JParseWithOpts+0x48>
        return NULL;
 8001ac8:	4640      	mov	r0, r8
 8001aca:	e7e4      	b.n	8001a96 <JParseWithOpts+0x4a>
        buffer_skip_whitespace(&buffer);
 8001acc:	4668      	mov	r0, sp
 8001ace:	f006 faec 	bl	80080aa <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0') {
 8001ad2:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d203      	bcs.n	8001ae2 <JParseWithOpts+0x96>
 8001ada:	9a00      	ldr	r2, [sp, #0]
 8001adc:	5cd3      	ldrb	r3, [r2, r3]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0e3      	beq.n	8001aaa <JParseWithOpts+0x5e>
        JDelete(item);
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	f006 fb92 	bl	800820c <JDelete>
        if (buffer.offset < buffer.length) {
 8001ae8:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d30d      	bcc.n	8001b0c <JParseWithOpts+0xc0>
        } else if (buffer.length > 0) {
 8001af0:	b103      	cbz	r3, 8001af4 <JParseWithOpts+0xa8>
            local_error.position = buffer.length - 1;
 8001af2:	3b01      	subs	r3, #1
        if (return_parse_end != NULL) {
 8001af4:	b10e      	cbz	r6, 8001afa <JParseWithOpts+0xae>
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001af6:	18ea      	adds	r2, r5, r3
 8001af8:	6032      	str	r2, [r6, #0]
        global_error = local_error;
 8001afa:	e9c7 5300 	strd	r5, r3, [r7]
    return NULL;
 8001afe:	2400      	movs	r4, #0
 8001b00:	e7d4      	b.n	8001aac <JParseWithOpts+0x60>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001b02:	9b00      	ldr	r3, [sp, #0]
 8001b04:	9a02      	ldr	r2, [sp, #8]
 8001b06:	4413      	add	r3, r2
 8001b08:	6033      	str	r3, [r6, #0]
 8001b0a:	e7cf      	b.n	8001aac <JParseWithOpts+0x60>
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	e7f1      	b.n	8001af4 <JParseWithOpts+0xa8>
 8001b10:	20000570 	.word	0x20000570
 8001b14:	0800a857 	.word	0x0800a857

08001b18 <JGetString>:
    @param   field The field to return.
    @returns The string response, or an empty string, if not present.
*/
/**************************************************************************/
char *JGetString(J *rsp, const char *field)
{
 8001b18:	b510      	push	{r4, lr}
    if (rsp == NULL) {
 8001b1a:	b910      	cbnz	r0, 8001b22 <JGetString+0xa>
    J *item = JGetObjectItem(rsp, field);
    if (item == NULL) {
        return (char *) c_nullstring;
    }
    if (!JIsString(item)) {
        return (char *) c_nullstring;
 8001b1c:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <JGetString+0x24>)
 8001b1e:	6818      	ldr	r0, [r3, #0]
    }
    if (item->valuestring == NULL) {
        return (char *) c_nullstring;
    }
    return item->valuestring;
}
 8001b20:	bd10      	pop	{r4, pc}
    J *item = JGetObjectItem(rsp, field);
 8001b22:	f006 fbe6 	bl	80082f2 <JGetObjectItem>
    if (item == NULL) {
 8001b26:	4604      	mov	r4, r0
 8001b28:	2800      	cmp	r0, #0
 8001b2a:	d0f7      	beq.n	8001b1c <JGetString+0x4>
    if (!JIsString(item)) {
 8001b2c:	f006 fc4d 	bl	80083ca <JIsString>
 8001b30:	2800      	cmp	r0, #0
 8001b32:	d0f3      	beq.n	8001b1c <JGetString+0x4>
    if (item->valuestring == NULL) {
 8001b34:	6920      	ldr	r0, [r4, #16]
 8001b36:	2800      	cmp	r0, #0
 8001b38:	d1f2      	bne.n	8001b20 <JGetString+0x8>
 8001b3a:	e7ef      	b.n	8001b1c <JGetString+0x4>
 8001b3c:	20000010 	.word	0x20000010

08001b40 <JNtoA>:
// Convert a JNUMBER into a null-terminated text string.  Note that buf must
// be pointing at a buffer of JNTOA_MAX length, which is defined so that it
// includes enough space for the null terminator, so there's no need to
// have a buffer of JNTOA_MAX+1.
char * JNtoA(JNUMBER f, char * buf, int precision)
{
 8001b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b44:	b0a1      	sub	sp, #132	; 0x84
    int overflow = 0;
    size_t len = 0;
    int flags = PRINT_F_TYPE_G;
    if (precision < 0) {
        precision = JNTOA_PRECISION;
 8001b46:	f1b3 0900 	subs.w	r9, r3, #0
{
 8001b4a:	9000      	str	r0, [sp, #0]
     */
    if (precision == -1) {
        precision = 6;
    }

    if (fvalue < 0.0) {
 8001b4c:	9800      	ldr	r0, [sp, #0]
{
 8001b4e:	4693      	mov	fp, r2
    if (fvalue < 0.0) {
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	f04f 0200 	mov.w	r2, #0
{
 8001b58:	4688      	mov	r8, r1
        precision = JNTOA_PRECISION;
 8001b5a:	bfb8      	it	lt
 8001b5c:	f04f 0910 	movlt.w	r9, #16
    if (fvalue < 0.0) {
 8001b60:	f7fe ff5c 	bl	8000a1c <__aeabi_dcmplt>
 8001b64:	4604      	mov	r4, r0
 8001b66:	2800      	cmp	r0, #0
 8001b68:	f000 828e 	beq.w	8002088 <JNtoA+0x548>
        sign = '+';
    } else if (flags & PRINT_F_SPACE) {
        sign = ' ';
    }

    if (isnan(fvalue)) {
 8001b6c:	9a00      	ldr	r2, [sp, #0]
 8001b6e:	4643      	mov	r3, r8
 8001b70:	4610      	mov	r0, r2
 8001b72:	4641      	mov	r1, r8
 8001b74:	f7fe ff7a 	bl	8000a6c <__aeabi_dcmpun>
 8001b78:	b9f0      	cbnz	r0, 8001bb8 <JNtoA+0x78>
        sign = '-';
 8001b7a:	232d      	movs	r3, #45	; 0x2d
 8001b7c:	9303      	str	r3, [sp, #12]
        infnan = (flags & PRINT_F_UP) ? "NAN" : "nan";
    } else if (isinf(fvalue)) {
 8001b7e:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8001b82:	4bb0      	ldr	r3, [pc, #704]	; (8001e44 <JNtoA+0x304>)
 8001b84:	9800      	ldr	r0, [sp, #0]
 8001b86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b8a:	4621      	mov	r1, r4
 8001b8c:	f7fe ff6e 	bl	8000a6c <__aeabi_dcmpun>
 8001b90:	2800      	cmp	r0, #0
 8001b92:	d136      	bne.n	8001c02 <JNtoA+0xc2>
 8001b94:	4bab      	ldr	r3, [pc, #684]	; (8001e44 <JNtoA+0x304>)
 8001b96:	9800      	ldr	r0, [sp, #0]
 8001b98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b9c:	4621      	mov	r1, r4
 8001b9e:	f7fe ff47 	bl	8000a30 <__aeabi_dcmple>
 8001ba2:	bb70      	cbnz	r0, 8001c02 <JNtoA+0xc2>
        infnan = (flags & PRINT_F_UP) ? "INF" : "inf";
    }

    if (infnan != NULL) {
        if (sign != 0) {
 8001ba4:	9b03      	ldr	r3, [sp, #12]
 8001ba6:	b30b      	cbz	r3, 8001bec <JNtoA+0xac>
        infnan = (flags & PRINT_F_UP) ? "INF" : "inf";
 8001ba8:	4aa7      	ldr	r2, [pc, #668]	; (8001e48 <JNtoA+0x308>)
            iconvert[ipos++] = sign;
 8001baa:	9b03      	ldr	r3, [sp, #12]
 8001bac:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	3a01      	subs	r2, #1
 8001bb4:	a90a      	add	r1, sp, #40	; 0x28
 8001bb6:	e005      	b.n	8001bc4 <JNtoA+0x84>
        sign = '-';
 8001bb8:	232d      	movs	r3, #45	; 0x2d
        infnan = (flags & PRINT_F_UP) ? "NAN" : "nan";
 8001bba:	4aa4      	ldr	r2, [pc, #656]	; (8001e4c <JNtoA+0x30c>)
        sign = '-';
 8001bbc:	9303      	str	r3, [sp, #12]
 8001bbe:	e7f4      	b.n	8001baa <JNtoA+0x6a>
        }
        while (*infnan != '\0') {
            iconvert[ipos++] = *infnan++;
 8001bc0:	5443      	strb	r3, [r0, r1]
 8001bc2:	3001      	adds	r0, #1
        while (*infnan != '\0') {
 8001bc4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1f9      	bne.n	8001bc0 <JNtoA+0x80>
 8001bcc:	460a      	mov	r2, r1
    while (padlen > 0) {	/* Leading spaces. */
        OUTCHAR(str, *len, size, ' ');
        padlen--;
    }
    while (*value != '\0' && (noprecision || precision-- > 0)) {
        OUTCHAR(str, *len, size, *value);
 8001bce:	f10b 35ff 	add.w	r5, fp, #4294967295	; 0xffffffff
    while (*value != '\0' && (noprecision || precision-- > 0)) {
 8001bd2:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001bd6:	b111      	cbz	r1, 8001bde <JNtoA+0x9e>
 8001bd8:	1ac4      	subs	r4, r0, r3
 8001bda:	2c00      	cmp	r4, #0
 8001bdc:	dc0c      	bgt.n	8001bf8 <JNtoA+0xb8>
    buf[len] = '\0';
 8001bde:	2200      	movs	r2, #0
}
 8001be0:	4658      	mov	r0, fp
    buf[len] = '\0';
 8001be2:	f80b 2003 	strb.w	r2, [fp, r3]
}
 8001be6:	b021      	add	sp, #132	; 0x84
 8001be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int ipos = 0;
 8001bec:	9803      	ldr	r0, [sp, #12]
        infnan = (flags & PRINT_F_UP) ? "INF" : "inf";
 8001bee:	4a96      	ldr	r2, [pc, #600]	; (8001e48 <JNtoA+0x308>)
 8001bf0:	e7df      	b.n	8001bb2 <JNtoA+0x72>
        infnan = (flags & PRINT_F_UP) ? "NAN" : "nan";
 8001bf2:	4a96      	ldr	r2, [pc, #600]	; (8001e4c <JNtoA+0x30c>)
    int ipos = 0;
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	e7dc      	b.n	8001bb2 <JNtoA+0x72>
        OUTCHAR(str, *len, size, *value);
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	2b2b      	cmp	r3, #43	; 0x2b
 8001bfc:	bf98      	it	ls
 8001bfe:	54e9      	strbls	r1, [r5, r3]
        value++;
 8001c00:	e7e7      	b.n	8001bd2 <JNtoA+0x92>
    return separators;
}

static int getexponent(JNUMBER value)
{
    JNUMBER tmp = (value >= 0.0) ? value : -value;
 8001c02:	9800      	ldr	r0, [sp, #0]
 8001c04:	2200      	movs	r2, #0
 8001c06:	2300      	movs	r3, #0
 8001c08:	4641      	mov	r1, r8
            precision--;
 8001c0a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    JNUMBER tmp = (value >= 0.0) ? value : -value;
 8001c0e:	f7fe ff19 	bl	8000a44 <__aeabi_dcmpge>
 8001c12:	b908      	cbnz	r0, 8001c18 <JNtoA+0xd8>
 8001c14:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
        while (*infnan != '\0') {
 8001c18:	9d00      	ldr	r5, [sp, #0]
     * least) if we're called with an infinite value.  However, we checked
     * for infinity before calling this function using our ISINF() macro, so
     * this might be somewhat paranoid.
     */
    while (tmp < 1.0 && tmp > 0.0 && --exponent > -99) {
        tmp *= 10;
 8001c1a:	4f8d      	ldr	r7, [pc, #564]	; (8001e50 <JNtoA+0x310>)
        while (*infnan != '\0') {
 8001c1c:	46c2      	mov	sl, r8
 8001c1e:	2400      	movs	r4, #0
        tmp *= 10;
 8001c20:	2600      	movs	r6, #0
    while (tmp < 1.0 && tmp > 0.0 && --exponent > -99) {
 8001c22:	4b8c      	ldr	r3, [pc, #560]	; (8001e54 <JNtoA+0x314>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	4628      	mov	r0, r5
 8001c28:	4651      	mov	r1, sl
 8001c2a:	f7fe fef7 	bl	8000a1c <__aeabi_dcmplt>
 8001c2e:	b150      	cbz	r0, 8001c46 <JNtoA+0x106>
 8001c30:	2200      	movs	r2, #0
 8001c32:	2300      	movs	r3, #0
 8001c34:	4628      	mov	r0, r5
 8001c36:	4651      	mov	r1, sl
 8001c38:	f7fe ff0e 	bl	8000a58 <__aeabi_dcmpgt>
 8001c3c:	b118      	cbz	r0, 8001c46 <JNtoA+0x106>
 8001c3e:	3c01      	subs	r4, #1
 8001c40:	f114 0f63 	cmn.w	r4, #99	; 0x63
 8001c44:	d102      	bne.n	8001c4c <JNtoA+0x10c>
    }
    while (tmp >= 10.0 && ++exponent < 99) {
 8001c46:	4f82      	ldr	r7, [pc, #520]	; (8001e50 <JNtoA+0x310>)
 8001c48:	2600      	movs	r6, #0
 8001c4a:	e010      	b.n	8001c6e <JNtoA+0x12e>
        tmp *= 10;
 8001c4c:	4628      	mov	r0, r5
 8001c4e:	4651      	mov	r1, sl
 8001c50:	4632      	mov	r2, r6
 8001c52:	463b      	mov	r3, r7
 8001c54:	f7fe fc70 	bl	8000538 <__aeabi_dmul>
 8001c58:	4605      	mov	r5, r0
 8001c5a:	468a      	mov	sl, r1
 8001c5c:	e7e1      	b.n	8001c22 <JNtoA+0xe2>
        tmp /= 10;
 8001c5e:	4628      	mov	r0, r5
 8001c60:	4651      	mov	r1, sl
 8001c62:	4632      	mov	r2, r6
 8001c64:	463b      	mov	r3, r7
 8001c66:	f7fe fd91 	bl	800078c <__aeabi_ddiv>
 8001c6a:	4605      	mov	r5, r0
 8001c6c:	468a      	mov	sl, r1
    while (tmp >= 10.0 && ++exponent < 99) {
 8001c6e:	4632      	mov	r2, r6
 8001c70:	463b      	mov	r3, r7
 8001c72:	4628      	mov	r0, r5
 8001c74:	4651      	mov	r1, sl
 8001c76:	f7fe fee5 	bl	8000a44 <__aeabi_dcmpge>
 8001c7a:	b110      	cbz	r0, 8001c82 <JNtoA+0x142>
 8001c7c:	3401      	adds	r4, #1
 8001c7e:	2c63      	cmp	r4, #99	; 0x63
 8001c80:	d1ed      	bne.n	8001c5e <JNtoA+0x11e>
        while (*infnan != '\0') {
 8001c82:	2301      	movs	r3, #1
 8001c84:	9301      	str	r3, [sp, #4]
 8001c86:	f1b9 0f13 	cmp.w	r9, #19
    if (estyle) {	/* We want exactly one integer digit. */
 8001c8a:	9b01      	ldr	r3, [sp, #4]
 8001c8c:	bfa8      	it	ge
 8001c8e:	f04f 0913 	movge.w	r9, #19
 8001c92:	f8cd 9008 	str.w	r9, [sp, #8]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f040 80c2 	bne.w	8001e20 <JNtoA+0x2e0>
    ufvalue = (fvalue >= 0.0) ? fvalue : -fvalue;
 8001c9c:	9f00      	ldr	r7, [sp, #0]
 8001c9e:	4646      	mov	r6, r8
     * represented exactly as an JNUMBER value (but is less than LDBL_MAX),
     * it may be increased to the nearest higher representable value for the
     * comparison (cf. C99: 6.3.1.4, 2).  It might then equal the JNUMBER
     * value although converting the latter to uintmax_t would overflow.
     */
    if (value >= UINTMAX_MAX) {
 8001ca0:	4b6d      	ldr	r3, [pc, #436]	; (8001e58 <JNtoA+0x318>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	4638      	mov	r0, r7
 8001ca6:	4631      	mov	r1, r6
 8001ca8:	f7fe fecc 	bl	8000a44 <__aeabi_dcmpge>
 8001cac:	2800      	cmp	r0, #0
 8001cae:	f040 81e1 	bne.w	8002074 <JNtoA+0x534>
        return UINTMAX_MAX;
    }

    result = (uintmax_t)value;
 8001cb2:	4638      	mov	r0, r7
 8001cb4:	4631      	mov	r1, r6
 8001cb6:	f7fe ff2f 	bl	8000b18 <__aeabi_d2ulz>
 8001cba:	4689      	mov	r9, r1
 8001cbc:	4605      	mov	r5, r0
 8001cbe:	468a      	mov	sl, r1
    /*
     * At least on NetBSD/sparc64 3.0.2 and 4.99.30, casting long double to
     * an integer type converts e.g. 1.9 to 2 instead of 1 (which violates
     * the standard).  Sigh.
     */
    return (result <= value) ? result : result - 1;
 8001cc0:	f7fe fc04 	bl	80004cc <__aeabi_ul2d>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4638      	mov	r0, r7
 8001cca:	4631      	mov	r1, r6
 8001ccc:	f7fe feba 	bl	8000a44 <__aeabi_dcmpge>
 8001cd0:	b910      	cbnz	r0, 8001cd8 <JNtoA+0x198>
 8001cd2:	3d01      	subs	r5, #1
 8001cd4:	f169 0a00 	sbc.w	sl, r9, #0
    if ((intpart = cast(ufvalue)) == UINTMAX_MAX) {
 8001cd8:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8001cdc:	bf08      	it	eq
 8001cde:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 8001ce2:	f000 81c7 	beq.w	8002074 <JNtoA+0x534>
 8001ce6:	f8dd 9008 	ldr.w	r9, [sp, #8]
    return ((value -= intpart) < 0.5) ? intpart : intpart + 1;
}

static JNUMBER mypow10(int exponent)
{
    JNUMBER result = 1;
 8001cea:	495a      	ldr	r1, [pc, #360]	; (8001e54 <JNtoA+0x314>)
 8001cec:	2000      	movs	r0, #0

    while (exponent > 0) {
 8001cee:	f1b9 0f00 	cmp.w	r9, #0
 8001cf2:	f300 809f 	bgt.w	8001e34 <JNtoA+0x2f4>
        result *= 10;
        exponent--;
    }
    while (exponent < 0) {
 8001cf6:	9b02      	ldr	r3, [sp, #8]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	bfa8      	it	ge
 8001cfc:	1adb      	subge	r3, r3, r3
 8001cfe:	3301      	adds	r3, #1
 8001d00:	d103      	bne.n	8001d0a <JNtoA+0x1ca>
        result /= 10;
 8001d02:	4b53      	ldr	r3, [pc, #332]	; (8001e50 <JNtoA+0x310>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	f7fe fd41 	bl	800078c <__aeabi_ddiv>
    mask = (uintmax_t)mypow10(precision);
 8001d0a:	f7fe ff05 	bl	8000b18 <__aeabi_d2ulz>
 8001d0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
    if ((fracpart = myround(mask * (ufvalue - intpart))) >= mask) {
 8001d12:	4628      	mov	r0, r5
 8001d14:	4651      	mov	r1, sl
 8001d16:	f7fe fbd9 	bl	80004cc <__aeabi_ul2d>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4638      	mov	r0, r7
 8001d20:	4631      	mov	r1, r6
 8001d22:	f7fe fa51 	bl	80001c8 <__aeabi_dsub>
 8001d26:	4606      	mov	r6, r0
 8001d28:	460f      	mov	r7, r1
 8001d2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001d2e:	f7fe fbcd 	bl	80004cc <__aeabi_ul2d>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4630      	mov	r0, r6
 8001d38:	4639      	mov	r1, r7
 8001d3a:	f7fe fbfd 	bl	8000538 <__aeabi_dmul>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if (value >= UINTMAX_MAX) {
 8001d46:	4b44      	ldr	r3, [pc, #272]	; (8001e58 <JNtoA+0x318>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f7fe fe7b 	bl	8000a44 <__aeabi_dcmpge>
 8001d4e:	bba0      	cbnz	r0, 8001dba <JNtoA+0x27a>
    result = (uintmax_t)value;
 8001d50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001d54:	f7fe fee0 	bl	8000b18 <__aeabi_d2ulz>
 8001d58:	460e      	mov	r6, r1
 8001d5a:	4681      	mov	r9, r0
 8001d5c:	460f      	mov	r7, r1
    return (result <= value) ? result : result - 1;
 8001d5e:	f7fe fbb5 	bl	80004cc <__aeabi_ul2d>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001d6a:	f7fe fe6b 	bl	8000a44 <__aeabi_dcmpge>
 8001d6e:	b920      	cbnz	r0, 8001d7a <JNtoA+0x23a>
 8001d70:	f119 30ff 	adds.w	r0, r9, #4294967295	; 0xffffffff
 8001d74:	4681      	mov	r9, r0
 8001d76:	f166 0700 	sbc.w	r7, r6, #0
    if (intpart == UINTMAX_MAX) {
 8001d7a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8001d7e:	bf08      	it	eq
 8001d80:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
 8001d84:	d019      	beq.n	8001dba <JNtoA+0x27a>
    return ((value -= intpart) < 0.5) ? intpart : intpart + 1;
 8001d86:	4648      	mov	r0, r9
 8001d88:	4639      	mov	r1, r7
 8001d8a:	f7fe fb9f 	bl	80004cc <__aeabi_ul2d>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001d96:	f7fe fa17 	bl	80001c8 <__aeabi_dsub>
 8001d9a:	4b30      	ldr	r3, [pc, #192]	; (8001e5c <JNtoA+0x31c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f7fe fe3d 	bl	8000a1c <__aeabi_dcmplt>
 8001da2:	b920      	cbnz	r0, 8001dae <JNtoA+0x26e>
 8001da4:	f119 0001 	adds.w	r0, r9, #1
 8001da8:	4681      	mov	r9, r0
 8001daa:	f147 0700 	adc.w	r7, r7, #0
    if ((fracpart = myround(mask * (ufvalue - intpart))) >= mask) {
 8001dae:	9b06      	ldr	r3, [sp, #24]
 8001db0:	4599      	cmp	r9, r3
 8001db2:	9b07      	ldr	r3, [sp, #28]
 8001db4:	eb77 0303 	sbcs.w	r3, r7, r3
 8001db8:	d352      	bcc.n	8001e60 <JNtoA+0x320>
        if (estyle && intpart == 10) {
 8001dba:	9b01      	ldr	r3, [sp, #4]
        intpart++;
 8001dbc:	3501      	adds	r5, #1
 8001dbe:	f14a 0a00 	adc.w	sl, sl, #0
        if (estyle && intpart == 10) {
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 8114 	beq.w	8001ff0 <JNtoA+0x4b0>
 8001dc8:	f1a5 030a 	sub.w	r3, r5, #10
 8001dcc:	ea53 030a 	orrs.w	r3, r3, sl
 8001dd0:	f040 80e2 	bne.w	8001f98 <JNtoA+0x458>
            exponent++;
 8001dd4:	f04f 0900 	mov.w	r9, #0
 8001dd8:	3401      	adds	r4, #1
 8001dda:	464f      	mov	r7, r9
            intpart = 1;
 8001ddc:	2501      	movs	r5, #1
 8001dde:	46ca      	mov	sl, r9
    if (flags & PRINT_F_TYPE_G && estyle &&
 8001de0:	9b02      	ldr	r3, [sp, #8]
 8001de2:	42a3      	cmp	r3, r4
 8001de4:	f2c0 814e 	blt.w	8002084 <JNtoA+0x544>
            precision + 1 > exponent && exponent >= -4) {
 8001de8:	1d22      	adds	r2, r4, #4
 8001dea:	f2c0 8149 	blt.w	8002080 <JNtoA+0x540>
        precision -= exponent;
 8001dee:	eba3 0904 	sub.w	r9, r3, r4
        estyle = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e746      	b.n	8001c84 <JNtoA+0x144>
        result *= 10;
 8001df6:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <JNtoA+0x310>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f7fe fb9d 	bl	8000538 <__aeabi_dmul>
        exponent--;
 8001dfe:	3d01      	subs	r5, #1
    while (exponent > 0) {
 8001e00:	2d00      	cmp	r5, #0
 8001e02:	dcf8      	bgt.n	8001df6 <JNtoA+0x2b6>
 8001e04:	2c00      	cmp	r4, #0
 8001e06:	bfac      	ite	ge
 8001e08:	1b25      	subge	r5, r4, r4
 8001e0a:	4625      	movlt	r5, r4
    while (exponent < 0) {
 8001e0c:	b965      	cbnz	r5, 8001e28 <JNtoA+0x2e8>
        ufvalue /= mypow10(exponent);
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	9800      	ldr	r0, [sp, #0]
 8001e14:	4641      	mov	r1, r8
 8001e16:	f7fe fcb9 	bl	800078c <__aeabi_ddiv>
 8001e1a:	4607      	mov	r7, r0
 8001e1c:	460e      	mov	r6, r1
 8001e1e:	e73f      	b.n	8001ca0 <JNtoA+0x160>
    JNUMBER result = 1;
 8001e20:	490c      	ldr	r1, [pc, #48]	; (8001e54 <JNtoA+0x314>)
 8001e22:	4625      	mov	r5, r4
 8001e24:	2000      	movs	r0, #0
 8001e26:	e7eb      	b.n	8001e00 <JNtoA+0x2c0>
        result /= 10;
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <JNtoA+0x310>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f7fe fcae 	bl	800078c <__aeabi_ddiv>
        exponent++;
 8001e30:	3501      	adds	r5, #1
 8001e32:	e7eb      	b.n	8001e0c <JNtoA+0x2cc>
        result *= 10;
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <JNtoA+0x310>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	f7fe fb7e 	bl	8000538 <__aeabi_dmul>
        exponent--;
 8001e3c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8001e40:	e755      	b.n	8001cee <JNtoA+0x1ae>
 8001e42:	bf00      	nop
 8001e44:	7fefffff 	.word	0x7fefffff
 8001e48:	0800a88f 	.word	0x0800a88f
 8001e4c:	0800a893 	.word	0x0800a893
 8001e50:	40240000 	.word	0x40240000
 8001e54:	3ff00000 	.word	0x3ff00000
 8001e58:	43f00000 	.word	0x43f00000
 8001e5c:	3fe00000 	.word	0x3fe00000
    if (flags & PRINT_F_TYPE_G && estyle &&
 8001e60:	9b01      	ldr	r3, [sp, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1bc      	bne.n	8001de0 <JNtoA+0x2a0>
    size_t pos = 0;
 8001e66:	ab0a      	add	r3, sp, #40	; 0x28
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	2400      	movs	r4, #0
        buf[pos++] = digits[value % base];
 8001e6c:	4628      	mov	r0, r5
 8001e6e:	4651      	mov	r1, sl
 8001e70:	220a      	movs	r2, #10
 8001e72:	2300      	movs	r3, #0
 8001e74:	f7fe fe38 	bl	8000ae8 <__aeabi_uldivmod>
 8001e78:	4b89      	ldr	r3, [pc, #548]	; (80020a0 <JNtoA+0x560>)
 8001e7a:	5c9b      	ldrb	r3, [r3, r2]
 8001e7c:	9a00      	ldr	r2, [sp, #0]
 8001e7e:	f802 3b01 	strb.w	r3, [r2], #1
        value /= base;
 8001e82:	4628      	mov	r0, r5
        buf[pos++] = digits[value % base];
 8001e84:	9200      	str	r2, [sp, #0]
        value /= base;
 8001e86:	2300      	movs	r3, #0
 8001e88:	4651      	mov	r1, sl
 8001e8a:	220a      	movs	r2, #10
 8001e8c:	f7fe fe2c 	bl	8000ae8 <__aeabi_uldivmod>
 8001e90:	46a8      	mov	r8, r5
 8001e92:	4656      	mov	r6, sl
    } while (value != 0 && pos < size);
 8001e94:	f1b8 0f0a 	cmp.w	r8, #10
 8001e98:	f176 0300 	sbcs.w	r3, r6, #0
        buf[pos++] = digits[value % base];
 8001e9c:	f104 0401 	add.w	r4, r4, #1
        value /= base;
 8001ea0:	4605      	mov	r5, r0
 8001ea2:	468a      	mov	sl, r1
    } while (value != 0 && pos < size);
 8001ea4:	d301      	bcc.n	8001eaa <JNtoA+0x36a>
 8001ea6:	2c2c      	cmp	r4, #44	; 0x2c
 8001ea8:	d1e0      	bne.n	8001e6c <JNtoA+0x32c>
    if (fracpart != 0) {	/* convert() would return 1 if fracpart == 0. */
 8001eaa:	ea59 0307 	orrs.w	r3, r9, r7
    return (int)pos;
 8001eae:	4626      	mov	r6, r4
    if (fracpart != 0) {	/* convert() would return 1 if fracpart == 0. */
 8001eb0:	f000 80a2 	beq.w	8001ff8 <JNtoA+0x4b8>
 8001eb4:	f10d 0854 	add.w	r8, sp, #84	; 0x54
 8001eb8:	f8cd 8000 	str.w	r8, [sp]
    size_t pos = 0;
 8001ebc:	2500      	movs	r5, #0
        buf[pos++] = digits[value % base];
 8001ebe:	4648      	mov	r0, r9
 8001ec0:	4639      	mov	r1, r7
 8001ec2:	220a      	movs	r2, #10
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f7fe fe0f 	bl	8000ae8 <__aeabi_uldivmod>
 8001eca:	4b75      	ldr	r3, [pc, #468]	; (80020a0 <JNtoA+0x560>)
 8001ecc:	9704      	str	r7, [sp, #16]
 8001ece:	5c9b      	ldrb	r3, [r3, r2]
 8001ed0:	9a00      	ldr	r2, [sp, #0]
 8001ed2:	f802 3b01 	strb.w	r3, [r2], #1
        value /= base;
 8001ed6:	4648      	mov	r0, r9
        buf[pos++] = digits[value % base];
 8001ed8:	9200      	str	r2, [sp, #0]
        value /= base;
 8001eda:	2300      	movs	r3, #0
 8001edc:	4639      	mov	r1, r7
 8001ede:	220a      	movs	r2, #10
 8001ee0:	f7fe fe02 	bl	8000ae8 <__aeabi_uldivmod>
 8001ee4:	46ca      	mov	sl, r9
    } while (value != 0 && pos < size);
 8001ee6:	9b04      	ldr	r3, [sp, #16]
 8001ee8:	f1ba 0f0a 	cmp.w	sl, #10
 8001eec:	f173 0300 	sbcs.w	r3, r3, #0
        buf[pos++] = digits[value % base];
 8001ef0:	f105 0501 	add.w	r5, r5, #1
        value /= base;
 8001ef4:	4681      	mov	r9, r0
 8001ef6:	460f      	mov	r7, r1
    } while (value != 0 && pos < size);
 8001ef8:	d301      	bcc.n	8001efe <JNtoA+0x3be>
 8001efa:	2d2c      	cmp	r5, #44	; 0x2c
 8001efc:	d1df      	bne.n	8001ebe <JNtoA+0x37e>
    leadfraczeros = precision - fpos;
 8001efe:	9b02      	ldr	r3, [sp, #8]
    return (int)pos;
 8001f00:	4629      	mov	r1, r5
    leadfraczeros = precision - fpos;
 8001f02:	1b58      	subs	r0, r3, r5
    int omitcount = 0;
 8001f04:	2200      	movs	r2, #0
            while (omitcount < fpos && fconvert[omitcount] == '0') {
 8001f06:	f818 3b01 	ldrb.w	r3, [r8], #1
 8001f0a:	2b30      	cmp	r3, #48	; 0x30
 8001f0c:	d102      	bne.n	8001f14 <JNtoA+0x3d4>
                omitcount++;
 8001f0e:	3201      	adds	r2, #1
            while (omitcount < fpos && fconvert[omitcount] == '0') {
 8001f10:	42aa      	cmp	r2, r5
 8001f12:	dbf8      	blt.n	8001f06 <JNtoA+0x3c6>
        precision -= omitcount;
 8001f14:	9b02      	ldr	r3, [sp, #8]
 8001f16:	eba3 0902 	sub.w	r9, r3, r2
             - epos                      /* Number of exponent characters. */
 8001f1a:	9b01      	ldr	r3, [sp, #4]
             - ipos                      /* Number of integer digits. */
 8001f1c:	43e5      	mvns	r5, r4
             - epos                      /* Number of exponent characters. */
 8001f1e:	1aed      	subs	r5, r5, r3
             - precision                 /* Number of fractional digits. */
 8001f20:	eba5 0509 	sub.w	r5, r5, r9
    padlen = width                  /* Minimum field width. */
 8001f24:	9b03      	ldr	r3, [sp, #12]
             - (emitpoint ? 1 : 0)       /* Will we print a decimal point? */
 8001f26:	f1b9 0f00 	cmp.w	r9, #0
 8001f2a:	bfc8      	it	gt
 8001f2c:	3d01      	subgt	r5, #1
    padlen = width                  /* Minimum field width. */
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	bf18      	it	ne
 8001f32:	3d01      	subne	r5, #1
    } else if (flags & PRINT_F_ZERO && padlen > 0) {
 8001f34:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    padlen = width                  /* Minimum field width. */
 8001f38:	2300      	movs	r3, #0
        OUTCHAR(str, *len, size, ' ');
 8001f3a:	f04f 0c20 	mov.w	ip, #32
    while (padlen > 0) {	/* Leading spaces. */
 8001f3e:	429d      	cmp	r5, r3
 8001f40:	d15e      	bne.n	8002000 <JNtoA+0x4c0>
    if (sign != 0) {	/* Sign. */
 8001f42:	9f03      	ldr	r7, [sp, #12]
        OUTCHAR(str, *len, size, ' ');
 8001f44:	1c6b      	adds	r3, r5, #1
    if (sign != 0) {	/* Sign. */
 8001f46:	2f00      	cmp	r7, #0
 8001f48:	d061      	beq.n	800200e <JNtoA+0x4ce>
        OUTCHAR(str, *len, size, sign);
 8001f4a:	2b2c      	cmp	r3, #44	; 0x2c
 8001f4c:	d001      	beq.n	8001f52 <JNtoA+0x412>
 8001f4e:	f80b 7005 	strb.w	r7, [fp, r5]
 8001f52:	461d      	mov	r5, r3
        OUTCHAR(str, *len, size, iconvert[ipos]);
 8001f54:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8001f58:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8001f5c:	3501      	adds	r5, #1
        ipos--;
 8001f5e:	3e01      	subs	r6, #1
        OUTCHAR(str, *len, size, iconvert[ipos]);
 8001f60:	2d2b      	cmp	r5, #43	; 0x2b
 8001f62:	bf9c      	itt	ls
 8001f64:	f816 e00c 	ldrbls.w	lr, [r6, ip]
 8001f68:	f807 e005 	strbls.w	lr, [r7, r5]
    while (ipos > 0) {	/* Integer part. */
 8001f6c:	2e00      	cmp	r6, #0
 8001f6e:	d1f5      	bne.n	8001f5c <JNtoA+0x41c>
    if (emitpoint) {	/* Decimal point. */
 8001f70:	f1b9 0f00 	cmp.w	r9, #0
        OUTCHAR(str, *len, size, iconvert[ipos]);
 8001f74:	eb03 0504 	add.w	r5, r3, r4
 8001f78:	f104 0401 	add.w	r4, r4, #1
    if (emitpoint) {	/* Decimal point. */
 8001f7c:	dd6a      	ble.n	8002054 <JNtoA+0x514>
        OUTCHAR(str, *len, size, '.');
 8001f7e:	4423      	add	r3, r4
 8001f80:	2b2b      	cmp	r3, #43	; 0x2b
 8001f82:	d802      	bhi.n	8001f8a <JNtoA+0x44a>
 8001f84:	242e      	movs	r4, #46	; 0x2e
 8001f86:	f80b 4005 	strb.w	r4, [fp, r5]
        OUTCHAR(str, *len, size, iconvert[ipos]);
 8001f8a:	461c      	mov	r4, r3
 8001f8c:	18c6      	adds	r6, r0, r3
        OUTCHAR(str, *len, size, '0');
 8001f8e:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8001f92:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8001f96:	e041      	b.n	800201c <JNtoA+0x4dc>
 8001f98:	f04f 0900 	mov.w	r9, #0
 8001f9c:	464f      	mov	r7, r9
 8001f9e:	e71f      	b.n	8001de0 <JNtoA+0x2a0>
            exponent = -exponent;
 8001fa0:	4264      	negs	r4, r4
            esign = '-';
 8001fa2:	262d      	movs	r6, #45	; 0x2d
        epos = convert(exponent, econvert, 2, 10, 0);
 8001fa4:	ea4f 78e4 	mov.w	r8, r4, asr #31
        buf[pos++] = digits[value % base];
 8001fa8:	220a      	movs	r2, #10
 8001faa:	2300      	movs	r3, #0
 8001fac:	4620      	mov	r0, r4
 8001fae:	4641      	mov	r1, r8
 8001fb0:	f7fe fd9a 	bl	8000ae8 <__aeabi_uldivmod>
 8001fb4:	4b3a      	ldr	r3, [pc, #232]	; (80020a0 <JNtoA+0x560>)
 8001fb6:	5c9b      	ldrb	r3, [r3, r2]
 8001fb8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        value /= base;
 8001fbc:	220a      	movs	r2, #10
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	4641      	mov	r1, r8
 8001fc4:	f7fe fd90 	bl	8000ae8 <__aeabi_uldivmod>
    } while (value != 0 && pos < size);
 8001fc8:	2c09      	cmp	r4, #9
 8001fca:	dc0a      	bgt.n	8001fe2 <JNtoA+0x4a2>
            econvert[epos++] = '0';
 8001fcc:	2330      	movs	r3, #48	; 0x30
        buf[pos++] = digits[value % base];
 8001fce:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
        econvert[epos++] = (flags & PRINT_F_UP) ? 'E' : 'e';
 8001fd2:	2365      	movs	r3, #101	; 0x65
 8001fd4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8001fd8:	2304      	movs	r3, #4
        econvert[epos++] = esign;
 8001fda:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        econvert[epos++] = (flags & PRINT_F_UP) ? 'E' : 'e';
 8001fde:	9301      	str	r3, [sp, #4]
 8001fe0:	e741      	b.n	8001e66 <JNtoA+0x326>
        buf[pos++] = digits[value % base];
 8001fe2:	220a      	movs	r2, #10
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f7fe fd7f 	bl	8000ae8 <__aeabi_uldivmod>
 8001fea:	4b2d      	ldr	r3, [pc, #180]	; (80020a0 <JNtoA+0x560>)
 8001fec:	5c9b      	ldrb	r3, [r3, r2]
 8001fee:	e7ee      	b.n	8001fce <JNtoA+0x48e>
        fracpart = 0;
 8001ff0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8001ff4:	464f      	mov	r7, r9
 8001ff6:	e736      	b.n	8001e66 <JNtoA+0x326>
    int fpos = 0;
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	9a02      	ldr	r2, [sp, #8]
            leadfraczeros = 0;
 8001ffc:	4608      	mov	r0, r1
 8001ffe:	e789      	b.n	8001f14 <JNtoA+0x3d4>
        OUTCHAR(str, *len, size, ' ');
 8002000:	1c5f      	adds	r7, r3, #1
 8002002:	2f2b      	cmp	r7, #43	; 0x2b
 8002004:	bf98      	it	ls
 8002006:	f80b c003 	strbls.w	ip, [fp, r3]
            leadfraczeros = 0;
 800200a:	463b      	mov	r3, r7
 800200c:	e797      	b.n	8001f3e <JNtoA+0x3fe>
 800200e:	462b      	mov	r3, r5
 8002010:	e79f      	b.n	8001f52 <JNtoA+0x412>
        OUTCHAR(str, *len, size, '0');
 8002012:	3401      	adds	r4, #1
 8002014:	2c2b      	cmp	r4, #43	; 0x2b
 8002016:	d801      	bhi.n	800201c <JNtoA+0x4dc>
 8002018:	f807 c004 	strb.w	ip, [r7, r4]
    while (leadfraczeros > 0) {	/* Leading fractional part zeros. */
 800201c:	1b35      	subs	r5, r6, r4
 800201e:	2d00      	cmp	r5, #0
 8002020:	dcf7      	bgt.n	8002012 <JNtoA+0x4d2>
 8002022:	2800      	cmp	r0, #0
 8002024:	bfa8      	it	ge
 8002026:	181b      	addge	r3, r3, r0
 8002028:	461c      	mov	r4, r3
 800202a:	4608      	mov	r0, r1
        OUTCHAR(str, *len, size, fconvert[fpos]);
 800202c:	f10b 35ff 	add.w	r5, fp, #4294967295	; 0xffffffff
 8002030:	ae15      	add	r6, sp, #84	; 0x54
    while (fpos > omitcount) {	/* The remaining fractional part. */
 8002032:	4282      	cmp	r2, r0
 8002034:	db10      	blt.n	8002058 <JNtoA+0x518>
 8002036:	1a88      	subs	r0, r1, r2
 8002038:	4291      	cmp	r1, r2
 800203a:	bfb8      	it	lt
 800203c:	2000      	movlt	r0, #0
 800203e:	4403      	add	r3, r0
 8002040:	9a01      	ldr	r2, [sp, #4]
 8002042:	4619      	mov	r1, r3
        OUTCHAR(str, *len, size, econvert[epos]);
 8002044:	f10b 30ff 	add.w	r0, fp, #4294967295	; 0xffffffff
 8002048:	ac09      	add	r4, sp, #36	; 0x24
    while (epos > 0) {	/* Exponent. */
 800204a:	b962      	cbnz	r2, 8002066 <JNtoA+0x526>
 800204c:	9a01      	ldr	r2, [sp, #4]
 800204e:	441a      	add	r2, r3
 8002050:	4613      	mov	r3, r2
    if (overflow) {
 8002052:	e5c4      	b.n	8001bde <JNtoA+0x9e>
        OUTCHAR(str, *len, size, iconvert[ipos]);
 8002054:	462b      	mov	r3, r5
 8002056:	e798      	b.n	8001f8a <JNtoA+0x44a>
        OUTCHAR(str, *len, size, fconvert[fpos]);
 8002058:	3401      	adds	r4, #1
        fpos--;
 800205a:	3801      	subs	r0, #1
        OUTCHAR(str, *len, size, fconvert[fpos]);
 800205c:	2c2b      	cmp	r4, #43	; 0x2b
 800205e:	bf9c      	itt	ls
 8002060:	5d87      	ldrbls	r7, [r0, r6]
 8002062:	552f      	strbls	r7, [r5, r4]
 8002064:	e7e5      	b.n	8002032 <JNtoA+0x4f2>
        OUTCHAR(str, *len, size, econvert[epos]);
 8002066:	3101      	adds	r1, #1
        epos--;
 8002068:	3a01      	subs	r2, #1
        OUTCHAR(str, *len, size, econvert[epos]);
 800206a:	292b      	cmp	r1, #43	; 0x2b
 800206c:	bf9c      	itt	ls
 800206e:	5d15      	ldrbls	r5, [r2, r4]
 8002070:	5445      	strbls	r5, [r0, r1]
 8002072:	e7ea      	b.n	800204a <JNtoA+0x50a>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
 8002074:	490b      	ldr	r1, [pc, #44]	; (80020a4 <JNtoA+0x564>)
 8002076:	4658      	mov	r0, fp
 8002078:	f007 fe70 	bl	8009d5c <strcpy>
 800207c:	2300      	movs	r3, #0
 800207e:	e5ae      	b.n	8001bde <JNtoA+0x9e>
        if (exponent < 0) {
 8002080:	2c00      	cmp	r4, #0
 8002082:	db8d      	blt.n	8001fa0 <JNtoA+0x460>
            esign = '+';
 8002084:	262b      	movs	r6, #43	; 0x2b
 8002086:	e78d      	b.n	8001fa4 <JNtoA+0x464>
    if (isnan(fvalue)) {
 8002088:	9a00      	ldr	r2, [sp, #0]
 800208a:	4643      	mov	r3, r8
 800208c:	4610      	mov	r0, r2
 800208e:	4641      	mov	r1, r8
 8002090:	f7fe fcec 	bl	8000a6c <__aeabi_dcmpun>
 8002094:	2800      	cmp	r0, #0
 8002096:	f47f adac 	bne.w	8001bf2 <JNtoA+0xb2>
    char sign = 0;
 800209a:	9003      	str	r0, [sp, #12]
 800209c:	e56f      	b.n	8001b7e <JNtoA+0x3e>
 800209e:	bf00      	nop
 80020a0:	0800a897 	.word	0x0800a897
 80020a4:	0800a8a8 	.word	0x0800a8a8

080020a8 <NoteSetFnDefault>:
  @param   delayfn  The default delay function to use.
  @param   millisfn  The default 'millis' function to use.
*/
/**************************************************************************/
void NoteSetFnDefault(mallocFn mallocfn, freeFn freefn, delayMsFn delayfn, getMsFn millisfn)
{
 80020a8:	b530      	push	{r4, r5, lr}
    if (hookMalloc == NULL) {
 80020aa:	4c08      	ldr	r4, [pc, #32]	; (80020cc <NoteSetFnDefault+0x24>)
 80020ac:	6825      	ldr	r5, [r4, #0]
 80020ae:	b905      	cbnz	r5, 80020b2 <NoteSetFnDefault+0xa>
        hookMalloc = mallocfn;
 80020b0:	6020      	str	r0, [r4, #0]
    }
    if (hookFree == NULL) {
 80020b2:	4807      	ldr	r0, [pc, #28]	; (80020d0 <NoteSetFnDefault+0x28>)
 80020b4:	6804      	ldr	r4, [r0, #0]
 80020b6:	b904      	cbnz	r4, 80020ba <NoteSetFnDefault+0x12>
        hookFree = freefn;
 80020b8:	6001      	str	r1, [r0, #0]
    }
    if (hookDelayMs == NULL) {
 80020ba:	4906      	ldr	r1, [pc, #24]	; (80020d4 <NoteSetFnDefault+0x2c>)
 80020bc:	6808      	ldr	r0, [r1, #0]
 80020be:	b900      	cbnz	r0, 80020c2 <NoteSetFnDefault+0x1a>
        hookDelayMs = delayfn;
 80020c0:	600a      	str	r2, [r1, #0]
    }
    if (hookGetMs == NULL) {
 80020c2:	4a05      	ldr	r2, [pc, #20]	; (80020d8 <NoteSetFnDefault+0x30>)
 80020c4:	6811      	ldr	r1, [r2, #0]
 80020c6:	b901      	cbnz	r1, 80020ca <NoteSetFnDefault+0x22>
        hookGetMs = millisfn;
 80020c8:	6013      	str	r3, [r2, #0]
    }
}
 80020ca:	bd30      	pop	{r4, r5, pc}
 80020cc:	200005a0 	.word	0x200005a0
 80020d0:	20000584 	.word	0x20000584
 80020d4:	20000580 	.word	0x20000580
 80020d8:	20000588 	.word	0x20000588

080020dc <NoteSetFnDebugOutput>:
  @param   fn  A function pointer to call for debug output.
*/
/**************************************************************************/
void NoteSetFnDebugOutput(debugOutputFn fn)
{
    hookDebugOutput = fn;
 80020dc:	4b01      	ldr	r3, [pc, #4]	; (80020e4 <NoteSetFnDebugOutput+0x8>)
 80020de:	6018      	str	r0, [r3, #0]
}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	2000057c 	.word	0x2000057c

080020e8 <NoteSetFnI2C>:
  @param   transmitfn  The platform-specific I2C transmit function to use.
  @param   receivefn  The platform-specific I2C receive function to use.
*/
/**************************************************************************/
void NoteSetFnI2C(uint32_t i2caddress, uint32_t i2cmax, i2cResetFn resetfn, i2cTransmitFn transmitfn, i2cReceiveFn receivefn)
{
 80020e8:	b510      	push	{r4, lr}
    i2cAddress = i2caddress;
 80020ea:	4c0a      	ldr	r4, [pc, #40]	; (8002114 <NoteSetFnI2C+0x2c>)
 80020ec:	6020      	str	r0, [r4, #0]
    i2cMax = i2cmax;
 80020ee:	480a      	ldr	r0, [pc, #40]	; (8002118 <NoteSetFnI2C+0x30>)
 80020f0:	6001      	str	r1, [r0, #0]

    hookActiveInterface = interfaceI2C;
 80020f2:	490a      	ldr	r1, [pc, #40]	; (800211c <NoteSetFnI2C+0x34>)
 80020f4:	2002      	movs	r0, #2
 80020f6:	6008      	str	r0, [r1, #0]

    hookI2CReset = resetfn;
 80020f8:	4909      	ldr	r1, [pc, #36]	; (8002120 <NoteSetFnI2C+0x38>)
 80020fa:	600a      	str	r2, [r1, #0]
    hookI2CTransmit = transmitfn;
 80020fc:	4a09      	ldr	r2, [pc, #36]	; (8002124 <NoteSetFnI2C+0x3c>)
 80020fe:	6013      	str	r3, [r2, #0]
    hookI2CReceive = receivefn;
 8002100:	4b09      	ldr	r3, [pc, #36]	; (8002128 <NoteSetFnI2C+0x40>)
 8002102:	9a02      	ldr	r2, [sp, #8]
 8002104:	601a      	str	r2, [r3, #0]

    notecardReset = i2cNoteReset;
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <NoteSetFnI2C+0x44>)
 8002108:	4a09      	ldr	r2, [pc, #36]	; (8002130 <NoteSetFnI2C+0x48>)
 800210a:	601a      	str	r2, [r3, #0]
    notecardTransaction = i2cNoteTransaction;
 800210c:	4b09      	ldr	r3, [pc, #36]	; (8002134 <NoteSetFnI2C+0x4c>)
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <NoteSetFnI2C+0x50>)
 8002110:	601a      	str	r2, [r3, #0]
}
 8002112:	bd10      	pop	{r4, pc}
 8002114:	200005ac 	.word	0x200005ac
 8002118:	200005b0 	.word	0x200005b0
 800211c:	20000578 	.word	0x20000578
 8002120:	20000590 	.word	0x20000590
 8002124:	20000594 	.word	0x20000594
 8002128:	2000058c 	.word	0x2000058c
 800212c:	200005b4 	.word	0x200005b4
 8002130:	080024a1 	.word	0x080024a1
 8002134:	200005b8 	.word	0x200005b8
 8002138:	080022cd 	.word	0x080022cd

0800213c <NoteDebug>:
*/
/**************************************************************************/
void NoteDebug(const char *line)
{
#ifndef NOTE_NODEBUG
    if (hookDebugOutput != NULL) {
 800213c:	4b02      	ldr	r3, [pc, #8]	; (8002148 <NoteDebug+0xc>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	b103      	cbz	r3, 8002144 <NoteDebug+0x8>
        hookDebugOutput(line);
 8002142:	4718      	bx	r3
    }
#endif
}
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	2000057c 	.word	0x2000057c

0800214c <NoteDebugln>:
{
 800214c:	b508      	push	{r3, lr}
    NoteDebug(line);
 800214e:	f7ff fff5 	bl	800213c <NoteDebug>
    NoteDebug(c_newline);
 8002152:	4b03      	ldr	r3, [pc, #12]	; (8002160 <NoteDebugln+0x14>)
 8002154:	6818      	ldr	r0, [r3, #0]
}
 8002156:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    NoteDebug(c_newline);
 800215a:	f7ff bfef 	b.w	800213c <NoteDebug>
 800215e:	bf00      	nop
 8002160:	20000008 	.word	0x20000008

08002164 <NoteGetMs>:
  @returns  The current milliseconds value.
*/
/**************************************************************************/
long unsigned int NoteGetMs()
{
    if (hookGetMs == NULL) {
 8002164:	4b02      	ldr	r3, [pc, #8]	; (8002170 <NoteGetMs+0xc>)
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	b100      	cbz	r0, 800216c <NoteGetMs+0x8>
        return 0;
    }
    return hookGetMs();
 800216a:	4700      	bx	r0
}
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20000588 	.word	0x20000588

08002174 <NoteDelayMs>:
  @param   ms the milliseconds delay value.
*/
/**************************************************************************/
void NoteDelayMs(uint32_t ms)
{
    if (hookDelayMs != NULL) {
 8002174:	4b02      	ldr	r3, [pc, #8]	; (8002180 <NoteDelayMs+0xc>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	b103      	cbz	r3, 800217c <NoteDelayMs+0x8>
        hookDelayMs(ms);
 800217a:	4718      	bx	r3
    }
}
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	20000580 	.word	0x20000580

08002184 <NoteMalloc>:
  @param   size the number of bytes to allocate.
*/
/**************************************************************************/
void *NoteMalloc(size_t size)
{
    if (hookMalloc == NULL) {
 8002184:	4b02      	ldr	r3, [pc, #8]	; (8002190 <NoteMalloc+0xc>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	b103      	cbz	r3, 800218c <NoteMalloc+0x8>
        return NULL;
    }
#if NOTE_SHOW_MALLOC
    return malloc_show(size);
#else
    return hookMalloc(size);
 800218a:	4718      	bx	r3
#endif
}
 800218c:	4618      	mov	r0, r3
 800218e:	4770      	bx	lr
 8002190:	200005a0 	.word	0x200005a0

08002194 <NoteFree>:
  @param   p A pointer to the memory address to free.
*/
/**************************************************************************/
void NoteFree(void *p)
{
    if (hookFree != NULL) {
 8002194:	4b02      	ldr	r3, [pc, #8]	; (80021a0 <NoteFree+0xc>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	b103      	cbz	r3, 800219c <NoteFree+0x8>
        char str[16];
        htoa32((uint32_t)p, str);
        hookDebugOutput("free");
        hookDebugOutput(str);
#endif
        hookFree(p);
 800219a:	4718      	bx	r3
    }
}
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	20000584 	.word	0x20000584

080021a4 <NoteLockI2C>:
  @brief  Lock the I2C bus using the platform-specific hook.
*/
/**************************************************************************/
void NoteLockI2C()
{
    if (hookLockI2C != NULL) {
 80021a4:	4b02      	ldr	r3, [pc, #8]	; (80021b0 <NoteLockI2C+0xc>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	b103      	cbz	r3, 80021ac <NoteLockI2C+0x8>
        hookLockI2C();
 80021aa:	4718      	bx	r3
    }
}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000598 	.word	0x20000598

080021b4 <NoteUnlockI2C>:
  @brief  Unlock the I2C bus using the platform-specific hook.
*/
/**************************************************************************/
void NoteUnlockI2C()
{
    if (hookUnlockI2C != NULL) {
 80021b4:	4b02      	ldr	r3, [pc, #8]	; (80021c0 <NoteUnlockI2C+0xc>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	b103      	cbz	r3, 80021bc <NoteUnlockI2C+0x8>
        hookUnlockI2C();
 80021ba:	4718      	bx	r3
    }
}
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	200005a4 	.word	0x200005a4

080021c4 <NoteLockNote>:
  @brief  Lock the Notecard using the platform-specific hook.
*/
/**************************************************************************/
void NoteLockNote()
{
    if (hookLockNote != NULL) {
 80021c4:	4b02      	ldr	r3, [pc, #8]	; (80021d0 <NoteLockNote+0xc>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	b103      	cbz	r3, 80021cc <NoteLockNote+0x8>
        hookLockNote();
 80021ca:	4718      	bx	r3
    }
}
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	2000059c 	.word	0x2000059c

080021d4 <NoteUnlockNote>:
  @brief  Unlock the Notecard using the platform-specific hook.
*/
/**************************************************************************/
void NoteUnlockNote()
{
    if (hookUnlockNote != NULL) {
 80021d4:	4b02      	ldr	r3, [pc, #8]	; (80021e0 <NoteUnlockNote+0xc>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	b103      	cbz	r3, 80021dc <NoteUnlockNote+0x8>
        hookUnlockNote();
 80021da:	4718      	bx	r3
    }
}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	200005a8 	.word	0x200005a8

080021e4 <NoteActiveInterface>:
  @returns A string
*/
/**************************************************************************/
const char *NoteActiveInterface()
{
    switch (hookActiveInterface) {
 80021e4:	4b05      	ldr	r3, [pc, #20]	; (80021fc <NoteActiveInterface+0x18>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d005      	beq.n	80021f8 <NoteActiveInterface+0x14>
 80021ec:	4a04      	ldr	r2, [pc, #16]	; (8002200 <NoteActiveInterface+0x1c>)
 80021ee:	4805      	ldr	r0, [pc, #20]	; (8002204 <NoteActiveInterface+0x20>)
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	bf08      	it	eq
 80021f4:	4610      	moveq	r0, r2
 80021f6:	4770      	bx	lr
    case interfaceSerial:
        return "serial";
 80021f8:	4803      	ldr	r0, [pc, #12]	; (8002208 <NoteActiveInterface+0x24>)
    case interfaceI2C:
        return "i2c";
    }
    return "unknown";
}
 80021fa:	4770      	bx	lr
 80021fc:	20000578 	.word	0x20000578
 8002200:	0800a8b9 	.word	0x0800a8b9
 8002204:	0800a8aa 	.word	0x0800a8aa
 8002208:	0800a8b2 	.word	0x0800a8b2

0800220c <NoteI2CReset>:
  @returns A boolean indicating whether the I2C bus was reset.
*/
/**************************************************************************/
bool NoteI2CReset(uint16_t DevAddress)
{
    if (hookActiveInterface == interfaceI2C && hookI2CReset != NULL) {
 800220c:	4b04      	ldr	r3, [pc, #16]	; (8002220 <NoteI2CReset+0x14>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b02      	cmp	r3, #2
 8002212:	d103      	bne.n	800221c <NoteI2CReset+0x10>
 8002214:	4b03      	ldr	r3, [pc, #12]	; (8002224 <NoteI2CReset+0x18>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	b103      	cbz	r3, 800221c <NoteI2CReset+0x10>
        return hookI2CReset(DevAddress);
 800221a:	4718      	bx	r3
    }
    return false;
}
 800221c:	2000      	movs	r0, #0
 800221e:	4770      	bx	lr
 8002220:	20000578 	.word	0x20000578
 8002224:	20000590 	.word	0x20000590

08002228 <NoteI2CTransmit>:
  if the bus is not active.
*/
/**************************************************************************/
const char *NoteI2CTransmit(uint16_t DevAddress, uint8_t* pBuffer, uint16_t Size)
{
    if (hookActiveInterface == interfaceI2C && hookI2CTransmit != NULL) {
 8002228:	4b04      	ldr	r3, [pc, #16]	; (800223c <NoteI2CTransmit+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b02      	cmp	r3, #2
 800222e:	d103      	bne.n	8002238 <NoteI2CTransmit+0x10>
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <NoteI2CTransmit+0x18>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	b103      	cbz	r3, 8002238 <NoteI2CTransmit+0x10>
        return hookI2CTransmit(DevAddress, pBuffer, Size);
 8002236:	4718      	bx	r3
    }
    return "i2c not active";
 8002238:	4802      	ldr	r0, [pc, #8]	; (8002244 <NoteI2CTransmit+0x1c>)
}
 800223a:	4770      	bx	lr
 800223c:	20000578 	.word	0x20000578
 8002240:	20000594 	.word	0x20000594
 8002244:	0800a8bd 	.word	0x0800a8bd

08002248 <NoteI2CReceive>:
  @returns A c-string from the platform-specific hook, or an error string
  if the bus is not active.
*/
/**************************************************************************/
const char *NoteI2CReceive(uint16_t DevAddress, uint8_t* pBuffer, uint16_t Size, uint32_t *available)
{
 8002248:	b410      	push	{r4}
    if (hookActiveInterface == interfaceI2C && hookI2CReceive != NULL) {
 800224a:	4c06      	ldr	r4, [pc, #24]	; (8002264 <NoteI2CReceive+0x1c>)
 800224c:	6824      	ldr	r4, [r4, #0]
 800224e:	2c02      	cmp	r4, #2
 8002250:	d105      	bne.n	800225e <NoteI2CReceive+0x16>
 8002252:	4c05      	ldr	r4, [pc, #20]	; (8002268 <NoteI2CReceive+0x20>)
 8002254:	6824      	ldr	r4, [r4, #0]
 8002256:	b114      	cbz	r4, 800225e <NoteI2CReceive+0x16>
        return hookI2CReceive(DevAddress, pBuffer, Size, available);
 8002258:	46a4      	mov	ip, r4
    }
    return "i2c not active";
}
 800225a:	bc10      	pop	{r4}
        return hookI2CReceive(DevAddress, pBuffer, Size, available);
 800225c:	4760      	bx	ip
    return "i2c not active";
 800225e:	4803      	ldr	r0, [pc, #12]	; (800226c <NoteI2CReceive+0x24>)
}
 8002260:	bc10      	pop	{r4}
 8002262:	4770      	bx	lr
 8002264:	20000578 	.word	0x20000578
 8002268:	2000058c 	.word	0x2000058c
 800226c:	0800a8bd 	.word	0x0800a8bd

08002270 <NoteI2CAddress>:
  @returns The current I2C address.
*/
/**************************************************************************/
uint32_t NoteI2CAddress()
{
    if (i2cAddress == 0) {
 8002270:	4b02      	ldr	r3, [pc, #8]	; (800227c <NoteI2CAddress+0xc>)
 8002272:	6818      	ldr	r0, [r3, #0]
        return NOTE_I2C_ADDR_DEFAULT;
 8002274:	2800      	cmp	r0, #0
    }
    return i2cAddress;
}
 8002276:	bf08      	it	eq
 8002278:	2017      	moveq	r0, #23
 800227a:	4770      	bx	lr
 800227c:	200005ac 	.word	0x200005ac

08002280 <NoteI2CMax>:
/**************************************************************************/
uint32_t NoteI2CMax()
{
    // Many Arduino libraries (such as ESP32) have a limit less than 32, so if the max isn't specified
    // we must assume the worst and segment the I2C messages into very tiny chunks.
    if (i2cMax == 0) {
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <NoteI2CMax+0x18>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	b12a      	cbz	r2, 8002292 <NoteI2CMax+0x12>
        return NOTE_I2C_MAX_DEFAULT;
    }
    // Note design specs
    if (i2cMax > NOTE_I2C_MAX_MAX) {
 8002286:	2a7f      	cmp	r2, #127	; 0x7f
        i2cMax = NOTE_I2C_MAX_MAX;
 8002288:	bf84      	itt	hi
 800228a:	227f      	movhi	r2, #127	; 0x7f
 800228c:	601a      	strhi	r2, [r3, #0]
    }
    return i2cMax;
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	4770      	bx	lr
        return NOTE_I2C_MAX_DEFAULT;
 8002292:	201e      	movs	r0, #30
}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	200005b0 	.word	0x200005b0

0800229c <NoteHardReset>:
  @returns A boolean indicating whether the Notecard has been reset.
*/
/**************************************************************************/
bool NoteHardReset()
{
    if (notecardReset == NULL) {
 800229c:	4b02      	ldr	r3, [pc, #8]	; (80022a8 <NoteHardReset+0xc>)
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	b100      	cbz	r0, 80022a4 <NoteHardReset+0x8>
        return false;
    }
    return notecardReset();
 80022a2:	4700      	bx	r0
}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	200005b4 	.word	0x200005b4

080022ac <NoteJSONTransaction>:
  or the hook has not been set.
*/
/**************************************************************************/
const char *NoteJSONTransaction(char *json, char **jsonResponse)
{
    if (notecardTransaction == NULL || hookActiveInterface == interfaceNone) {
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <NoteJSONTransaction+0x14>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	b11b      	cbz	r3, 80022ba <NoteJSONTransaction+0xe>
 80022b2:	4a04      	ldr	r2, [pc, #16]	; (80022c4 <NoteJSONTransaction+0x18>)
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	b102      	cbz	r2, 80022ba <NoteJSONTransaction+0xe>
        return "i2c or serial interface must be selected";
    }
    return notecardTransaction(json, jsonResponse);
 80022b8:	4718      	bx	r3
        return "i2c or serial interface must be selected";
 80022ba:	4803      	ldr	r0, [pc, #12]	; (80022c8 <NoteJSONTransaction+0x1c>)
}
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	200005b8 	.word	0x200005b8
 80022c4:	20000578 	.word	0x20000578
 80022c8:	0800a8cc 	.word	0x0800a8cc

080022cc <i2cNoteTransaction>:
  response from the Notercard.
  @returns a c-string with an error, or `NULL` if no error ocurred.
*/
/**************************************************************************/
const char *i2cNoteTransaction(char *json, char **jsonResponse)
{
 80022cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022d0:	b085      	sub	sp, #20
 80022d2:	460e      	mov	r6, r1
 80022d4:	4680      	mov	r8, r0

    // Append '\n' to the transaction
    int jsonLen = strlen(json)+1;
 80022d6:	f7fe fdbc 	bl	8000e52 <strlen>
 80022da:	1c47      	adds	r7, r0, #1
 80022dc:	4605      	mov	r5, r0
    uint8_t *transmitBuf = (uint8_t *) _Malloc(jsonLen);
 80022de:	4638      	mov	r0, r7
 80022e0:	f7ff ff50 	bl	8002184 <NoteMalloc>
    if (transmitBuf == NULL) {
 80022e4:	4604      	mov	r4, r0
 80022e6:	b1b8      	cbz	r0, 8002318 <i2cNoteTransaction+0x4c>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 80022e8:	462a      	mov	r2, r5
 80022ea:	4641      	mov	r1, r8
 80022ec:	f007 fd20 	bl	8009d30 <memcpy>
        return ERRSTR("insufficient memory",c_mem);
    }
    memcpy(transmitBuf, json, jsonLen-1);
    transmitBuf[jsonLen-1] = '\n';
 80022f0:	230a      	movs	r3, #10
 80022f2:	5563      	strb	r3, [r4, r5]

    // Transmit the request in chunks, but also in segments so as not to overwhelm the notecard's interrupt buffers
    const char *estr;
    uint8_t *chunk = transmitBuf;
    uint32_t sentInSegment = 0;
    while (jsonLen > 0) {
 80022f4:	46a2      	mov	sl, r4
    uint32_t sentInSegment = 0;
 80022f6:	f04f 0900 	mov.w	r9, #0
    while (jsonLen > 0) {
 80022fa:	2f00      	cmp	r7, #0
 80022fc:	dc0e      	bgt.n	800231c <i2cNoteTransaction+0x50>
        }
        _DelayMs(CARD_REQUEST_I2C_CHUNK_DELAY_MS);
    }

    // Free the transmit buffer
    _Free(transmitBuf);
 80022fe:	4620      	mov	r0, r4
 8002300:	f7ff ff48 	bl	8002194 <NoteFree>

    // If no reply expected, we're done
    if (jsonResponse == NULL) {
 8002304:	b39e      	cbz	r6, 800236e <i2cNoteTransaction+0xa2>
    // Dynamically grow the buffer as we read.  Note that we always put the +1 in the alloc
    // so we can be assured that it can be null-terminated, which must be the case because
    // our json parser requires a null-terminated string.
    int growlen = ALLOC_CHUNK;
    int jsonbufAllocLen = growlen;
    char *jsonbuf = (char *) _Malloc(jsonbufAllocLen+1);
 8002306:	2081      	movs	r0, #129	; 0x81
 8002308:	f7ff ff3c 	bl	8002184 <NoteMalloc>
    if (jsonbuf == NULL) {
 800230c:	4605      	mov	r5, r0
 800230e:	2800      	cmp	r0, #0
 8002310:	d144      	bne.n	800239c <i2cNoteTransaction+0xd0>
#ifdef ERRDBG
        _Debug("transaction: jsonbuf malloc failed\n");
 8002312:	485b      	ldr	r0, [pc, #364]	; (8002480 <i2cNoteTransaction+0x1b4>)
 8002314:	f7ff ff12 	bl	800213c <NoteDebug>
        return ERRSTR("insufficient memory",c_mem);
 8002318:	4e5a      	ldr	r6, [pc, #360]	; (8002484 <i2cNoteTransaction+0x1b8>)
 800231a:	e028      	b.n	800236e <i2cNoteTransaction+0xa2>
        int chunklen = (uint8_t) (jsonLen > (int)_I2CMax() ? (int)_I2CMax() : jsonLen);
 800231c:	f7ff ffb0 	bl	8002280 <NoteI2CMax>
 8002320:	42b8      	cmp	r0, r7
 8002322:	da28      	bge.n	8002376 <i2cNoteTransaction+0xaa>
 8002324:	f7ff ffac 	bl	8002280 <NoteI2CMax>
 8002328:	b2c5      	uxtb	r5, r0
        _LockI2C();
 800232a:	f7ff ff3b 	bl	80021a4 <NoteLockI2C>
    _DelayMs(6);
 800232e:	2006      	movs	r0, #6
 8002330:	f7ff ff20 	bl	8002174 <NoteDelayMs>
        estr = _I2CTransmit(_I2CAddress(), chunk, chunklen);
 8002334:	f7ff ff9c 	bl	8002270 <NoteI2CAddress>
 8002338:	462a      	mov	r2, r5
 800233a:	4651      	mov	r1, sl
 800233c:	b280      	uxth	r0, r0
 800233e:	f7ff ff73 	bl	8002228 <NoteI2CTransmit>
        if (estr != NULL) {
 8002342:	4680      	mov	r8, r0
 8002344:	b1c8      	cbz	r0, 800237a <i2cNoteTransaction+0xae>
            _Free(transmitBuf);
 8002346:	4620      	mov	r0, r4
 8002348:	f7ff ff24 	bl	8002194 <NoteFree>
            _I2CReset(_I2CAddress());
 800234c:	f7ff ff90 	bl	8002270 <NoteI2CAddress>
 8002350:	b280      	uxth	r0, r0
 8002352:	f7ff ff5b 	bl	800220c <NoteI2CReset>
            _UnlockI2C();
 8002356:	f7ff ff2d 	bl	80021b4 <NoteUnlockI2C>
            _Debug("i2c transmit: ");
 800235a:	484b      	ldr	r0, [pc, #300]	; (8002488 <i2cNoteTransaction+0x1bc>)
 800235c:	f7ff feee 	bl	800213c <NoteDebug>
            _Debug(estr);
 8002360:	4640      	mov	r0, r8
 8002362:	f7ff feeb 	bl	800213c <NoteDebug>
            _Debug("\n");
 8002366:	4849      	ldr	r0, [pc, #292]	; (800248c <i2cNoteTransaction+0x1c0>)
 8002368:	f7ff fee8 	bl	800213c <NoteDebug>
        estr = _I2CTransmit(_I2CAddress(), chunk, chunklen);
 800236c:	4646      	mov	r6, r8
    jsonbuf[jsonbufLen] = '\0';

    // Return it
    *jsonResponse = jsonbuf;
    return NULL;
}
 800236e:	4630      	mov	r0, r6
 8002370:	b005      	add	sp, #20
 8002372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002376:	b2fd      	uxtb	r5, r7
 8002378:	e7d7      	b.n	800232a <i2cNoteTransaction+0x5e>
        sentInSegment += chunklen;
 800237a:	44a9      	add	r9, r5
        _UnlockI2C();
 800237c:	f7ff ff1a 	bl	80021b4 <NoteUnlockI2C>
        if (sentInSegment > CARD_REQUEST_I2C_SEGMENT_MAX_LEN) {
 8002380:	f1b9 0ffa 	cmp.w	r9, #250	; 0xfa
        chunk += chunklen;
 8002384:	44aa      	add	sl, r5
        jsonLen -= chunklen;
 8002386:	eba7 0705 	sub.w	r7, r7, r5
        if (sentInSegment > CARD_REQUEST_I2C_SEGMENT_MAX_LEN) {
 800238a:	d903      	bls.n	8002394 <i2cNoteTransaction+0xc8>
            _DelayMs(CARD_REQUEST_I2C_SEGMENT_DELAY_MS);
 800238c:	20fa      	movs	r0, #250	; 0xfa
 800238e:	f7ff fef1 	bl	8002174 <NoteDelayMs>
            sentInSegment = 0;
 8002392:	46c1      	mov	r9, r8
        _DelayMs(CARD_REQUEST_I2C_CHUNK_DELAY_MS);
 8002394:	2014      	movs	r0, #20
 8002396:	f7ff feed 	bl	8002174 <NoteDelayMs>
 800239a:	e7ae      	b.n	80022fa <i2cNoteTransaction+0x2e>
    uint32_t startMs = _GetMs();
 800239c:	f7ff fee2 	bl	8002164 <NoteGetMs>
    int chunklen = 0;
 80023a0:	2400      	movs	r4, #0
        if (_GetMs() >= startMs + (NOTECARD_TRANSACTION_TIMEOUT_SEC*1000)) {
 80023a2:	f500 591c 	add.w	r9, r0, #9984	; 0x2700
    int jsonbufLen = 0;
 80023a6:	46a3      	mov	fp, r4
    bool receivedNewline = false;
 80023a8:	46a2      	mov	sl, r4
    int jsonbufAllocLen = growlen;
 80023aa:	2780      	movs	r7, #128	; 0x80
        if (_GetMs() >= startMs + (NOTECARD_TRANSACTION_TIMEOUT_SEC*1000)) {
 80023ac:	f109 0910 	add.w	r9, r9, #16
        if (jsonbufLen + chunklen > jsonbufAllocLen) {
 80023b0:	eb0b 0804 	add.w	r8, fp, r4
 80023b4:	45b8      	cmp	r8, r7
 80023b6:	dd1a      	ble.n	80023ee <i2cNoteTransaction+0x122>
            if (chunklen > growlen) {
 80023b8:	2c80      	cmp	r4, #128	; 0x80
                jsonbufAllocLen += chunklen;
 80023ba:	bfcc      	ite	gt
 80023bc:	193f      	addgt	r7, r7, r4
                jsonbufAllocLen += growlen;
 80023be:	3780      	addle	r7, #128	; 0x80
            char *jsonbufNew = (char *) _Malloc(jsonbufAllocLen+1);
 80023c0:	1c78      	adds	r0, r7, #1
 80023c2:	f7ff fedf 	bl	8002184 <NoteMalloc>
            if (jsonbufNew == NULL) {
 80023c6:	b940      	cbnz	r0, 80023da <i2cNoteTransaction+0x10e>
                _Debug("transaction: jsonbuf grow malloc failed\n");
 80023c8:	4831      	ldr	r0, [pc, #196]	; (8002490 <i2cNoteTransaction+0x1c4>)
                return ERRSTR("insufficient memory",c_mem);
 80023ca:	4c2e      	ldr	r4, [pc, #184]	; (8002484 <i2cNoteTransaction+0x1b8>)
                _Debug("transaction: jsonbuf grow malloc failed\n");
 80023cc:	f7ff feb6 	bl	800213c <NoteDebug>
                _Free(jsonbuf);
 80023d0:	4628      	mov	r0, r5
 80023d2:	f7ff fedf 	bl	8002194 <NoteFree>
                return ERRSTR("insufficient memory",c_mem);
 80023d6:	4626      	mov	r6, r4
 80023d8:	e7c9      	b.n	800236e <i2cNoteTransaction+0xa2>
 80023da:	4629      	mov	r1, r5
 80023dc:	465a      	mov	r2, fp
 80023de:	9001      	str	r0, [sp, #4]
 80023e0:	f007 fca6 	bl	8009d30 <memcpy>
            _Free(jsonbuf);
 80023e4:	4628      	mov	r0, r5
 80023e6:	f7ff fed5 	bl	8002194 <NoteFree>
 80023ea:	9b01      	ldr	r3, [sp, #4]
 80023ec:	461d      	mov	r5, r3
        _LockI2C();
 80023ee:	f7ff fed9 	bl	80021a4 <NoteLockI2C>
    _DelayMs(6);
 80023f2:	2006      	movs	r0, #6
 80023f4:	f7ff febe 	bl	8002174 <NoteDelayMs>
        const char *err = _I2CReceive(_I2CAddress(), (uint8_t *) &jsonbuf[jsonbufLen], chunklen, &available);
 80023f8:	f7ff ff3a 	bl	8002270 <NoteI2CAddress>
 80023fc:	b2a2      	uxth	r2, r4
 80023fe:	ab03      	add	r3, sp, #12
 8002400:	eb05 010b 	add.w	r1, r5, fp
 8002404:	b280      	uxth	r0, r0
 8002406:	f7ff ff1f 	bl	8002248 <NoteI2CReceive>
 800240a:	4604      	mov	r4, r0
        _UnlockI2C();
 800240c:	f7ff fed2 	bl	80021b4 <NoteUnlockI2C>
        if (err != NULL) {
 8002410:	b134      	cbz	r4, 8002420 <i2cNoteTransaction+0x154>
            _Free(jsonbuf);
 8002412:	4628      	mov	r0, r5
 8002414:	f7ff febe 	bl	8002194 <NoteFree>
            _Debug("i2c receive error\n");
 8002418:	481e      	ldr	r0, [pc, #120]	; (8002494 <i2cNoteTransaction+0x1c8>)
 800241a:	f7ff fe8f 	bl	800213c <NoteDebug>
            return err;
 800241e:	e7da      	b.n	80023d6 <i2cNoteTransaction+0x10a>
        if (jsonbufLen > 0 && jsonbuf[jsonbufLen-1] == '\n') {
 8002420:	f1b8 0f00 	cmp.w	r8, #0
 8002424:	dd07      	ble.n	8002436 <i2cNoteTransaction+0x16a>
 8002426:	eb05 0308 	add.w	r3, r5, r8
 800242a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
            receivedNewline = true;
 800242e:	2b0a      	cmp	r3, #10
 8002430:	bf08      	it	eq
 8002432:	f04f 0a01 	moveq.w	sl, #1
        chunklen = (int) (available > _I2CMax() ? _I2CMax() : available);
 8002436:	f7ff ff23 	bl	8002280 <NoteI2CMax>
 800243a:	9c03      	ldr	r4, [sp, #12]
 800243c:	42a0      	cmp	r0, r4
 800243e:	d202      	bcs.n	8002446 <i2cNoteTransaction+0x17a>
 8002440:	f7ff ff1e 	bl	8002280 <NoteI2CMax>
 8002444:	4604      	mov	r4, r0
        if (chunklen > 0) {
 8002446:	2c00      	cmp	r4, #0
 8002448:	dc11      	bgt.n	800246e <i2cNoteTransaction+0x1a2>
        if (receivedNewline) {
 800244a:	f1ba 0f00 	cmp.w	sl, #0
 800244e:	d110      	bne.n	8002472 <i2cNoteTransaction+0x1a6>
        if (_GetMs() >= startMs + (NOTECARD_TRANSACTION_TIMEOUT_SEC*1000)) {
 8002450:	f7ff fe88 	bl	8002164 <NoteGetMs>
 8002454:	4548      	cmp	r0, r9
 8002456:	d307      	bcc.n	8002468 <i2cNoteTransaction+0x19c>
            _Free(jsonbuf);
 8002458:	4628      	mov	r0, r5
 800245a:	f7ff fe9b 	bl	8002194 <NoteFree>
            _Debug("reply to request didn't arrive from module in time\n");
 800245e:	480e      	ldr	r0, [pc, #56]	; (8002498 <i2cNoteTransaction+0x1cc>)
            return ERRSTR("request or response was lost {io}",c_iotimeout);
 8002460:	4c0e      	ldr	r4, [pc, #56]	; (800249c <i2cNoteTransaction+0x1d0>)
            _Debug("reply to request didn't arrive from module in time\n");
 8002462:	f7ff fe6b 	bl	800213c <NoteDebug>
            return ERRSTR("request or response was lost {io}",c_iotimeout);
 8002466:	e7b6      	b.n	80023d6 <i2cNoteTransaction+0x10a>
        _DelayMs(50);
 8002468:	2032      	movs	r0, #50	; 0x32
 800246a:	f7ff fe83 	bl	8002174 <NoteDelayMs>
        if (jsonbufLen + chunklen > jsonbufAllocLen) {
 800246e:	46c3      	mov	fp, r8
 8002470:	e79e      	b.n	80023b0 <i2cNoteTransaction+0xe4>
    jsonbuf[jsonbufLen] = '\0';
 8002472:	2300      	movs	r3, #0
 8002474:	f805 3008 	strb.w	r3, [r5, r8]
    *jsonResponse = jsonbuf;
 8002478:	6035      	str	r5, [r6, #0]
    return NULL;
 800247a:	461e      	mov	r6, r3
 800247c:	e777      	b.n	800236e <i2cNoteTransaction+0xa2>
 800247e:	bf00      	nop
 8002480:	0800a93a 	.word	0x0800a93a
 8002484:	0800a8f5 	.word	0x0800a8f5
 8002488:	0800a92b 	.word	0x0800a92b
 800248c:	0800a882 	.word	0x0800a882
 8002490:	0800a95e 	.word	0x0800a95e
 8002494:	0800a987 	.word	0x0800a987
 8002498:	0800a99a 	.word	0x0800a99a
 800249c:	0800a909 	.word	0x0800a909

080024a0 <i2cNoteReset>:
  anything fails.
  @returns a boolean. `true` if the reset was successful, `false`, if not.
*/
/**************************************************************************/
bool i2cNoteReset()
{
 80024a0:	b570      	push	{r4, r5, r6, lr}
 80024a2:	b0a2      	sub	sp, #136	; 0x88

    // Reset the I2C subsystem and exit if failure
    _LockI2C();
 80024a4:	f7ff fe7e 	bl	80021a4 <NoteLockI2C>
    bool success = _I2CReset(_I2CAddress());
 80024a8:	f7ff fee2 	bl	8002270 <NoteI2CAddress>
 80024ac:	b280      	uxth	r0, r0
 80024ae:	f7ff fead 	bl	800220c <NoteI2CReset>
 80024b2:	4605      	mov	r5, r0
    _UnlockI2C();
 80024b4:	f7ff fe7e 	bl	80021b4 <NoteUnlockI2C>
    if (!success) {
 80024b8:	2d00      	cmp	r5, #0
 80024ba:	d043      	beq.n	8002544 <i2cNoteReset+0xa4>
    }

    // Synchronize by guaranteeing not only that I2C works, but that after we send \n that we drain
    // the remainder of any pending partial reply from a previously-aborted session.
    // If we get a failure on transmitting the \n, it means that the notecard isn't even present.
    _LockI2C();
 80024bc:	f7ff fe72 	bl	80021a4 <NoteLockI2C>
    _DelayMs(6);
 80024c0:	2006      	movs	r0, #6
 80024c2:	f7ff fe57 	bl	8002174 <NoteDelayMs>
    _DelayIO();
    const char *transmitErr = _I2CTransmit(_I2CAddress(), (uint8_t *)"\n", 1);
 80024c6:	f7ff fed3 	bl	8002270 <NoteI2CAddress>
 80024ca:	4920      	ldr	r1, [pc, #128]	; (800254c <i2cNoteReset+0xac>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	b280      	uxth	r0, r0
 80024d0:	f7ff feaa 	bl	8002228 <NoteI2CTransmit>
 80024d4:	4604      	mov	r4, r0
    _DelayMs(CARD_REQUEST_I2C_SEGMENT_DELAY_MS);
 80024d6:	20fa      	movs	r0, #250	; 0xfa
 80024d8:	f7ff fe4c 	bl	8002174 <NoteDelayMs>
    _UnlockI2C();

    // This outer loop does retries on I2C error, and is simply here for robustness.
    bool notecardReady = false;
    int retries;
    for (retries=0; transmitErr==NULL && !notecardReady && retries<3; retries++) {
 80024dc:	2604      	movs	r6, #4
    _UnlockI2C();
 80024de:	f7ff fe69 	bl	80021b4 <NoteUnlockI2C>
    for (retries=0; transmitErr==NULL && !notecardReady && retries<3; retries++) {
 80024e2:	b16c      	cbz	r4, 8002500 <i2cNoteReset+0x60>

    }

    // Reinitialize i2c if there's no response
    if (!notecardReady) {
        _LockI2C();
 80024e4:	f7ff fe5e 	bl	80021a4 <NoteLockI2C>
        _I2CReset(_I2CAddress());
 80024e8:	f7ff fec2 	bl	8002270 <NoteI2CAddress>
 80024ec:	b280      	uxth	r0, r0
 80024ee:	f7ff fe8d 	bl	800220c <NoteI2CReset>
        _UnlockI2C();
 80024f2:	f7ff fe5f 	bl	80021b4 <NoteUnlockI2C>
        _Debug(ERRSTR("notecard not responding\n", "no notecard\n"));
 80024f6:	4816      	ldr	r0, [pc, #88]	; (8002550 <i2cNoteReset+0xb0>)
 80024f8:	f7ff fe20 	bl	800213c <NoteDebug>
 80024fc:	2500      	movs	r5, #0
 80024fe:	e021      	b.n	8002544 <i2cNoteReset+0xa4>
    for (retries=0; transmitErr==NULL && !notecardReady && retries<3; retries++) {
 8002500:	3e01      	subs	r6, #1
 8002502:	d0ef      	beq.n	80024e4 <i2cNoteReset+0x44>
        int chunklen = 0;
 8002504:	2400      	movs	r4, #0
            chunklen = (chunklen > (int)sizeof(buffer)) ? (int)sizeof(buffer) : chunklen;
 8002506:	2c80      	cmp	r4, #128	; 0x80
 8002508:	bfa8      	it	ge
 800250a:	2480      	movge	r4, #128	; 0x80
            chunklen = (chunklen > (int)_I2CMax()) ? (int)_I2CMax() : chunklen;
 800250c:	f7ff feb8 	bl	8002280 <NoteI2CMax>
 8002510:	42a0      	cmp	r0, r4
 8002512:	da02      	bge.n	800251a <i2cNoteReset+0x7a>
 8002514:	f7ff feb4 	bl	8002280 <NoteI2CMax>
 8002518:	4604      	mov	r4, r0
            _LockI2C();
 800251a:	f7ff fe43 	bl	80021a4 <NoteLockI2C>
    _DelayMs(6);
 800251e:	2006      	movs	r0, #6
 8002520:	f7ff fe28 	bl	8002174 <NoteDelayMs>
            const char *err = _I2CReceive(_I2CAddress(), buffer, chunklen, &available);
 8002524:	f7ff fea4 	bl	8002270 <NoteI2CAddress>
 8002528:	b2a2      	uxth	r2, r4
 800252a:	ab01      	add	r3, sp, #4
 800252c:	a902      	add	r1, sp, #8
 800252e:	b280      	uxth	r0, r0
 8002530:	f7ff fe8a 	bl	8002248 <NoteI2CReceive>
 8002534:	4604      	mov	r4, r0
            _UnlockI2C();
 8002536:	f7ff fe3d 	bl	80021b4 <NoteUnlockI2C>
            if (err) {
 800253a:	2c00      	cmp	r4, #0
 800253c:	d1e0      	bne.n	8002500 <i2cNoteReset+0x60>
            if (available == 0) {
 800253e:	9c01      	ldr	r4, [sp, #4]
 8002540:	2c00      	cmp	r4, #0
 8002542:	d1e0      	bne.n	8002506 <i2cNoteReset+0x66>
    }

    // Done
    return notecardReady;
}
 8002544:	4628      	mov	r0, r5
 8002546:	b022      	add	sp, #136	; 0x88
 8002548:	bd70      	pop	{r4, r5, r6, pc}
 800254a:	bf00      	nop
 800254c:	0800a882 	.word	0x0800a882
 8002550:	0800a9ce 	.word	0x0800a9ce

08002554 <errDoc>:
               The error message from the Notecard
  @returns a `J` cJSON object with the error response.
*/
/**************************************************************************/
static J *errDoc(const char *errmsg)
{
 8002554:	b538      	push	{r3, r4, r5, lr}
 8002556:	4605      	mov	r5, r0
    J *rspdoc = JCreateObject();
 8002558:	f005 ff30 	bl	80083bc <JCreateObject>
 800255c:	4604      	mov	r4, r0
    if (rspdoc != NULL) {
 800255e:	b120      	cbz	r0, 800256a <errDoc+0x16>
        JAddStringToObject(rspdoc, c_err, errmsg);
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <errDoc+0x34>)
 8002562:	462a      	mov	r2, r5
 8002564:	6819      	ldr	r1, [r3, #0]
 8002566:	f005 ff14 	bl	8008392 <JAddStringToObject>
    }
    if (suppressShowTransactions == 0) {
 800256a:	4b08      	ldr	r3, [pc, #32]	; (800258c <errDoc+0x38>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	b943      	cbnz	r3, 8002582 <errDoc+0x2e>
        _Debug("{\"err\":\"");
 8002570:	4807      	ldr	r0, [pc, #28]	; (8002590 <errDoc+0x3c>)
 8002572:	f7ff fde3 	bl	800213c <NoteDebug>
        _Debug(errmsg);
 8002576:	4628      	mov	r0, r5
 8002578:	f7ff fde0 	bl	800213c <NoteDebug>
        _Debug("\"}\n");
 800257c:	4805      	ldr	r0, [pc, #20]	; (8002594 <errDoc+0x40>)
 800257e:	f7ff fddd 	bl	800213c <NoteDebug>
    }
    return rspdoc;
}
 8002582:	4620      	mov	r0, r4
 8002584:	bd38      	pop	{r3, r4, r5, pc}
 8002586:	bf00      	nop
 8002588:	20000000 	.word	0x20000000
 800258c:	200005bc 	.word	0x200005bc
 8002590:	0800a9e7 	.word	0x0800a9e7
 8002594:	0800a9f0 	.word	0x0800a9f0

08002598 <NoteNewRequest>:
    @param   request is The name of the request, for example `hub.set`.
  @returns a `J` cJSON object with the request name pre-populated.
*/
/**************************************************************************/
J *NoteNewRequest(const char *request)
{
 8002598:	b538      	push	{r3, r4, r5, lr}
 800259a:	4605      	mov	r5, r0
    J *reqdoc = JCreateObject();
 800259c:	f005 ff0e 	bl	80083bc <JCreateObject>
    if (reqdoc != NULL) {
 80025a0:	4604      	mov	r4, r0
 80025a2:	b120      	cbz	r0, 80025ae <NoteNewRequest+0x16>
        JAddStringToObject(reqdoc, c_req, request);
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <NoteNewRequest+0x1c>)
 80025a6:	462a      	mov	r2, r5
 80025a8:	6819      	ldr	r1, [r3, #0]
 80025aa:	f005 fef2 	bl	8008392 <JAddStringToObject>
    }
    return reqdoc;
}
 80025ae:	4620      	mov	r0, r4
 80025b0:	bd38      	pop	{r3, r4, r5, pc}
 80025b2:	bf00      	nop
 80025b4:	20000014 	.word	0x20000014

080025b8 <NoteReset>:
            anything fails.
    @returns a boolean. `true` if the reset was successful, `false`, if not.
*/
/**************************************************************************/
bool NoteReset()
{
 80025b8:	b510      	push	{r4, lr}
    _LockNote();
 80025ba:	f7ff fe03 	bl	80021c4 <NoteLockNote>
    resetRequired = !_Reset();
 80025be:	f7ff fe6d 	bl	800229c <NoteHardReset>
 80025c2:	4c05      	ldr	r4, [pc, #20]	; (80025d8 <NoteReset+0x20>)
 80025c4:	f080 0001 	eor.w	r0, r0, #1
 80025c8:	7020      	strb	r0, [r4, #0]
    _UnlockNote();
 80025ca:	f7ff fe03 	bl	80021d4 <NoteUnlockNote>
    return !resetRequired;
 80025ce:	7820      	ldrb	r0, [r4, #0]
}
 80025d0:	f080 0001 	eor.w	r0, r0, #1
 80025d4:	bd10      	pop	{r4, pc}
 80025d6:	bf00      	nop
 80025d8:	200001d8 	.word	0x200001d8

080025dc <NoteTransaction>:
{
 80025dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (req == NULL) {
 80025e0:	4604      	mov	r4, r0
 80025e2:	b920      	cbnz	r0, 80025ee <NoteTransaction+0x12>
        return NULL;
 80025e4:	2400      	movs	r4, #0
}
 80025e6:	4620      	mov	r0, r4
 80025e8:	b002      	add	sp, #8
 80025ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const char *reqType = JGetString(req, "req");
 80025ee:	4941      	ldr	r1, [pc, #260]	; (80026f4 <NoteTransaction+0x118>)
 80025f0:	f7ff fa92 	bl	8001b18 <JGetString>
    const char *cmdType = JGetString(req, "cmd");
 80025f4:	4940      	ldr	r1, [pc, #256]	; (80026f8 <NoteTransaction+0x11c>)
    const char *reqType = JGetString(req, "req");
 80025f6:	4605      	mov	r5, r0
    const char *cmdType = JGetString(req, "cmd");
 80025f8:	4620      	mov	r0, r4
 80025fa:	f7ff fa8d 	bl	8001b18 <JGetString>
    if (!JIsPresent(req, "body") && (strcmp(reqType, "hub.set") == 0) && JIsPresent(req, "product")) {
 80025fe:	493f      	ldr	r1, [pc, #252]	; (80026fc <NoteTransaction+0x120>)
    const char *cmdType = JGetString(req, "cmd");
 8002600:	4606      	mov	r6, r0
    if (!JIsPresent(req, "body") && (strcmp(reqType, "hub.set") == 0) && JIsPresent(req, "product")) {
 8002602:	4620      	mov	r0, r4
 8002604:	f005 fee8 	bl	80083d8 <JIsPresent>
 8002608:	b988      	cbnz	r0, 800262e <NoteTransaction+0x52>
 800260a:	493d      	ldr	r1, [pc, #244]	; (8002700 <NoteTransaction+0x124>)
 800260c:	4628      	mov	r0, r5
 800260e:	f7fe fc16 	bl	8000e3e <strcmp>
 8002612:	b960      	cbnz	r0, 800262e <NoteTransaction+0x52>
 8002614:	493b      	ldr	r1, [pc, #236]	; (8002704 <NoteTransaction+0x128>)
 8002616:	4620      	mov	r0, r4
 8002618:	f005 fede 	bl	80083d8 <JIsPresent>
 800261c:	b138      	cbz	r0, 800262e <NoteTransaction+0x52>
        J *body = NoteUserAgent();
 800261e:	f000 f89b 	bl	8002758 <NoteUserAgent>
        if (body != NULL) {
 8002622:	4602      	mov	r2, r0
 8002624:	b118      	cbz	r0, 800262e <NoteTransaction+0x52>
            JAddItemToObject(req, "body", body);
 8002626:	4935      	ldr	r1, [pc, #212]	; (80026fc <NoteTransaction+0x120>)
 8002628:	4620      	mov	r0, r4
 800262a:	f005 fe65 	bl	80082f8 <JAddItemToObject>
    bool noResponseExpected = (reqType[0] == '\0' && cmdType[0] != '\0');
 800262e:	782b      	ldrb	r3, [r5, #0]
 8002630:	b9b3      	cbnz	r3, 8002660 <NoteTransaction+0x84>
 8002632:	7836      	ldrb	r6, [r6, #0]
 8002634:	3e00      	subs	r6, #0
 8002636:	bf18      	it	ne
 8002638:	2601      	movne	r6, #1
    if (resetRequired) {
 800263a:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8002708 <NoteTransaction+0x12c>
 800263e:	f898 3000 	ldrb.w	r3, [r8]
 8002642:	b97b      	cbnz	r3, 8002664 <NoteTransaction+0x88>
    _LockNote();
 8002644:	f7ff fdbe 	bl	80021c4 <NoteLockNote>
    char *json = JPrintUnformatted(req);
 8002648:	4620      	mov	r0, r4
 800264a:	f005 fe4f 	bl	80082ec <JPrintUnformatted>
    if (json == NULL) {
 800264e:	4605      	mov	r5, r0
 8002650:	b968      	cbnz	r0, 800266e <NoteTransaction+0x92>
        J *rsp = errDoc(ERRSTR("can't convert to JSON",c_bad));
 8002652:	482e      	ldr	r0, [pc, #184]	; (800270c <NoteTransaction+0x130>)
        J *rsp = errDoc(ERRSTR("unrecognized response from card {io}",c_iobad));
 8002654:	f7ff ff7e 	bl	8002554 <errDoc>
 8002658:	4604      	mov	r4, r0
    _UnlockNote();
 800265a:	f7ff fdbb 	bl	80021d4 <NoteUnlockNote>
    return rspdoc;
 800265e:	e7c2      	b.n	80025e6 <NoteTransaction+0xa>
    bool noResponseExpected = (reqType[0] == '\0' && cmdType[0] != '\0');
 8002660:	2600      	movs	r6, #0
 8002662:	e7ea      	b.n	800263a <NoteTransaction+0x5e>
        if (!NoteReset()) {
 8002664:	f7ff ffa8 	bl	80025b8 <NoteReset>
 8002668:	2800      	cmp	r0, #0
 800266a:	d1eb      	bne.n	8002644 <NoteTransaction+0x68>
 800266c:	e7ba      	b.n	80025e4 <NoteTransaction+0x8>
    if (suppressShowTransactions == 0) {
 800266e:	4f28      	ldr	r7, [pc, #160]	; (8002710 <NoteTransaction+0x134>)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	b90b      	cbnz	r3, 8002678 <NoteTransaction+0x9c>
        _Debugln(json);
 8002674:	f7ff fd6a 	bl	800214c <NoteDebugln>
    if (noResponseExpected) {
 8002678:	b16e      	cbz	r6, 8002696 <NoteTransaction+0xba>
        errStr = _Transaction(json, NULL);
 800267a:	2100      	movs	r1, #0
        errStr = _Transaction(json, &responseJSON);
 800267c:	4628      	mov	r0, r5
 800267e:	f7ff fe15 	bl	80022ac <NoteJSONTransaction>
 8002682:	4604      	mov	r4, r0
    JFree(json);
 8002684:	4628      	mov	r0, r5
 8002686:	f005 fdbf 	bl	8008208 <JFree>
    if (errStr != NULL) {
 800268a:	b134      	cbz	r4, 800269a <NoteTransaction+0xbe>
    resetRequired = true;
 800268c:	2301      	movs	r3, #1
 800268e:	f888 3000 	strb.w	r3, [r8]
        J *rsp = errDoc(errStr);
 8002692:	4620      	mov	r0, r4
 8002694:	e7de      	b.n	8002654 <NoteTransaction+0x78>
        errStr = _Transaction(json, &responseJSON);
 8002696:	a901      	add	r1, sp, #4
 8002698:	e7f0      	b.n	800267c <NoteTransaction+0xa0>
    if (noResponseExpected) {
 800269a:	b12e      	cbz	r6, 80026a8 <NoteTransaction+0xcc>
        _UnlockNote();
 800269c:	f7ff fd9a 	bl	80021d4 <NoteUnlockNote>
        return JCreateObject();
 80026a0:	f005 fe8c 	bl	80083bc <JCreateObject>
 80026a4:	4604      	mov	r4, r0
 80026a6:	e79e      	b.n	80025e6 <NoteTransaction+0xa>
    J *rspdoc = JParse(responseJSON);
 80026a8:	9801      	ldr	r0, [sp, #4]
 80026aa:	f005 fe1b 	bl	80082e4 <JParse>
    if (rspdoc == NULL) {
 80026ae:	4604      	mov	r4, r0
 80026b0:	b950      	cbnz	r0, 80026c8 <NoteTransaction+0xec>
        _Debug("invalid JSON: ");
 80026b2:	4818      	ldr	r0, [pc, #96]	; (8002714 <NoteTransaction+0x138>)
 80026b4:	f7ff fd42 	bl	800213c <NoteDebug>
        _Debug(responseJSON);
 80026b8:	9801      	ldr	r0, [sp, #4]
 80026ba:	f7ff fd3f 	bl	800213c <NoteDebug>
        _Free(responseJSON);
 80026be:	9801      	ldr	r0, [sp, #4]
 80026c0:	f7ff fd68 	bl	8002194 <NoteFree>
        J *rsp = errDoc(ERRSTR("unrecognized response from card {io}",c_iobad));
 80026c4:	4814      	ldr	r0, [pc, #80]	; (8002718 <NoteTransaction+0x13c>)
 80026c6:	e7c5      	b.n	8002654 <NoteTransaction+0x78>
    if (suppressShowTransactions == 0) {
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	b95b      	cbnz	r3, 80026e4 <NoteTransaction+0x108>
        if (responseJSON[strlen(responseJSON)-1] == '\n') {
 80026cc:	9d01      	ldr	r5, [sp, #4]
 80026ce:	4628      	mov	r0, r5
 80026d0:	f7fe fbbf 	bl	8000e52 <strlen>
 80026d4:	4405      	add	r5, r0
            _Debug(responseJSON);
 80026d6:	9801      	ldr	r0, [sp, #4]
        if (responseJSON[strlen(responseJSON)-1] == '\n') {
 80026d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80026dc:	2b0a      	cmp	r3, #10
 80026de:	d105      	bne.n	80026ec <NoteTransaction+0x110>
            _Debug(responseJSON);
 80026e0:	f7ff fd2c 	bl	800213c <NoteDebug>
    _Free(responseJSON);
 80026e4:	9801      	ldr	r0, [sp, #4]
 80026e6:	f7ff fd55 	bl	8002194 <NoteFree>
 80026ea:	e7b6      	b.n	800265a <NoteTransaction+0x7e>
            _Debugln(responseJSON);
 80026ec:	f7ff fd2e 	bl	800214c <NoteDebugln>
 80026f0:	e7f8      	b.n	80026e4 <NoteTransaction+0x108>
 80026f2:	bf00      	nop
 80026f4:	0800a86c 	.word	0x0800a86c
 80026f8:	0800a868 	.word	0x0800a868
 80026fc:	0800a9f4 	.word	0x0800a9f4
 8002700:	0800a9f9 	.word	0x0800a9f9
 8002704:	0800aa01 	.word	0x0800aa01
 8002708:	200001d8 	.word	0x200001d8
 800270c:	0800aa09 	.word	0x0800aa09
 8002710:	200005bc 	.word	0x200005bc
 8002714:	0800aa1f 	.word	0x0800aa1f
 8002718:	0800aa2e 	.word	0x0800aa2e

0800271c <NoteRequest>:
{
 800271c:	b570      	push	{r4, r5, r6, lr}
    if (req == NULL) {
 800271e:	4604      	mov	r4, r0
 8002720:	b1a8      	cbz	r0, 800274e <NoteRequest+0x32>
    J *rsp = NoteTransaction(req);
 8002722:	f7ff ff5b 	bl	80025dc <NoteTransaction>
    if (rsp == NULL) {
 8002726:	4606      	mov	r6, r0
 8002728:	b928      	cbnz	r0, 8002736 <NoteRequest+0x1a>
        JDelete(req);
 800272a:	4620      	mov	r0, r4
 800272c:	f005 fd6e 	bl	800820c <JDelete>
        return false;
 8002730:	4635      	mov	r5, r6
}
 8002732:	4628      	mov	r0, r5
 8002734:	bd70      	pop	{r4, r5, r6, pc}
    bool success = JIsNullString(rsp, c_err);
 8002736:	4b07      	ldr	r3, [pc, #28]	; (8002754 <NoteRequest+0x38>)
 8002738:	6819      	ldr	r1, [r3, #0]
 800273a:	f005 fe55 	bl	80083e8 <JIsNullString>
 800273e:	4605      	mov	r5, r0
    JDelete(req);
 8002740:	4620      	mov	r0, r4
 8002742:	f005 fd63 	bl	800820c <JDelete>
    JDelete(rsp);
 8002746:	4630      	mov	r0, r6
 8002748:	f005 fd60 	bl	800820c <JDelete>
    return success;
 800274c:	e7f1      	b.n	8002732 <NoteRequest+0x16>
        return false;
 800274e:	4605      	mov	r5, r0
 8002750:	e7ef      	b.n	8002732 <NoteRequest+0x16>
 8002752:	bf00      	nop
 8002754:	20000000 	.word	0x20000000

08002758 <NoteUserAgent>:
#if defined(_MSC_VER)
J *NoteUserAgent()
#else
__attribute__((weak)) J *NoteUserAgent()
#endif
{
 8002758:	b538      	push	{r3, r4, r5, lr}

    J *ua = JCreateObject();
 800275a:	f005 fe2f 	bl	80083bc <JCreateObject>
    if (ua == NULL) {
 800275e:	4604      	mov	r4, r0
 8002760:	2800      	cmp	r0, #0
 8002762:	d060      	beq.n	8002826 <NoteUserAgent+0xce>
#elif defined(ARDUINO_ARCH_STM32U5)
    n_cpu_name = (char *) "stm32u5";
#elif defined(ARDUINO_ARCH_STM32)
    n_cpu_name = (char *) "stm32";
#else
    n_cpu_name = (char *) "";
 8002764:	4d31      	ldr	r5, [pc, #196]	; (800282c <NoteUserAgent+0xd4>)
 8002766:	4b32      	ldr	r3, [pc, #200]	; (8002830 <NoteUserAgent+0xd8>)
 8002768:	602b      	str	r3, [r5, #0]
#endif

    JAddStringToObject(ua, "agent", n_agent);
 800276a:	4b32      	ldr	r3, [pc, #200]	; (8002834 <NoteUserAgent+0xdc>)
 800276c:	4932      	ldr	r1, [pc, #200]	; (8002838 <NoteUserAgent+0xe0>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	f005 fe0f 	bl	8008392 <JAddStringToObject>
    JAddStringToObject(ua, "compiler", compiler);
 8002774:	4a31      	ldr	r2, [pc, #196]	; (800283c <NoteUserAgent+0xe4>)
 8002776:	4932      	ldr	r1, [pc, #200]	; (8002840 <NoteUserAgent+0xe8>)
 8002778:	4620      	mov	r0, r4
 800277a:	f005 fe0a 	bl	8008392 <JAddStringToObject>
    JAddStringToObject(ua, "req_interface", NoteActiveInterface());
 800277e:	f7ff fd31 	bl	80021e4 <NoteActiveInterface>
 8002782:	4930      	ldr	r1, [pc, #192]	; (8002844 <NoteUserAgent+0xec>)
 8002784:	4602      	mov	r2, r0
 8002786:	4620      	mov	r0, r4
 8002788:	f005 fe03 	bl	8008392 <JAddStringToObject>

    if (n_cpu_mem != 0) {
 800278c:	4b2e      	ldr	r3, [pc, #184]	; (8002848 <NoteUserAgent+0xf0>)
 800278e:	6818      	ldr	r0, [r3, #0]
 8002790:	b138      	cbz	r0, 80027a2 <NoteUserAgent+0x4a>
        JAddNumberToObject(ua, "cpu_mem", n_cpu_mem);
 8002792:	f7fd fe67 	bl	8000464 <__aeabi_i2d>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4620      	mov	r0, r4
 800279c:	492b      	ldr	r1, [pc, #172]	; (800284c <NoteUserAgent+0xf4>)
 800279e:	f005 fdce 	bl	800833e <JAddNumberToObject>
    }
    if (n_cpu_mhz != 0) {
 80027a2:	4b2b      	ldr	r3, [pc, #172]	; (8002850 <NoteUserAgent+0xf8>)
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	b138      	cbz	r0, 80027b8 <NoteUserAgent+0x60>
        JAddNumberToObject(ua, "cpu_mhz", n_cpu_mhz);
 80027a8:	f7fd fe5c 	bl	8000464 <__aeabi_i2d>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	4620      	mov	r0, r4
 80027b2:	4928      	ldr	r1, [pc, #160]	; (8002854 <NoteUserAgent+0xfc>)
 80027b4:	f005 fdc3 	bl	800833e <JAddNumberToObject>
    }
    if (n_cpu_cores != 0) {
 80027b8:	4b27      	ldr	r3, [pc, #156]	; (8002858 <NoteUserAgent+0x100>)
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	b138      	cbz	r0, 80027ce <NoteUserAgent+0x76>
        JAddNumberToObject(ua, "cpu_cores", n_cpu_cores);
 80027be:	f7fd fe51 	bl	8000464 <__aeabi_i2d>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4620      	mov	r0, r4
 80027c8:	4924      	ldr	r1, [pc, #144]	; (800285c <NoteUserAgent+0x104>)
 80027ca:	f005 fdb8 	bl	800833e <JAddNumberToObject>
    }
    if (n_cpu_vendor != NULL) {
 80027ce:	4b24      	ldr	r3, [pc, #144]	; (8002860 <NoteUserAgent+0x108>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	b11a      	cbz	r2, 80027dc <NoteUserAgent+0x84>
        JAddStringToObject(ua, "cpu_vendor", n_cpu_vendor);
 80027d4:	4923      	ldr	r1, [pc, #140]	; (8002864 <NoteUserAgent+0x10c>)
 80027d6:	4620      	mov	r0, r4
 80027d8:	f005 fddb 	bl	8008392 <JAddStringToObject>
    }
    if (n_cpu_name != NULL) {
 80027dc:	682a      	ldr	r2, [r5, #0]
 80027de:	b11a      	cbz	r2, 80027e8 <NoteUserAgent+0x90>
        JAddStringToObject(ua, "cpu_name", n_cpu_name);
 80027e0:	4921      	ldr	r1, [pc, #132]	; (8002868 <NoteUserAgent+0x110>)
 80027e2:	4620      	mov	r0, r4
 80027e4:	f005 fdd5 	bl	8008392 <JAddStringToObject>
    }

    if (n_os_name != NULL) {
 80027e8:	4b20      	ldr	r3, [pc, #128]	; (800286c <NoteUserAgent+0x114>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	b11a      	cbz	r2, 80027f6 <NoteUserAgent+0x9e>
        JAddStringToObject(ua, "os_name", n_os_name);
 80027ee:	4920      	ldr	r1, [pc, #128]	; (8002870 <NoteUserAgent+0x118>)
 80027f0:	4620      	mov	r0, r4
 80027f2:	f005 fdce 	bl	8008392 <JAddStringToObject>
    }
    if (n_os_platform != NULL) {
 80027f6:	4b1f      	ldr	r3, [pc, #124]	; (8002874 <NoteUserAgent+0x11c>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	b11a      	cbz	r2, 8002804 <NoteUserAgent+0xac>
        JAddStringToObject(ua, "os_platform", n_os_platform);
 80027fc:	491e      	ldr	r1, [pc, #120]	; (8002878 <NoteUserAgent+0x120>)
 80027fe:	4620      	mov	r0, r4
 8002800:	f005 fdc7 	bl	8008392 <JAddStringToObject>
    }
    if (n_os_family != NULL) {
 8002804:	4b1d      	ldr	r3, [pc, #116]	; (800287c <NoteUserAgent+0x124>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	b11a      	cbz	r2, 8002812 <NoteUserAgent+0xba>
        JAddStringToObject(ua, "os_family", n_os_family);
 800280a:	491d      	ldr	r1, [pc, #116]	; (8002880 <NoteUserAgent+0x128>)
 800280c:	4620      	mov	r0, r4
 800280e:	f005 fdc0 	bl	8008392 <JAddStringToObject>
    }
    if (n_os_version != NULL) {
 8002812:	4b1c      	ldr	r3, [pc, #112]	; (8002884 <NoteUserAgent+0x12c>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	b11a      	cbz	r2, 8002820 <NoteUserAgent+0xc8>
        JAddStringToObject(ua, "os_version", n_os_version);
 8002818:	491b      	ldr	r1, [pc, #108]	; (8002888 <NoteUserAgent+0x130>)
 800281a:	4620      	mov	r0, r4
 800281c:	f005 fdb9 	bl	8008392 <JAddStringToObject>
    }

    // Add more data to the UA from a higher level
    NoteUserAgentUpdate(ua);
 8002820:	4620      	mov	r0, r4
 8002822:	f005 fdf7 	bl	8008414 <NoteUserAgentUpdate>

    return ua;

}
 8002826:	4620      	mov	r0, r4
 8002828:	bd38      	pop	{r3, r4, r5, pc}
 800282a:	bf00      	nop
 800282c:	200005cc 	.word	0x200005cc
 8002830:	0800a883 	.word	0x0800a883
 8002834:	2000001c 	.word	0x2000001c
 8002838:	0800aa53 	.word	0x0800aa53
 800283c:	0800aa59 	.word	0x0800aa59
 8002840:	0800aa64 	.word	0x0800aa64
 8002844:	0800aa6d 	.word	0x0800aa6d
 8002848:	200005c4 	.word	0x200005c4
 800284c:	0800aa7b 	.word	0x0800aa7b
 8002850:	200005c8 	.word	0x200005c8
 8002854:	0800aa83 	.word	0x0800aa83
 8002858:	200005c0 	.word	0x200005c0
 800285c:	0800aa8b 	.word	0x0800aa8b
 8002860:	200005d0 	.word	0x200005d0
 8002864:	0800aa95 	.word	0x0800aa95
 8002868:	0800aaa0 	.word	0x0800aaa0
 800286c:	200005d8 	.word	0x200005d8
 8002870:	0800aaa9 	.word	0x0800aaa9
 8002874:	200005dc 	.word	0x200005dc
 8002878:	0800aab1 	.word	0x0800aab1
 800287c:	200005d4 	.word	0x200005d4
 8002880:	0800aabd 	.word	0x0800aabd
 8002884:	200005e0 	.word	0x200005e0
 8002888:	0800aac7 	.word	0x0800aac7

0800288c <NoteSetUserAgent>:
    @brief  Set key UA fields from a higher level library context
*/
/**************************************************************************/
void NoteSetUserAgent(char *agent)
{
    n_agent = agent;
 800288c:	4b01      	ldr	r3, [pc, #4]	; (8002894 <NoteSetUserAgent+0x8>)
 800288e:	6018      	str	r0, [r3, #0]
}
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	2000001c 	.word	0x2000001c

08002898 <noteLogPrint>:
        return NULL;
    }
}

size_t noteLogPrint(const char * message_)
{
 8002898:	b508      	push	{r3, lr}
    if (message_) {
 800289a:	4601      	mov	r1, r0
 800289c:	b118      	cbz	r0, 80028a6 <noteLogPrint+0xe>
        printk("%s", message_);
 800289e:	4802      	ldr	r0, [pc, #8]	; (80028a8 <noteLogPrint+0x10>)
 80028a0:	f005 fde0 	bl	8008464 <printk>
        return 1;
 80028a4:	2001      	movs	r0, #1
    }

    return 0;
 80028a6:	bd08      	pop	{r3, pc}
 80028a8:	0800aad9 	.word	0x0800aad9

080028ac <button_pressed>:
 */
static struct gpio_dt_spec led = GPIO_DT_SPEC_GET_OR(DT_ALIAS(led0), gpios, {0});

void button_pressed(const struct device *dev, struct gpio_callback *cb,
		    uint32_t pins)
{
 80028ac:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 80028ae:	f003 fba7 	bl	8006000 <sys_clock_cycle_get_32>
	printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
}
 80028b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80028b6:	4601      	mov	r1, r0
	printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
 80028b8:	4801      	ldr	r0, [pc, #4]	; (80028c0 <button_pressed+0x14>)
 80028ba:	f005 bdd3 	b.w	8008464 <printk>
 80028be:	bf00      	nop
 80028c0:	0800aadc 	.word	0x0800aadc

080028c4 <noteI2cReset>:
{
 80028c4:	b538      	push	{r3, r4, r5, lr}
    if (i2c1Initialized)
 80028c6:	4d0c      	ldr	r5, [pc, #48]	; (80028f8 <noteI2cReset+0x34>)
 80028c8:	782c      	ldrb	r4, [r5, #0]
 80028ca:	b964      	cbnz	r4, 80028e6 <noteI2cReset+0x22>
    if (!i2c_dev) {
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <noteI2cReset+0x38>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	b90a      	cbnz	r2, 80028d6 <noteI2cReset+0x12>
        i2c_dev = DEVICE_DT_GET(DT_NODELABEL(i2c1));
 80028d2:	4a0b      	ldr	r2, [pc, #44]	; (8002900 <noteI2cReset+0x3c>)
 80028d4:	601a      	str	r2, [r3, #0]
    if (!device_is_ready(i2c_dev)) {
 80028d6:	6818      	ldr	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 80028d8:	f007 f89c 	bl	8009a14 <z_device_is_ready>
 80028dc:	4604      	mov	r4, r0
 80028de:	b920      	cbnz	r0, 80028ea <noteI2cReset+0x26>
        printk("i2c: Device is not ready.\n");
 80028e0:	4808      	ldr	r0, [pc, #32]	; (8002904 <noteI2cReset+0x40>)
 80028e2:	f005 fdbf 	bl	8008464 <printk>
}
 80028e6:	4620      	mov	r0, r4
 80028e8:	bd38      	pop	{r3, r4, r5, pc}
    printk("i2c: Device is ready.\n");
 80028ea:	4807      	ldr	r0, [pc, #28]	; (8002908 <noteI2cReset+0x44>)
 80028ec:	f005 fdba 	bl	8008464 <printk>
    i2c1Initialized = true;
 80028f0:	2301      	movs	r3, #1
 80028f2:	702b      	strb	r3, [r5, #0]
    return true;
 80028f4:	e7f7      	b.n	80028e6 <noteI2cReset+0x22>
 80028f6:	bf00      	nop
 80028f8:	20001129 	.word	0x20001129
 80028fc:	200005f0 	.word	0x200005f0
 8002900:	0800a024 	.word	0x0800a024
 8002904:	0800aaf2 	.word	0x0800aaf2
 8002908:	0800ab0d 	.word	0x0800ab0d

0800290c <noteI2cReceive.part.0>:
const char *noteI2cReceive(uint16_t device_address_, uint8_t *buffer_, uint16_t size_, uint32_t *available_)
 800290c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002910:	461e      	mov	r6, r3
    uint8_t read_result = i2c_read(i2c_dev, read_buf, request_length, device_address_);
 8002912:	4b14      	ldr	r3, [pc, #80]	; (8002964 <noteI2cReceive.part.0+0x58>)
const char *noteI2cReceive(uint16_t device_address_, uint8_t *buffer_, uint16_t size_, uint32_t *available_)
 8002914:	b0c4      	sub	sp, #272	; 0x110
 8002916:	4607      	mov	r7, r0
static inline int i2c_read(const struct device *dev, uint8_t *buf,
			   uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = buf;
 8002918:	ad04      	add	r5, sp, #16
    uint8_t read_result = i2c_read(i2c_dev, read_buf, request_length, device_address_);
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	9501      	str	r5, [sp, #4]
    const int request_length = size_ + REQUEST_HEADER_SIZE;
 800291e:	3202      	adds	r2, #2
	msg.len = num_bytes;
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
 8002920:	2303      	movs	r3, #3
const char *noteI2cReceive(uint16_t device_address_, uint8_t *buffer_, uint16_t size_, uint32_t *available_)
 8002922:	460c      	mov	r4, r1
	msg.len = num_bytes;
 8002924:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
 8002926:	f88d 300c 	strb.w	r3, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 800292a:	6883      	ldr	r3, [r0, #8]
 800292c:	2201      	movs	r2, #1
 800292e:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8002932:	a901      	add	r1, sp, #4
 8002934:	463b      	mov	r3, r7
 8002936:	47c0      	blx	r8
    if (read_result != 0) {
 8002938:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800293c:	d10f      	bne.n	800295e <noteI2cReceive.part.0+0x52>
        *available_ = (uint32_t)read_buf[0];
 800293e:	782b      	ldrb	r3, [r5, #0]
        uint8_t bytes_to_read = read_buf[1];
 8002940:	786a      	ldrb	r2, [r5, #1]
        *available_ = (uint32_t)read_buf[0];
 8002942:	6033      	str	r3, [r6, #0]
        for (size_t i = 0; i < bytes_to_read; i++)
 8002944:	f10d 0312 	add.w	r3, sp, #18
 8002948:	4290      	cmp	r0, r2
 800294a:	d303      	bcc.n	8002954 <noteI2cReceive.part.0+0x48>
        return NULL;
 800294c:	2000      	movs	r0, #0
}
 800294e:	b044      	add	sp, #272	; 0x110
 8002950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            buffer_[i] = read_buf[i+2];
 8002954:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002958:	5421      	strb	r1, [r4, r0]
        for (size_t i = 0; i < bytes_to_read; i++)
 800295a:	3001      	adds	r0, #1
 800295c:	e7f4      	b.n	8002948 <noteI2cReceive.part.0+0x3c>
        return "i2c: Unable to receive data from the Notecard.\n";
 800295e:	4802      	ldr	r0, [pc, #8]	; (8002968 <noteI2cReceive.part.0+0x5c>)
 8002960:	e7f5      	b.n	800294e <noteI2cReceive.part.0+0x42>
 8002962:	bf00      	nop
 8002964:	200005f0 	.word	0x200005f0
 8002968:	0800ab24 	.word	0x0800ab24

0800296c <noteI2cReceive>:
{
 800296c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002970:	461f      	mov	r7, r3
    size_buf[0] = 0;
 8002972:	2300      	movs	r3, #0
 8002974:	f88d 3000 	strb.w	r3, [sp]
    uint8_t write_result = i2c_write(i2c_dev, size_buf, sizeof(size_buf), device_address_);
 8002978:	4b10      	ldr	r3, [pc, #64]	; (80029bc <noteI2cReceive+0x50>)
    size_buf[1] = (uint8_t)size_;
 800297a:	f88d 2001 	strb.w	r2, [sp, #1]
{
 800297e:	4604      	mov	r4, r0
    uint8_t write_result = i2c_write(i2c_dev, size_buf, sizeof(size_buf), device_address_);
 8002980:	6818      	ldr	r0, [r3, #0]
	msg.buf = (uint8_t *)buf;
 8002982:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
 8002986:	2302      	movs	r3, #2
{
 8002988:	460e      	mov	r6, r1
 800298a:	4615      	mov	r5, r2
 800298c:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 800298e:	f88d 300c 	strb.w	r3, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 8002992:	6883      	ldr	r3, [r0, #8]
 8002994:	2201      	movs	r2, #1
 8002996:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800299a:	a901      	add	r1, sp, #4
 800299c:	4623      	mov	r3, r4
 800299e:	47c0      	blx	r8
    if (write_result != 0) {
 80029a0:	b2c0      	uxtb	r0, r0
 80029a2:	b940      	cbnz	r0, 80029b6 <noteI2cReceive+0x4a>
 80029a4:	463b      	mov	r3, r7
 80029a6:	462a      	mov	r2, r5
 80029a8:	4631      	mov	r1, r6
 80029aa:	4620      	mov	r0, r4
 80029ac:	f7ff ffae 	bl	800290c <noteI2cReceive.part.0>
}
 80029b0:	b004      	add	sp, #16
 80029b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return "i2c: Unable to initate read from the Notecard\n";
 80029b6:	4802      	ldr	r0, [pc, #8]	; (80029c0 <noteI2cReceive+0x54>)
 80029b8:	e7fa      	b.n	80029b0 <noteI2cReceive+0x44>
 80029ba:	bf00      	nop
 80029bc:	200005f0 	.word	0x200005f0
 80029c0:	0800ab54 	.word	0x0800ab54

080029c4 <noteI2cTransmit>:
{
 80029c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029c6:	4603      	mov	r3, r0
 80029c8:	b085      	sub	sp, #20
    uint8_t write_buf[size_+1];
 80029ca:	f102 0008 	add.w	r0, r2, #8
 80029ce:	466c      	mov	r4, sp
 80029d0:	08c0      	lsrs	r0, r0, #3
 80029d2:	eba4 00c0 	sub.w	r0, r4, r0, lsl #3
{
 80029d6:	af00      	add	r7, sp, #0
    uint8_t write_buf[size_+1];
 80029d8:	4685      	mov	sp, r0
 80029da:	1c56      	adds	r6, r2, #1
 80029dc:	466d      	mov	r5, sp
    write_buf[0] = (uint8_t)size_;
 80029de:	f88d 2000 	strb.w	r2, [sp]
    for (size_t i = 0; i < size_; i++)
 80029e2:	3901      	subs	r1, #1
 80029e4:	2400      	movs	r4, #0
 80029e6:	4294      	cmp	r4, r2
 80029e8:	d313      	bcc.n	8002a12 <noteI2cTransmit+0x4e>
    uint8_t write_result = i2c_write(i2c_dev, write_buf, sizeof(write_buf), device_address_);
 80029ea:	4a0c      	ldr	r2, [pc, #48]	; (8002a1c <noteI2cTransmit+0x58>)
 80029ec:	6810      	ldr	r0, [r2, #0]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 80029ee:	2202      	movs	r2, #2
	msg.len = num_bytes;
 80029f0:	e9c7 5601 	strd	r5, r6, [r7, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 80029f4:	733a      	strb	r2, [r7, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 80029f6:	6882      	ldr	r2, [r0, #8]
 80029f8:	1d39      	adds	r1, r7, #4
 80029fa:	6894      	ldr	r4, [r2, #8]
 80029fc:	2201      	movs	r2, #1
 80029fe:	47a0      	blx	r4
    if (write_result != 0) {
 8002a00:	b2c0      	uxtb	r0, r0
        return NULL;
 8002a02:	2800      	cmp	r0, #0
}
 8002a04:	4806      	ldr	r0, [pc, #24]	; (8002a20 <noteI2cTransmit+0x5c>)
 8002a06:	f107 0714 	add.w	r7, r7, #20
 8002a0a:	bf08      	it	eq
 8002a0c:	2000      	moveq	r0, #0
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
        write_buf[i+1] = buffer_[i];
 8002a12:	3401      	adds	r4, #1
 8002a14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8002a18:	5528      	strb	r0, [r5, r4]
    for (size_t i = 0; i < size_; i++)
 8002a1a:	e7e4      	b.n	80029e6 <noteI2cTransmit+0x22>
 8002a1c:	200005f0 	.word	0x200005f0
 8002a20:	0800ab83 	.word	0x0800ab83

08002a24 <main>:
 */
BUILD_ASSERT(DT_NODE_HAS_COMPAT(DT_CHOSEN(zephyr_console), zephyr_cdc_acm_uart),
	    "Console device is not ACM CDC UART device");

void main(void)
{
 8002a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	int ret;

	// Configure USB Serial for Console output
	const struct device *usb_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
	uint32_t dtr = 0;
 8002a28:	2000      	movs	r0, #0
 8002a2a:	9002      	str	r0, [sp, #8]

	if (usb_enable(NULL)) {
 8002a2c:	f001 f90c 	bl	8003c48 <usb_enable>
 8002a30:	2800      	cmp	r0, #0
 8002a32:	d155      	bne.n	8002ae0 <main+0xbc>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 8002a34:	2100      	movs	r1, #0
 8002a36:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8002a3a:	f005 f823 	bl	8007a84 <z_impl_k_sleep>

static inline int z_impl_uart_line_ctrl_get(const struct device *dev,
					    uint32_t ctrl, uint32_t *val)
{
#ifdef CONFIG_UART_LINE_CTRL
	const struct uart_driver_api *api =
 8002a3e:	4885      	ldr	r0, [pc, #532]	; (8002c54 <main+0x230>)
		(const struct uart_driver_api *)dev->api;

	if (api->line_ctrl_get == NULL) {
 8002a40:	6883      	ldr	r3, [r0, #8]
 8002a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a44:	b113      	cbz	r3, 8002a4c <main+0x28>
		return -ENOSYS;
	}
	return api->line_ctrl_get(dev, ctrl, val);
 8002a46:	aa02      	add	r2, sp, #8
 8002a48:	2104      	movs	r1, #4
 8002a4a:	4798      	blx	r3
		k_sleep(K_MSEC(100));
	}
	*/

	// Initialize note-c references
	NoteSetUserAgent((char *)"note-zephyr");
 8002a4c:	4882      	ldr	r0, [pc, #520]	; (8002c58 <main+0x234>)
 8002a4e:	f7ff ff1d 	bl	800288c <NoteSetUserAgent>
    NoteSetFnDefault(malloc, free, platform_delay, platform_millis);
 8002a52:	4b82      	ldr	r3, [pc, #520]	; (8002c5c <main+0x238>)
 8002a54:	4a82      	ldr	r2, [pc, #520]	; (8002c60 <main+0x23c>)
 8002a56:	4983      	ldr	r1, [pc, #524]	; (8002c64 <main+0x240>)
 8002a58:	4883      	ldr	r0, [pc, #524]	; (8002c68 <main+0x244>)
 8002a5a:	f7ff fb25 	bl	80020a8 <NoteSetFnDefault>
	NoteSetFnDebugOutput(noteLogPrint);
 8002a5e:	4883      	ldr	r0, [pc, #524]	; (8002c6c <main+0x248>)
 8002a60:	f7ff fb3c 	bl	80020dc <NoteSetFnDebugOutput>

	#ifdef USE_SERIAL
		NoteSetFnSerial(noteSerialReset, noteSerialTransmit,
                        noteSerialAvailable, noteSerialReceive);
	#else
		NoteSetFnI2C(NOTE_I2C_ADDR_DEFAULT, NOTE_I2C_MAX_DEFAULT, noteI2cReset,
 8002a64:	4b82      	ldr	r3, [pc, #520]	; (8002c70 <main+0x24c>)
 8002a66:	4a83      	ldr	r2, [pc, #524]	; (8002c74 <main+0x250>)
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	211e      	movs	r1, #30
 8002a6c:	4b82      	ldr	r3, [pc, #520]	; (8002c78 <main+0x254>)
 8002a6e:	2017      	movs	r0, #23
 8002a70:	f7ff fb3a 	bl	80020e8 <NoteSetFnI2C>
            		 noteI2cTransmit, noteI2cReceive);

	#endif

	// Send a Notecard hub.set using note-c
	J *req = NoteNewRequest("hub.set");
 8002a74:	4881      	ldr	r0, [pc, #516]	; (8002c7c <main+0x258>)
 8002a76:	f7ff fd8f 	bl	8002598 <NoteNewRequest>
	JAddStringToObject(req, "product", PRODUCT_UID);
 8002a7a:	4a81      	ldr	r2, [pc, #516]	; (8002c80 <main+0x25c>)
 8002a7c:	4981      	ldr	r1, [pc, #516]	; (8002c84 <main+0x260>)
	J *req = NoteNewRequest("hub.set");
 8002a7e:	4604      	mov	r4, r0
	JAddStringToObject(req, "product", PRODUCT_UID);
 8002a80:	f005 fc87 	bl	8008392 <JAddStringToObject>
	JAddStringToObject(req, "mode", "continuous");
 8002a84:	4a80      	ldr	r2, [pc, #512]	; (8002c88 <main+0x264>)
 8002a86:	4981      	ldr	r1, [pc, #516]	; (8002c8c <main+0x268>)
 8002a88:	4620      	mov	r0, r4
 8002a8a:	f005 fc82 	bl	8008392 <JAddStringToObject>
	JAddStringToObject(req, "sn", "zephyr-notecard");
 8002a8e:	4a80      	ldr	r2, [pc, #512]	; (8002c90 <main+0x26c>)
 8002a90:	4980      	ldr	r1, [pc, #512]	; (8002c94 <main+0x270>)
 8002a92:	4620      	mov	r0, r4
 8002a94:	f005 fc7d 	bl	8008392 <JAddStringToObject>

	if (NoteRequest(req)) {
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f7ff fe3f 	bl	800271c <NoteRequest>
 8002a9e:	b310      	cbz	r0, 8002ae6 <main+0xc2>
		printk("Notecard hub.set successful.\n");
 8002aa0:	487d      	ldr	r0, [pc, #500]	; (8002c98 <main+0x274>)
	} else {
		printk("Notecard hub.set failed.\n");
 8002aa2:	f005 fcdf 	bl	8008464 <printk>
	}

	req = NoteNewRequest("card.dfu");
 8002aa6:	487d      	ldr	r0, [pc, #500]	; (8002c9c <main+0x278>)
 8002aa8:	f7ff fd76 	bl	8002598 <NoteNewRequest>
  	JAddStringToObject(req, "name", "stm32");
 8002aac:	4a7c      	ldr	r2, [pc, #496]	; (8002ca0 <main+0x27c>)
 8002aae:	497d      	ldr	r1, [pc, #500]	; (8002ca4 <main+0x280>)
	req = NoteNewRequest("card.dfu");
 8002ab0:	4604      	mov	r4, r0
  	JAddStringToObject(req, "name", "stm32");
 8002ab2:	f005 fc6e 	bl	8008392 <JAddStringToObject>
  	JAddBoolToObject(req, "on", true);
 8002ab6:	497c      	ldr	r1, [pc, #496]	; (8002ca8 <main+0x284>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	4620      	mov	r0, r4
 8002abc:	f005 fc2a 	bl	8008314 <JAddBoolToObject>

	if (NoteRequest(req)) {
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f7ff fe2b 	bl	800271c <NoteRequest>
 8002ac6:	b180      	cbz	r0, 8002aea <main+0xc6>
		printk("Notecard card.dfu successful.\n");
 8002ac8:	4878      	ldr	r0, [pc, #480]	; (8002cac <main+0x288>)
	} else {
		printk("Notecard card.dfu failed.\n");
 8002aca:	f005 fccb 	bl	8008464 <printk>
 8002ace:	4d78      	ldr	r5, [pc, #480]	; (8002cb0 <main+0x28c>)
 8002ad0:	4628      	mov	r0, r5
 8002ad2:	f006 ff9f 	bl	8009a14 <z_device_is_ready>
	}

	if (!device_is_ready(button.port)) {
 8002ad6:	b950      	cbnz	r0, 8002aee <main+0xca>
		printk("Error: button device %s is not ready\n",
 8002ad8:	6829      	ldr	r1, [r5, #0]
 8002ada:	4876      	ldr	r0, [pc, #472]	; (8002cb4 <main+0x290>)
 8002adc:	f005 fcc2 	bl	8008464 <printk>
				}
			}
			k_msleep(SLEEP_TIME_MS);
		}
	}
}
 8002ae0:	b004      	add	sp, #16
 8002ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printk("Notecard hub.set failed.\n");
 8002ae6:	4874      	ldr	r0, [pc, #464]	; (8002cb8 <main+0x294>)
 8002ae8:	e7db      	b.n	8002aa2 <main+0x7e>
		printk("Notecard card.dfu failed.\n");
 8002aea:	4874      	ldr	r0, [pc, #464]	; (8002cbc <main+0x298>)
 8002aec:	e7ed      	b.n	8002aca <main+0xa6>
	ret = gpio_pin_configure_dt(&button, GPIO_INPUT);
 8002aee:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002af2:	4873      	ldr	r0, [pc, #460]	; (8002cc0 <main+0x29c>)
 8002af4:	f005 fc8f 	bl	8008416 <gpio_pin_configure_dt>
	if (ret != 0) {
 8002af8:	4601      	mov	r1, r0
 8002afa:	b128      	cbz	r0, 8002b08 <main+0xe4>
		printk("Error %d: failed to configure %s pin %d\n",
 8002afc:	682a      	ldr	r2, [r5, #0]
 8002afe:	4871      	ldr	r0, [pc, #452]	; (8002cc4 <main+0x2a0>)
 8002b00:	230d      	movs	r3, #13
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
 8002b02:	f005 fcaf 	bl	8008464 <printk>
		return;
 8002b06:	e7eb      	b.n	8002ae0 <main+0xbc>
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8002b08:	692b      	ldr	r3, [r5, #16]
	const struct gpio_driver_api *api =
 8002b0a:	68ae      	ldr	r6, [r5, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8002b0c:	681b      	ldr	r3, [r3, #0]
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
 8002b0e:	69b4      	ldr	r4, [r6, #24]
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 8002b10:	f413 5f00 	tst.w	r3, #8192	; 0x2000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8002b14:	f04f 010d 	mov.w	r1, #13
 8002b18:	bf0c      	ite	eq
 8002b1a:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
 8002b1e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002b22:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
 8002b26:	4628      	mov	r0, r5
 8002b28:	47a0      	blx	r4
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
 8002b2a:	682c      	ldr	r4, [r5, #0]
	if (ret != 0) {
 8002b2c:	4601      	mov	r1, r0
 8002b2e:	b118      	cbz	r0, 8002b38 <main+0x114>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
 8002b30:	4865      	ldr	r0, [pc, #404]	; (8002cc8 <main+0x2a4>)
 8002b32:	230d      	movs	r3, #13
 8002b34:	4622      	mov	r2, r4
 8002b36:	e7e4      	b.n	8002b02 <main+0xde>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 8002b38:	4964      	ldr	r1, [pc, #400]	; (8002ccc <main+0x2a8>)
 8002b3a:	4b65      	ldr	r3, [pc, #404]	; (8002cd0 <main+0x2ac>)
 8002b3c:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
 8002b3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b42:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
 8002b44:	69f3      	ldr	r3, [r6, #28]
 8002b46:	b113      	cbz	r3, 8002b4e <main+0x12a>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 8002b48:	2201      	movs	r2, #1
 8002b4a:	4628      	mov	r0, r5
 8002b4c:	4798      	blx	r3
	printk("Set up button at %s pin %d\n", button.port->name, button.pin);
 8002b4e:	4621      	mov	r1, r4
	if (led.port && !device_is_ready(led.port)) {
 8002b50:	4c60      	ldr	r4, [pc, #384]	; (8002cd4 <main+0x2b0>)
	printk("Set up button at %s pin %d\n", button.port->name, button.pin);
 8002b52:	4861      	ldr	r0, [pc, #388]	; (8002cd8 <main+0x2b4>)
 8002b54:	220d      	movs	r2, #13
 8002b56:	f005 fc85 	bl	8008464 <printk>
	if (led.port && !device_is_ready(led.port)) {
 8002b5a:	6820      	ldr	r0, [r4, #0]
 8002b5c:	b158      	cbz	r0, 8002b76 <main+0x152>
 8002b5e:	f006 ff59 	bl	8009a14 <z_device_is_ready>
		printk("Error %d: LED device %s is not ready; ignoring it\n",
 8002b62:	6823      	ldr	r3, [r4, #0]
	if (led.port && !device_is_ready(led.port)) {
 8002b64:	4606      	mov	r6, r0
 8002b66:	2800      	cmp	r0, #0
 8002b68:	d159      	bne.n	8002c1e <main+0x1fa>
		printk("Error %d: LED device %s is not ready; ignoring it\n",
 8002b6a:	4601      	mov	r1, r0
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	485b      	ldr	r0, [pc, #364]	; (8002cdc <main+0x2b8>)
 8002b70:	f005 fc78 	bl	8008464 <printk>
		led.port = NULL;
 8002b74:	6026      	str	r6, [r4, #0]
	printk("Press the button\n");
 8002b76:	485a      	ldr	r0, [pc, #360]	; (8002ce0 <main+0x2bc>)
 8002b78:	f005 fc74 	bl	8008464 <printk>
	if (led.port) {
 8002b7c:	6823      	ldr	r3, [r4, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0ae      	beq.n	8002ae0 <main+0xbc>
	return api->port_get_raw(port, value);
 8002b82:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8002cb0 <main+0x28c>
				button_pressed_count++;
 8002b86:	4e57      	ldr	r6, [pc, #348]	; (8002ce4 <main+0x2c0>)
				printk("Button count: %d.\n", button_pressed_count);
 8002b88:	f8df 915c 	ldr.w	r9, [pc, #348]	; 8002ce8 <main+0x2c4>
	const struct gpio_driver_data *const data =
 8002b8c:	692f      	ldr	r7, [r5, #16]
	return api->port_get_raw(port, value);
 8002b8e:	68ab      	ldr	r3, [r5, #8]
 8002b90:	a903      	add	r1, sp, #12
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	4640      	mov	r0, r8
 8002b96:	4798      	blx	r3
	if (ret == 0) {
 8002b98:	2800      	cmp	r0, #0
 8002b9a:	d13b      	bne.n	8002c14 <main+0x1f0>
		*value ^= data->invert;
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	9b03      	ldr	r3, [sp, #12]
 8002ba0:	4053      	eors	r3, r2
			if (val == 0) {
 8002ba2:	049b      	lsls	r3, r3, #18
 8002ba4:	d436      	bmi.n	8002c14 <main+0x1f0>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8002ba6:	7923      	ldrb	r3, [r4, #4]
	return gpio_pin_set(spec->port, spec->pin, value);
 8002ba8:	6820      	ldr	r0, [r4, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8002baa:	2101      	movs	r1, #1
 8002bac:	4099      	lsls	r1, r3
 8002bae:	6903      	ldr	r3, [r0, #16]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4219      	tst	r1, r3
	return api->port_clear_bits_raw(port, pins);
 8002bb4:	6883      	ldr	r3, [r0, #8]
 8002bb6:	bf0c      	ite	eq
 8002bb8:	691b      	ldreq	r3, [r3, #16]
	return api->port_set_bits_raw(port, pins);
 8002bba:	68db      	ldrne	r3, [r3, #12]
 8002bbc:	4798      	blx	r3
				button_pressed_count++;
 8002bbe:	7831      	ldrb	r1, [r6, #0]
 8002bc0:	3101      	adds	r1, #1
 8002bc2:	b2c9      	uxtb	r1, r1
				printk("Button count: %d.\n", button_pressed_count);
 8002bc4:	4648      	mov	r0, r9
				button_pressed_count++;
 8002bc6:	7031      	strb	r1, [r6, #0]
				printk("Button count: %d.\n", button_pressed_count);
 8002bc8:	f005 fc4c 	bl	8008464 <printk>
				req = NoteNewRequest("note.add");
 8002bcc:	4847      	ldr	r0, [pc, #284]	; (8002cec <main+0x2c8>)
 8002bce:	f7ff fce3 	bl	8002598 <NoteNewRequest>
				JAddBoolToObject(req, "sync", true);
 8002bd2:	4947      	ldr	r1, [pc, #284]	; (8002cf0 <main+0x2cc>)
 8002bd4:	2201      	movs	r2, #1
				req = NoteNewRequest("note.add");
 8002bd6:	4607      	mov	r7, r0
				JAddBoolToObject(req, "sync", true);
 8002bd8:	f005 fb9c 	bl	8008314 <JAddBoolToObject>
				J *body = JCreateObject();
 8002bdc:	f005 fbee 	bl	80083bc <JCreateObject>
				JAddStringToObject(body, "os", "zephyr");
 8002be0:	4a44      	ldr	r2, [pc, #272]	; (8002cf4 <main+0x2d0>)
 8002be2:	4945      	ldr	r1, [pc, #276]	; (8002cf8 <main+0x2d4>)
				J *body = JCreateObject();
 8002be4:	4682      	mov	sl, r0
				JAddStringToObject(body, "os", "zephyr");
 8002be6:	f005 fbd4 	bl	8008392 <JAddStringToObject>
				JAddNumberToObject(body, "button_count", button_pressed_count);
 8002bea:	7830      	ldrb	r0, [r6, #0]
 8002bec:	f7fd fc2a 	bl	8000444 <__aeabi_ui2d>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4650      	mov	r0, sl
 8002bf6:	4941      	ldr	r1, [pc, #260]	; (8002cfc <main+0x2d8>)
 8002bf8:	f005 fba1 	bl	800833e <JAddNumberToObject>
				JAddItemToObject(req, "body", body);
 8002bfc:	4638      	mov	r0, r7
 8002bfe:	4940      	ldr	r1, [pc, #256]	; (8002d00 <main+0x2dc>)
 8002c00:	4652      	mov	r2, sl
 8002c02:	f005 fb79 	bl	80082f8 <JAddItemToObject>
				if (NoteRequest(req)) {
 8002c06:	4638      	mov	r0, r7
 8002c08:	f7ff fd88 	bl	800271c <NoteRequest>
 8002c0c:	b300      	cbz	r0, 8002c50 <main+0x22c>
					printk("Notecard note.add successful.\n");
 8002c0e:	483d      	ldr	r0, [pc, #244]	; (8002d04 <main+0x2e0>)
					printk("Notecard note.add failed.\n");
 8002c10:	f005 fc28 	bl	8008464 <printk>
 8002c14:	2100      	movs	r1, #0
 8002c16:	200a      	movs	r0, #10
 8002c18:	f004 ff34 	bl	8007a84 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
 8002c1c:	e7b6      	b.n	8002b8c <main+0x168>
	if (led.port) {
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0a9      	beq.n	8002b76 <main+0x152>
		ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT);
 8002c22:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002c26:	4620      	mov	r0, r4
 8002c28:	f005 fbf5 	bl	8008416 <gpio_pin_configure_dt>
		if (ret != 0) {
 8002c2c:	7923      	ldrb	r3, [r4, #4]
 8002c2e:	4601      	mov	r1, r0
 8002c30:	b138      	cbz	r0, 8002c42 <main+0x21e>
			printk("Error %d: failed to configure LED device %s pin %d\n",
 8002c32:	6822      	ldr	r2, [r4, #0]
 8002c34:	4834      	ldr	r0, [pc, #208]	; (8002d08 <main+0x2e4>)
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	f005 fc14 	bl	8008464 <printk>
			led.port = NULL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	6023      	str	r3, [r4, #0]
 8002c40:	e799      	b.n	8002b76 <main+0x152>
			printk("Set up LED at %s pin %d\n", led.port->name, led.pin);
 8002c42:	6821      	ldr	r1, [r4, #0]
 8002c44:	4831      	ldr	r0, [pc, #196]	; (8002d0c <main+0x2e8>)
 8002c46:	6809      	ldr	r1, [r1, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f005 fc0b 	bl	8008464 <printk>
 8002c4e:	e792      	b.n	8002b76 <main+0x152>
					printk("Notecard note.add failed.\n");
 8002c50:	482f      	ldr	r0, [pc, #188]	; (8002d10 <main+0x2ec>)
 8002c52:	e7dd      	b.n	8002c10 <main+0x1ec>
 8002c54:	08009f7c 	.word	0x08009f7c
 8002c58:	0800abb1 	.word	0x0800abb1
 8002c5c:	08008443 	.word	0x08008443
 8002c60:	08008453 	.word	0x08008453
 8002c64:	08007ed9 	.word	0x08007ed9
 8002c68:	08007ec9 	.word	0x08007ec9
 8002c6c:	08002899 	.word	0x08002899
 8002c70:	0800296d 	.word	0x0800296d
 8002c74:	080028c5 	.word	0x080028c5
 8002c78:	080029c5 	.word	0x080029c5
 8002c7c:	0800a9f9 	.word	0x0800a9f9
 8002c80:	0800abbd 	.word	0x0800abbd
 8002c84:	0800aa01 	.word	0x0800aa01
 8002c88:	0800abe1 	.word	0x0800abe1
 8002c8c:	0800abec 	.word	0x0800abec
 8002c90:	0800abf1 	.word	0x0800abf1
 8002c94:	0800ac01 	.word	0x0800ac01
 8002c98:	0800ac04 	.word	0x0800ac04
 8002c9c:	0800ac3c 	.word	0x0800ac3c
 8002ca0:	0800ac45 	.word	0x0800ac45
 8002ca4:	0800aaac 	.word	0x0800aaac
 8002ca8:	0800aacf 	.word	0x0800aacf
 8002cac:	0800ac4b 	.word	0x0800ac4b
 8002cb0:	08009f34 	.word	0x08009f34
 8002cb4:	0800ac85 	.word	0x0800ac85
 8002cb8:	0800ac22 	.word	0x0800ac22
 8002cbc:	0800ac6a 	.word	0x0800ac6a
 8002cc0:	0800a450 	.word	0x0800a450
 8002cc4:	0800acab 	.word	0x0800acab
 8002cc8:	0800acd4 	.word	0x0800acd4
 8002ccc:	200005e4 	.word	0x200005e4
 8002cd0:	080028ad 	.word	0x080028ad
 8002cd4:	20000020 	.word	0x20000020
 8002cd8:	0800ad0a 	.word	0x0800ad0a
 8002cdc:	0800ad26 	.word	0x0800ad26
 8002ce0:	0800ada6 	.word	0x0800ada6
 8002ce4:	20001128 	.word	0x20001128
 8002ce8:	0800adb8 	.word	0x0800adb8
 8002cec:	0800adcb 	.word	0x0800adcb
 8002cf0:	0800add4 	.word	0x0800add4
 8002cf4:	0800abb6 	.word	0x0800abb6
 8002cf8:	0800add9 	.word	0x0800add9
 8002cfc:	0800addc 	.word	0x0800addc
 8002d00:	0800a9f4 	.word	0x0800a9f4
 8002d04:	0800ade9 	.word	0x0800ade9
 8002d08:	0800ad59 	.word	0x0800ad59
 8002d0c:	0800ad8d 	.word	0x0800ad8d
 8002d10:	0800ae08 	.word	0x0800ae08

08002d14 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8002d14:	680b      	ldr	r3, [r1, #0]
 8002d16:	3301      	adds	r3, #1
 8002d18:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 8002d1a:	4b01      	ldr	r3, [pc, #4]	; (8002d20 <char_out+0xc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4718      	bx	r3
 8002d20:	20000028 	.word	0x20000028

08002d24 <__printk_hook_install>:
	_char_out = fn;
 8002d24:	4b01      	ldr	r3, [pc, #4]	; (8002d2c <__printk_hook_install+0x8>)
 8002d26:	6018      	str	r0, [r3, #0]
}
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	20000028 	.word	0x20000028

08002d30 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 8002d30:	b507      	push	{r0, r1, r2, lr}
 8002d32:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
 8002d34:	2100      	movs	r1, #0
{
 8002d36:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
 8002d38:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
 8002d3a:	4803      	ldr	r0, [pc, #12]	; (8002d48 <vprintk+0x18>)
 8002d3c:	a901      	add	r1, sp, #4
 8002d3e:	f000 f865 	bl	8002e0c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 8002d42:	b003      	add	sp, #12
 8002d44:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d48:	08002d15 	.word	0x08002d15

08002d4c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
 8002d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
 8002d4e:	4e08      	ldr	r6, [pc, #32]	; (8002d70 <extract_decimal+0x24>)
 8002d50:	6802      	ldr	r2, [r0, #0]
{
 8002d52:	4603      	mov	r3, r0
		val = 10U * val + *sp++ - '0';
 8002d54:	270a      	movs	r7, #10
	size_t val = 0;
 8002d56:	2000      	movs	r0, #0
 8002d58:	4611      	mov	r1, r2
	while (isdigit((int)(unsigned char)*sp)) {
 8002d5a:	3201      	adds	r2, #1
 8002d5c:	780c      	ldrb	r4, [r1, #0]
 8002d5e:	5da5      	ldrb	r5, [r4, r6]
 8002d60:	076d      	lsls	r5, r5, #29
 8002d62:	d401      	bmi.n	8002d68 <extract_decimal+0x1c>
	}
	*str = sp;
 8002d64:	6019      	str	r1, [r3, #0]
	return val;
}
 8002d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
 8002d68:	fb07 4000 	mla	r0, r7, r0, r4
 8002d6c:	3830      	subs	r0, #48	; 0x30
 8002d6e:	e7f3      	b.n	8002d58 <extract_decimal+0xc>
 8002d70:	0800af6d 	.word	0x0800af6d

08002d74 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
 8002d74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d78:	4615      	mov	r5, r2
 8002d7a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 8002d7c:	78d3      	ldrb	r3, [r2, #3]
 8002d7e:	4a22      	ldr	r2, [pc, #136]	; (8002e08 <encode_uint+0x94>)
 8002d80:	f813 b002 	ldrb.w	fp, [r3, r2]
	switch (specifier) {
 8002d84:	2b6f      	cmp	r3, #111	; 0x6f
{
 8002d86:	4680      	mov	r8, r0
 8002d88:	460f      	mov	r7, r1
 8002d8a:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 8002d8e:	d029      	beq.n	8002de4 <encode_uint+0x70>
 8002d90:	d824      	bhi.n	8002ddc <encode_uint+0x68>
		return 16;
 8002d92:	2b58      	cmp	r3, #88	; 0x58
 8002d94:	bf14      	ite	ne
 8002d96:	260a      	movne	r6, #10
 8002d98:	2610      	moveq	r6, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
 8002d9a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
 8002d9e:	4632      	mov	r2, r6
 8002da0:	2300      	movs	r3, #0
 8002da2:	4640      	mov	r0, r8
 8002da4:	4639      	mov	r1, r7
 8002da6:	f7fd fe9f 	bl	8000ae8 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002daa:	2a09      	cmp	r2, #9
 8002dac:	b2d4      	uxtb	r4, r2
 8002dae:	d81e      	bhi.n	8002dee <encode_uint+0x7a>
 8002db0:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
 8002db2:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002db4:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 8002db6:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002dba:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 8002dbe:	d301      	bcc.n	8002dc4 <encode_uint+0x50>
 8002dc0:	45d1      	cmp	r9, sl
 8002dc2:	d811      	bhi.n	8002de8 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
 8002dc4:	782b      	ldrb	r3, [r5, #0]
 8002dc6:	069b      	lsls	r3, r3, #26
 8002dc8:	d505      	bpl.n	8002dd6 <encode_uint+0x62>
		if (radix == 8) {
 8002dca:	2e08      	cmp	r6, #8
 8002dcc:	d115      	bne.n	8002dfa <encode_uint+0x86>
			conv->altform_0 = true;
 8002dce:	78ab      	ldrb	r3, [r5, #2]
 8002dd0:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
 8002dd4:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
 8002dd6:	4648      	mov	r0, r9
 8002dd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 8002ddc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
 8002de0:	2b70      	cmp	r3, #112	; 0x70
 8002de2:	e7d7      	b.n	8002d94 <encode_uint+0x20>
	switch (specifier) {
 8002de4:	2608      	movs	r6, #8
 8002de6:	e7d8      	b.n	8002d9a <encode_uint+0x26>
		value /= radix;
 8002de8:	4680      	mov	r8, r0
 8002dea:	460f      	mov	r7, r1
 8002dec:	e7d7      	b.n	8002d9e <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002dee:	f1bb 0f01 	cmp.w	fp, #1
 8002df2:	bf0c      	ite	eq
 8002df4:	3437      	addeq	r4, #55	; 0x37
 8002df6:	3457      	addne	r4, #87	; 0x57
 8002df8:	e7db      	b.n	8002db2 <encode_uint+0x3e>
		} else if (radix == 16) {
 8002dfa:	2e10      	cmp	r6, #16
 8002dfc:	d1eb      	bne.n	8002dd6 <encode_uint+0x62>
			conv->altform_0c = true;
 8002dfe:	78ab      	ldrb	r3, [r5, #2]
 8002e00:	f043 0310 	orr.w	r3, r3, #16
 8002e04:	e7e6      	b.n	8002dd4 <encode_uint+0x60>
 8002e06:	bf00      	nop
 8002e08:	0800af6d 	.word	0x0800af6d

08002e0c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 8002e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e10:	4682      	mov	sl, r0
 8002e12:	b093      	sub	sp, #76	; 0x4c
 8002e14:	468b      	mov	fp, r1
 8002e16:	4691      	mov	r9, r2
 8002e18:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8002e1a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8002e1c:	f899 0000 	ldrb.w	r0, [r9]
 8002e20:	b908      	cbnz	r0, 8002e26 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 8002e22:	4628      	mov	r0, r5
 8002e24:	e33d      	b.n	80034a2 <cbvprintf+0x696>
			OUTC(*fp++);
 8002e26:	f109 0301 	add.w	r3, r9, #1
		if (*fp != '%') {
 8002e2a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 8002e2c:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
 8002e2e:	d006      	beq.n	8002e3e <cbvprintf+0x32>
			OUTC('%');
 8002e30:	4659      	mov	r1, fp
 8002e32:	47d0      	blx	sl
 8002e34:	2800      	cmp	r0, #0
 8002e36:	f2c0 8334 	blt.w	80034a2 <cbvprintf+0x696>
 8002e3a:	3501      	adds	r5, #1
			break;
 8002e3c:	e1f5      	b.n	800322a <cbvprintf+0x41e>
		} state = {
 8002e3e:	2218      	movs	r2, #24
 8002e40:	2100      	movs	r1, #0
 8002e42:	a80c      	add	r0, sp, #48	; 0x30
 8002e44:	f006 ff82 	bl	8009d4c <memset>
	if (*sp == '%') {
 8002e48:	f899 3001 	ldrb.w	r3, [r9, #1]
 8002e4c:	2b25      	cmp	r3, #37	; 0x25
 8002e4e:	d05a      	beq.n	8002f06 <cbvprintf+0xfa>
 8002e50:	f109 0201 	add.w	r2, r9, #1
 8002e54:	4616      	mov	r6, r2
		switch (*sp) {
 8002e56:	f812 3b01 	ldrb.w	r3, [r2], #1
 8002e5a:	2b2b      	cmp	r3, #43	; 0x2b
 8002e5c:	f000 808b 	beq.w	8002f76 <cbvprintf+0x16a>
 8002e60:	d879      	bhi.n	8002f56 <cbvprintf+0x14a>
 8002e62:	2b20      	cmp	r3, #32
 8002e64:	f000 808c 	beq.w	8002f80 <cbvprintf+0x174>
 8002e68:	2b23      	cmp	r3, #35	; 0x23
 8002e6a:	f000 808e 	beq.w	8002f8a <cbvprintf+0x17e>
	if (conv->flag_zero && conv->flag_dash) {
 8002e6e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8002e72:	f003 0244 	and.w	r2, r3, #68	; 0x44
 8002e76:	2a44      	cmp	r2, #68	; 0x44
 8002e78:	d103      	bne.n	8002e82 <cbvprintf+0x76>
		conv->flag_zero = false;
 8002e7a:	f36f 1386 	bfc	r3, #6, #1
 8002e7e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
 8002e82:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8002e86:	9605      	str	r6, [sp, #20]
 8002e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e8c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
 8002e90:	7833      	ldrb	r3, [r6, #0]
 8002e92:	2b2a      	cmp	r3, #42	; 0x2a
 8002e94:	d17e      	bne.n	8002f94 <cbvprintf+0x188>
		conv->width_star = true;
 8002e96:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
 8002ea2:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
 8002ea4:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
 8002ea6:	781a      	ldrb	r2, [r3, #0]
 8002ea8:	2a2e      	cmp	r2, #46	; 0x2e
 8002eaa:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8002eae:	bf0c      	ite	eq
 8002eb0:	2101      	moveq	r1, #1
 8002eb2:	2100      	movne	r1, #0
 8002eb4:	f361 0241 	bfi	r2, r1, #1, #1
 8002eb8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
 8002ebc:	d10b      	bne.n	8002ed6 <cbvprintf+0xca>
	++sp;
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
 8002ec2:	785a      	ldrb	r2, [r3, #1]
 8002ec4:	2a2a      	cmp	r2, #42	; 0x2a
 8002ec6:	d17b      	bne.n	8002fc0 <cbvprintf+0x1b4>
		conv->prec_star = true;
 8002ec8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8002ecc:	f042 0204 	orr.w	r2, r2, #4
 8002ed0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
 8002ed4:	3302      	adds	r3, #2
	switch (*sp) {
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	f811 0b01 	ldrb.w	r0, [r1], #1
 8002edc:	286c      	cmp	r0, #108	; 0x6c
 8002ede:	f000 80b6 	beq.w	800304e <cbvprintf+0x242>
 8002ee2:	d87d      	bhi.n	8002fe0 <cbvprintf+0x1d4>
 8002ee4:	2868      	cmp	r0, #104	; 0x68
 8002ee6:	f000 8084 	beq.w	8002ff2 <cbvprintf+0x1e6>
 8002eea:	286a      	cmp	r0, #106	; 0x6a
 8002eec:	f000 80b9 	beq.w	8003062 <cbvprintf+0x256>
 8002ef0:	284c      	cmp	r0, #76	; 0x4c
 8002ef2:	f000 80bd 	beq.w	8003070 <cbvprintf+0x264>
		conv->length_mod = LENGTH_NONE;
 8002ef6:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8002efa:	f36f 02c6 	bfc	r2, #3, #4
 8002efe:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
 8002f02:	4619      	mov	r1, r3
 8002f04:	e080      	b.n	8003008 <cbvprintf+0x1fc>
		conv->specifier = *sp++;
 8002f06:	f109 0202 	add.w	r2, r9, #2
 8002f0a:	9202      	str	r2, [sp, #8]
 8002f0c:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
 8002f10:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8002f14:	07d9      	lsls	r1, r3, #31
 8002f16:	f140 814a 	bpl.w	80031ae <cbvprintf+0x3a2>
			width = va_arg(ap, int);
 8002f1a:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
 8002f1e:	f1b8 0f00 	cmp.w	r8, #0
 8002f22:	da07      	bge.n	8002f34 <cbvprintf+0x128>
				conv->flag_dash = true;
 8002f24:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8002f28:	f042 0204 	orr.w	r2, r2, #4
 8002f2c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
 8002f30:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
 8002f34:	075a      	lsls	r2, r3, #29
 8002f36:	f140 8143 	bpl.w	80031c0 <cbvprintf+0x3b4>
			int arg = va_arg(ap, int);
 8002f3a:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
 8002f3e:	2f00      	cmp	r7, #0
 8002f40:	f280 8142 	bge.w	80031c8 <cbvprintf+0x3bc>
				conv->prec_present = false;
 8002f44:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8002f48:	f36f 0341 	bfc	r3, #1, #1
 8002f4c:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
 8002f50:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002f54:	e138      	b.n	80031c8 <cbvprintf+0x3bc>
		switch (*sp) {
 8002f56:	2b2d      	cmp	r3, #45	; 0x2d
 8002f58:	d006      	beq.n	8002f68 <cbvprintf+0x15c>
 8002f5a:	2b30      	cmp	r3, #48	; 0x30
 8002f5c:	d187      	bne.n	8002e6e <cbvprintf+0x62>
			conv->flag_zero = true;
 8002f5e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8002f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f66:	e003      	b.n	8002f70 <cbvprintf+0x164>
			conv->flag_dash = true;
 8002f68:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8002f6c:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
 8002f70:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
 8002f74:	e76e      	b.n	8002e54 <cbvprintf+0x48>
			conv->flag_plus = true;
 8002f76:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8002f7a:	f043 0308 	orr.w	r3, r3, #8
 8002f7e:	e7f7      	b.n	8002f70 <cbvprintf+0x164>
			conv->flag_space = true;
 8002f80:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8002f84:	f043 0310 	orr.w	r3, r3, #16
 8002f88:	e7f2      	b.n	8002f70 <cbvprintf+0x164>
			conv->flag_hash = true;
 8002f8a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8002f8e:	f043 0320 	orr.w	r3, r3, #32
 8002f92:	e7ed      	b.n	8002f70 <cbvprintf+0x164>
	size_t width = extract_decimal(&sp);
 8002f94:	a805      	add	r0, sp, #20
 8002f96:	f7ff fed9 	bl	8002d4c <extract_decimal>
	if (sp != wp) {
 8002f9a:	9b05      	ldr	r3, [sp, #20]
 8002f9c:	42b3      	cmp	r3, r6
 8002f9e:	d081      	beq.n	8002ea4 <cbvprintf+0x98>
		conv->unsupported |= ((conv->width_value < 0)
 8002fa0:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
 8002fa4:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
 8002fa6:	f3c1 0240 	ubfx	r2, r1, #1, #1
 8002faa:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
 8002fae:	0052      	lsls	r2, r2, #1
 8002fb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fb4:	f001 017d 	and.w	r1, r1, #125	; 0x7d
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 8002fbe:	e771      	b.n	8002ea4 <cbvprintf+0x98>
	size_t prec = extract_decimal(&sp);
 8002fc0:	a805      	add	r0, sp, #20
 8002fc2:	f7ff fec3 	bl	8002d4c <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
 8002fc6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
 8002fca:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
 8002fcc:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8002fd0:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
 8002fd4:	f360 0341 	bfi	r3, r0, #1, #1
 8002fd8:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
 8002fdc:	9b05      	ldr	r3, [sp, #20]
 8002fde:	e77a      	b.n	8002ed6 <cbvprintf+0xca>
	switch (*sp) {
 8002fe0:	2874      	cmp	r0, #116	; 0x74
 8002fe2:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8002fe6:	d040      	beq.n	800306a <cbvprintf+0x25e>
 8002fe8:	287a      	cmp	r0, #122	; 0x7a
 8002fea:	d184      	bne.n	8002ef6 <cbvprintf+0xea>
		conv->length_mod = LENGTH_Z;
 8002fec:	4613      	mov	r3, r2
 8002fee:	2206      	movs	r2, #6
 8002ff0:	e028      	b.n	8003044 <cbvprintf+0x238>
		if (*++sp == 'h') {
 8002ff2:	785a      	ldrb	r2, [r3, #1]
 8002ff4:	2a68      	cmp	r2, #104	; 0x68
 8002ff6:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8002ffa:	d121      	bne.n	8003040 <cbvprintf+0x234>
			conv->length_mod = LENGTH_HH;
 8002ffc:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 8002ffe:	f361 02c6 	bfi	r2, r1, #3, #4
 8003002:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
 8003006:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
 8003008:	460b      	mov	r3, r1
 800300a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800300e:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
 8003010:	2a78      	cmp	r2, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
 8003012:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	conv->specifier = *sp++;
 8003016:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
 800301a:	f200 80c0 	bhi.w	800319e <cbvprintf+0x392>
 800301e:	2a57      	cmp	r2, #87	; 0x57
 8003020:	d833      	bhi.n	800308a <cbvprintf+0x27e>
 8003022:	2a41      	cmp	r2, #65	; 0x41
 8003024:	d003      	beq.n	800302e <cbvprintf+0x222>
 8003026:	3a45      	subs	r2, #69	; 0x45
 8003028:	2a02      	cmp	r2, #2
 800302a:	f200 80b8 	bhi.w	800319e <cbvprintf+0x392>
		conv->specifier_cat = SPECIFIER_FP;
 800302e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8003032:	2204      	movs	r2, #4
 8003034:	f362 0302 	bfi	r3, r2, #0, #3
 8003038:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
 800303c:	2301      	movs	r3, #1
			break;
 800303e:	e085      	b.n	800314c <cbvprintf+0x340>
			conv->length_mod = LENGTH_H;
 8003040:	4613      	mov	r3, r2
 8003042:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
 8003044:	f362 03c6 	bfi	r3, r2, #3, #4
 8003048:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 800304c:	e7dc      	b.n	8003008 <cbvprintf+0x1fc>
		if (*++sp == 'l') {
 800304e:	785a      	ldrb	r2, [r3, #1]
 8003050:	2a6c      	cmp	r2, #108	; 0x6c
 8003052:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8003056:	d101      	bne.n	800305c <cbvprintf+0x250>
			conv->length_mod = LENGTH_LL;
 8003058:	2104      	movs	r1, #4
 800305a:	e7d0      	b.n	8002ffe <cbvprintf+0x1f2>
			conv->length_mod = LENGTH_L;
 800305c:	4613      	mov	r3, r2
 800305e:	2203      	movs	r2, #3
 8003060:	e7f0      	b.n	8003044 <cbvprintf+0x238>
		conv->length_mod = LENGTH_J;
 8003062:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8003066:	2205      	movs	r2, #5
 8003068:	e7ec      	b.n	8003044 <cbvprintf+0x238>
		conv->length_mod = LENGTH_T;
 800306a:	4613      	mov	r3, r2
 800306c:	2207      	movs	r2, #7
 800306e:	e7e9      	b.n	8003044 <cbvprintf+0x238>
		conv->unsupported = true;
 8003070:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8003074:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8003078:	f023 0302 	bic.w	r3, r3, #2
 800307c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003080:	f043 0302 	orr.w	r3, r3, #2
 8003084:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
 8003088:	e7be      	b.n	8003008 <cbvprintf+0x1fc>
	switch (conv->specifier) {
 800308a:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
 800308e:	2920      	cmp	r1, #32
 8003090:	f200 8085 	bhi.w	800319e <cbvprintf+0x392>
 8003094:	a001      	add	r0, pc, #4	; (adr r0, 800309c <cbvprintf+0x290>)
 8003096:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800309a:	bf00      	nop
 800309c:	08003161 	.word	0x08003161
 80030a0:	0800319f 	.word	0x0800319f
 80030a4:	0800319f 	.word	0x0800319f
 80030a8:	0800319f 	.word	0x0800319f
 80030ac:	0800319f 	.word	0x0800319f
 80030b0:	0800319f 	.word	0x0800319f
 80030b4:	0800319f 	.word	0x0800319f
 80030b8:	0800319f 	.word	0x0800319f
 80030bc:	0800319f 	.word	0x0800319f
 80030c0:	0800302f 	.word	0x0800302f
 80030c4:	0800319f 	.word	0x0800319f
 80030c8:	08003161 	.word	0x08003161
 80030cc:	08003121 	.word	0x08003121
 80030d0:	0800302f 	.word	0x0800302f
 80030d4:	0800302f 	.word	0x0800302f
 80030d8:	0800302f 	.word	0x0800302f
 80030dc:	0800319f 	.word	0x0800319f
 80030e0:	08003121 	.word	0x08003121
 80030e4:	0800319f 	.word	0x0800319f
 80030e8:	0800319f 	.word	0x0800319f
 80030ec:	0800319f 	.word	0x0800319f
 80030f0:	0800319f 	.word	0x0800319f
 80030f4:	08003169 	.word	0x08003169
 80030f8:	08003161 	.word	0x08003161
 80030fc:	08003185 	.word	0x08003185
 8003100:	0800319f 	.word	0x0800319f
 8003104:	0800319f 	.word	0x0800319f
 8003108:	08003185 	.word	0x08003185
 800310c:	0800319f 	.word	0x0800319f
 8003110:	08003161 	.word	0x08003161
 8003114:	0800319f 	.word	0x0800319f
 8003118:	0800319f 	.word	0x0800319f
 800311c:	08003161 	.word	0x08003161
		conv->specifier_cat = SPECIFIER_SINT;
 8003120:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
 8003124:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
 8003126:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 800312a:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 800312e:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 8003130:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
 8003134:	bf02      	ittt	eq
 8003136:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
 800313a:	f041 0101 	orreq.w	r1, r1, #1
 800313e:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
 8003142:	2a63      	cmp	r2, #99	; 0x63
 8003144:	d131      	bne.n	80031aa <cbvprintf+0x39e>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8003146:	3b00      	subs	r3, #0
 8003148:	bf18      	it	ne
 800314a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 800314c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8003150:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8003154:	430b      	orrs	r3, r1
 8003156:	f363 0241 	bfi	r2, r3, #1, #1
 800315a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
 800315e:	e6d7      	b.n	8002f10 <cbvprintf+0x104>
		conv->specifier_cat = SPECIFIER_UINT;
 8003160:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
 8003164:	2002      	movs	r0, #2
 8003166:	e7de      	b.n	8003126 <cbvprintf+0x31a>
		conv->specifier_cat = SPECIFIER_PTR;
 8003168:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
 800316c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8003170:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
 8003174:	2103      	movs	r1, #3
 8003176:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 800317a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
 800317c:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
 8003180:	4143      	adcs	r3, r0
 8003182:	e7e3      	b.n	800314c <cbvprintf+0x340>
		conv->specifier_cat = SPECIFIER_PTR;
 8003184:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8003188:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
 800318a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 800318e:	f361 0202 	bfi	r2, r1, #0, #3
 8003192:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
 8003196:	bf14      	ite	ne
 8003198:	2301      	movne	r3, #1
 800319a:	2300      	moveq	r3, #0
 800319c:	e7d6      	b.n	800314c <cbvprintf+0x340>
		conv->invalid = true;
 800319e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80031a2:	f043 0301 	orr.w	r3, r3, #1
 80031a6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
 80031aa:	2300      	movs	r3, #0
 80031ac:	e7ce      	b.n	800314c <cbvprintf+0x340>
		} else if (conv->width_present) {
 80031ae:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
 80031b2:	2a00      	cmp	r2, #0
			width = conv->width_value;
 80031b4:	bfb4      	ite	lt
 80031b6:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
 80031ba:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
 80031be:	e6b9      	b.n	8002f34 <cbvprintf+0x128>
		} else if (conv->prec_present) {
 80031c0:	079f      	lsls	r7, r3, #30
 80031c2:	f57f aec5 	bpl.w	8002f50 <cbvprintf+0x144>
			precision = conv->prec_value;
 80031c6:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
 80031c8:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->pad0_value = 0;
 80031cc:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 80031ce:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
 80031d2:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
 80031d6:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 80031da:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 80031dc:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 80031e0:	d139      	bne.n	8003256 <cbvprintf+0x44a>
			switch (length_mod) {
 80031e2:	1ecb      	subs	r3, r1, #3
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d823      	bhi.n	8003230 <cbvprintf+0x424>
 80031e8:	e8df f003 	tbb	[pc, r3]
 80031ec:	22090903 	.word	0x22090903
 80031f0:	22          	.byte	0x22
 80031f1:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
 80031f2:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
 80031f6:	17da      	asrs	r2, r3, #31
 80031f8:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
 80031fc:	e006      	b.n	800320c <cbvprintf+0x400>
					(sint_value_type)va_arg(ap, intmax_t);
 80031fe:	3407      	adds	r4, #7
 8003200:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
 8003204:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8003208:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
 800320c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8003210:	f013 0603 	ands.w	r6, r3, #3
 8003214:	d057      	beq.n	80032c6 <cbvprintf+0x4ba>
			OUTS(sp, fp);
 8003216:	9b02      	ldr	r3, [sp, #8]
 8003218:	464a      	mov	r2, r9
 800321a:	4659      	mov	r1, fp
 800321c:	4650      	mov	r0, sl
 800321e:	f005 f938 	bl	8008492 <outs>
 8003222:	2800      	cmp	r0, #0
 8003224:	f2c0 813d 	blt.w	80034a2 <cbvprintf+0x696>
 8003228:	4405      	add	r5, r0
			OUTS(bps, bpe);
 800322a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800322e:	e5f5      	b.n	8002e1c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8003230:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8003234:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8003236:	ea4f 72e3 	mov.w	r2, r3, asr #31
 800323a:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
 800323e:	d105      	bne.n	800324c <cbvprintf+0x440>
				value->uint = (unsigned char)value->uint;
 8003240:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
 8003244:	930c      	str	r3, [sp, #48]	; 0x30
 8003246:	2300      	movs	r3, #0
 8003248:	930d      	str	r3, [sp, #52]	; 0x34
 800324a:	e7df      	b.n	800320c <cbvprintf+0x400>
			} else if (length_mod == LENGTH_H) {
 800324c:	2902      	cmp	r1, #2
 800324e:	d1dd      	bne.n	800320c <cbvprintf+0x400>
				value->sint = (short)value->sint;
 8003250:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8003254:	e7cf      	b.n	80031f6 <cbvprintf+0x3ea>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8003256:	2b02      	cmp	r3, #2
 8003258:	d123      	bne.n	80032a2 <cbvprintf+0x496>
			switch (length_mod) {
 800325a:	1ecb      	subs	r3, r1, #3
 800325c:	2b04      	cmp	r3, #4
 800325e:	d813      	bhi.n	8003288 <cbvprintf+0x47c>
 8003260:	e8df f003 	tbb	[pc, r3]
 8003264:	120a0a03 	.word	0x120a0a03
 8003268:	12          	.byte	0x12
 8003269:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
 800326a:	6822      	ldr	r2, [r4, #0]
 800326c:	920c      	str	r2, [sp, #48]	; 0x30
 800326e:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
 8003270:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
 8003272:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
 8003274:	4604      	mov	r4, r0
 8003276:	e7c9      	b.n	800320c <cbvprintf+0x400>
					(uint_value_type)va_arg(ap,
 8003278:	1de0      	adds	r0, r4, #7
 800327a:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
 800327e:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 8003282:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
 8003286:	e7f5      	b.n	8003274 <cbvprintf+0x468>
					(uint_value_type)va_arg(ap, size_t);
 8003288:	f854 3b04 	ldr.w	r3, [r4], #4
 800328c:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
 800328e:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
 8003296:	d0d3      	beq.n	8003240 <cbvprintf+0x434>
			} else if (length_mod == LENGTH_H) {
 8003298:	2902      	cmp	r1, #2
 800329a:	d1b7      	bne.n	800320c <cbvprintf+0x400>
				value->uint = (unsigned short)value->uint;
 800329c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80032a0:	e7d0      	b.n	8003244 <cbvprintf+0x438>
		} else if (specifier_cat == SPECIFIER_FP) {
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d109      	bne.n	80032ba <cbvprintf+0x4ae>
					(sint_value_type)va_arg(ap, long long);
 80032a6:	1de3      	adds	r3, r4, #7
 80032a8:	f023 0307 	bic.w	r3, r3, #7
 80032ac:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
 80032b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80032b8:	e7a8      	b.n	800320c <cbvprintf+0x400>
		} else if (specifier_cat == SPECIFIER_PTR) {
 80032ba:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
 80032bc:	bf04      	itt	eq
 80032be:	f854 3b04 	ldreq.w	r3, [r4], #4
 80032c2:	930c      	streq	r3, [sp, #48]	; 0x30
 80032c4:	e7a2      	b.n	800320c <cbvprintf+0x400>
		switch (conv->specifier) {
 80032c6:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 80032ca:	2878      	cmp	r0, #120	; 0x78
 80032cc:	d8ad      	bhi.n	800322a <cbvprintf+0x41e>
 80032ce:	2862      	cmp	r0, #98	; 0x62
 80032d0:	d820      	bhi.n	8003314 <cbvprintf+0x508>
 80032d2:	2825      	cmp	r0, #37	; 0x25
 80032d4:	f43f adac 	beq.w	8002e30 <cbvprintf+0x24>
 80032d8:	2858      	cmp	r0, #88	; 0x58
 80032da:	d1a6      	bne.n	800322a <cbvprintf+0x41e>
			bps = encode_uint(value->uint, conv, buf, bpe);
 80032dc:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80032e6:	ab06      	add	r3, sp, #24
 80032e8:	aa0e      	add	r2, sp, #56	; 0x38
 80032ea:	f7ff fd43 	bl	8002d74 <encode_uint>
 80032ee:	4681      	mov	r9, r0
			if (precision >= 0) {
 80032f0:	2f00      	cmp	r7, #0
 80032f2:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
 80032f6:	db0b      	blt.n	8003310 <cbvprintf+0x504>
				conv->flag_zero = false;
 80032f8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
 80032fc:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
 8003300:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8003304:	429f      	cmp	r7, r3
				conv->flag_zero = false;
 8003306:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
 800330a:	d901      	bls.n	8003310 <cbvprintf+0x504>
					conv->pad0_value = precision - (int)len;
 800330c:	1afb      	subs	r3, r7, r3
 800330e:	930f      	str	r3, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
 8003310:	4607      	mov	r7, r0
 8003312:	e03c      	b.n	800338e <cbvprintf+0x582>
		switch (conv->specifier) {
 8003314:	3863      	subs	r0, #99	; 0x63
 8003316:	2815      	cmp	r0, #21
 8003318:	d887      	bhi.n	800322a <cbvprintf+0x41e>
 800331a:	a201      	add	r2, pc, #4	; (adr r2, 8003320 <cbvprintf+0x514>)
 800331c:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8003320:	0800339f 	.word	0x0800339f
 8003324:	08003401 	.word	0x08003401
 8003328:	0800322b 	.word	0x0800322b
 800332c:	0800322b 	.word	0x0800322b
 8003330:	0800322b 	.word	0x0800322b
 8003334:	0800322b 	.word	0x0800322b
 8003338:	08003401 	.word	0x08003401
 800333c:	0800322b 	.word	0x0800322b
 8003340:	0800322b 	.word	0x0800322b
 8003344:	0800322b 	.word	0x0800322b
 8003348:	0800322b 	.word	0x0800322b
 800334c:	0800345b 	.word	0x0800345b
 8003350:	08003429 	.word	0x08003429
 8003354:	0800342d 	.word	0x0800342d
 8003358:	0800322b 	.word	0x0800322b
 800335c:	0800322b 	.word	0x0800322b
 8003360:	08003379 	.word	0x08003379
 8003364:	0800322b 	.word	0x0800322b
 8003368:	08003429 	.word	0x08003429
 800336c:	0800322b 	.word	0x0800322b
 8003370:	0800322b 	.word	0x0800322b
 8003374:	08003429 	.word	0x08003429
			if (precision >= 0) {
 8003378:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
 800337a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
 800337e:	db0a      	blt.n	8003396 <cbvprintf+0x58a>
				len = strnlen(bps, precision);
 8003380:	4639      	mov	r1, r7
 8003382:	4648      	mov	r0, r9
 8003384:	f006 fd06 	bl	8009d94 <strnlen>
			bpe = bps + len;
 8003388:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
 800338c:	2600      	movs	r6, #0
		if (bps == NULL) {
 800338e:	f1b9 0f00 	cmp.w	r9, #0
 8003392:	d10c      	bne.n	80033ae <cbvprintf+0x5a2>
 8003394:	e749      	b.n	800322a <cbvprintf+0x41e>
				len = strlen(bps);
 8003396:	4648      	mov	r0, r9
 8003398:	f7fd fd5b 	bl	8000e52 <strlen>
 800339c:	e7f4      	b.n	8003388 <cbvprintf+0x57c>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 800339e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80033a0:	f88d 3018 	strb.w	r3, [sp, #24]
			break;
 80033a4:	2600      	movs	r6, #0
			bpe = buf + 1;
 80033a6:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
 80033aa:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
 80033ae:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
 80033b2:	b106      	cbz	r6, 80033b6 <cbvprintf+0x5aa>
			nj_len += 1U;
 80033b4:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 80033b6:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 80033ba:	06d0      	lsls	r0, r2, #27
 80033bc:	d566      	bpl.n	800348c <cbvprintf+0x680>
			nj_len += 2U;
 80033be:	3302      	adds	r3, #2
		if (conv->pad_fp) {
 80033c0:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
 80033c2:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
 80033c4:	bf48      	it	mi
 80033c6:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
 80033c8:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
 80033ca:	bf48      	it	mi
 80033cc:	189b      	addmi	r3, r3, r2
		if (width > 0) {
 80033ce:	f1b8 0f00 	cmp.w	r8, #0
 80033d2:	dd73      	ble.n	80034bc <cbvprintf+0x6b0>
			if (!conv->flag_dash) {
 80033d4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
 80033d8:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
 80033dc:	f3c2 0380 	ubfx	r3, r2, #2, #1
 80033e0:	9303      	str	r3, [sp, #12]
 80033e2:	0753      	lsls	r3, r2, #29
 80033e4:	d46a      	bmi.n	80034bc <cbvprintf+0x6b0>
				if (conv->flag_zero) {
 80033e6:	0650      	lsls	r0, r2, #25
 80033e8:	d55e      	bpl.n	80034a8 <cbvprintf+0x69c>
					if (sign != 0) {
 80033ea:	b13e      	cbz	r6, 80033fc <cbvprintf+0x5f0>
						OUTC(sign);
 80033ec:	4659      	mov	r1, fp
 80033ee:	4630      	mov	r0, r6
 80033f0:	47d0      	blx	sl
 80033f2:	2800      	cmp	r0, #0
 80033f4:	db55      	blt.n	80034a2 <cbvprintf+0x696>
						sign = 0;
 80033f6:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
 80033f8:	3501      	adds	r5, #1
						sign = 0;
 80033fa:	461e      	mov	r6, r3
					pad = '0';
 80033fc:	2330      	movs	r3, #48	; 0x30
 80033fe:	e054      	b.n	80034aa <cbvprintf+0x69e>
			if (conv->flag_plus) {
 8003400:	071e      	lsls	r6, r3, #28
 8003402:	d40f      	bmi.n	8003424 <cbvprintf+0x618>
				sign = ' ';
 8003404:	f013 0610 	ands.w	r6, r3, #16
 8003408:	bf18      	it	ne
 800340a:	2620      	movne	r6, #32
			sint = value->sint;
 800340c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
 8003410:	2b00      	cmp	r3, #0
 8003412:	f6bf af63 	bge.w	80032dc <cbvprintf+0x4d0>
				value->uint = (uint_value_type)-sint;
 8003416:	4252      	negs	r2, r2
 8003418:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800341c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
 8003420:	262d      	movs	r6, #45	; 0x2d
 8003422:	e75b      	b.n	80032dc <cbvprintf+0x4d0>
				sign = '+';
 8003424:	262b      	movs	r6, #43	; 0x2b
 8003426:	e7f1      	b.n	800340c <cbvprintf+0x600>
		switch (conv->specifier) {
 8003428:	2600      	movs	r6, #0
 800342a:	e757      	b.n	80032dc <cbvprintf+0x4d0>
			if (value->ptr != NULL) {
 800342c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800342e:	b340      	cbz	r0, 8003482 <cbvprintf+0x676>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8003430:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	aa0e      	add	r2, sp, #56	; 0x38
 8003438:	ab06      	add	r3, sp, #24
 800343a:	2100      	movs	r1, #0
 800343c:	f7ff fc9a 	bl	8002d74 <encode_uint>
				conv->altform_0c = true;
 8003440:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8003444:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8003448:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 800344c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8003450:	4681      	mov	r9, r0
				conv->altform_0c = true;
 8003452:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
 8003456:	2600      	movs	r6, #0
				goto prec_int_pad0;
 8003458:	e74a      	b.n	80032f0 <cbvprintf+0x4e4>
				store_count(conv, value->ptr, count);
 800345a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
 800345c:	2907      	cmp	r1, #7
 800345e:	f63f aee4 	bhi.w	800322a <cbvprintf+0x41e>
 8003462:	e8df f001 	tbb	[pc, r1]
 8003466:	040c      	.short	0x040c
 8003468:	08080c06 	.word	0x08080c06
 800346c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
 800346e:	701d      	strb	r5, [r3, #0]
		break;
 8003470:	e6db      	b.n	800322a <cbvprintf+0x41e>
		*(short *)dp = (short)count;
 8003472:	801d      	strh	r5, [r3, #0]
		break;
 8003474:	e6d9      	b.n	800322a <cbvprintf+0x41e>
		*(intmax_t *)dp = (intmax_t)count;
 8003476:	17ea      	asrs	r2, r5, #31
 8003478:	e9c3 5200 	strd	r5, r2, [r3]
		break;
 800347c:	e6d5      	b.n	800322a <cbvprintf+0x41e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 800347e:	601d      	str	r5, [r3, #0]
		break;
 8003480:	e6d3      	b.n	800322a <cbvprintf+0x41e>
			bpe = bps + 5;
 8003482:	4f2e      	ldr	r7, [pc, #184]	; (800353c <cbvprintf+0x730>)
 8003484:	4606      	mov	r6, r0
			bps = "(nil)";
 8003486:	f1a7 0905 	sub.w	r9, r7, #5
 800348a:	e790      	b.n	80033ae <cbvprintf+0x5a2>
		} else if (conv->altform_0) {
 800348c:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
 800348e:	bf48      	it	mi
 8003490:	3301      	addmi	r3, #1
 8003492:	e795      	b.n	80033c0 <cbvprintf+0x5b4>
					OUTC(pad);
 8003494:	4618      	mov	r0, r3
 8003496:	4659      	mov	r1, fp
 8003498:	9303      	str	r3, [sp, #12]
 800349a:	47d0      	blx	sl
 800349c:	2800      	cmp	r0, #0
 800349e:	9b03      	ldr	r3, [sp, #12]
 80034a0:	da04      	bge.n	80034ac <cbvprintf+0x6a0>
#undef OUTS
#undef OUTC
}
 80034a2:	b013      	add	sp, #76	; 0x4c
 80034a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 80034a8:	2320      	movs	r3, #32
 80034aa:	4445      	add	r5, r8
 80034ac:	4642      	mov	r2, r8
				while (width-- > 0) {
 80034ae:	2a00      	cmp	r2, #0
 80034b0:	eba5 0108 	sub.w	r1, r5, r8
 80034b4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80034b8:	dcec      	bgt.n	8003494 <cbvprintf+0x688>
 80034ba:	460d      	mov	r5, r1
		if (sign != 0) {
 80034bc:	b12e      	cbz	r6, 80034ca <cbvprintf+0x6be>
			OUTC(sign);
 80034be:	4659      	mov	r1, fp
 80034c0:	4630      	mov	r0, r6
 80034c2:	47d0      	blx	sl
 80034c4:	2800      	cmp	r0, #0
 80034c6:	dbec      	blt.n	80034a2 <cbvprintf+0x696>
 80034c8:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 80034ca:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80034ce:	06d9      	lsls	r1, r3, #27
 80034d0:	d401      	bmi.n	80034d6 <cbvprintf+0x6ca>
 80034d2:	071a      	lsls	r2, r3, #28
 80034d4:	d505      	bpl.n	80034e2 <cbvprintf+0x6d6>
				OUTC('0');
 80034d6:	4659      	mov	r1, fp
 80034d8:	2030      	movs	r0, #48	; 0x30
 80034da:	47d0      	blx	sl
 80034dc:	2800      	cmp	r0, #0
 80034de:	dbe0      	blt.n	80034a2 <cbvprintf+0x696>
 80034e0:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 80034e2:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80034e6:	06db      	lsls	r3, r3, #27
 80034e8:	d506      	bpl.n	80034f8 <cbvprintf+0x6ec>
				OUTC(conv->specifier);
 80034ea:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 80034ee:	4659      	mov	r1, fp
 80034f0:	47d0      	blx	sl
 80034f2:	2800      	cmp	r0, #0
 80034f4:	dbd5      	blt.n	80034a2 <cbvprintf+0x696>
 80034f6:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 80034f8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80034fa:	442e      	add	r6, r5
 80034fc:	1b73      	subs	r3, r6, r5
 80034fe:	2b00      	cmp	r3, #0
 8003500:	dc15      	bgt.n	800352e <cbvprintf+0x722>
			OUTS(bps, bpe);
 8003502:	463b      	mov	r3, r7
 8003504:	464a      	mov	r2, r9
 8003506:	4659      	mov	r1, fp
 8003508:	4650      	mov	r0, sl
 800350a:	f004 ffc2 	bl	8008492 <outs>
 800350e:	2800      	cmp	r0, #0
 8003510:	dbc7      	blt.n	80034a2 <cbvprintf+0x696>
 8003512:	4405      	add	r5, r0
		while (width > 0) {
 8003514:	44a8      	add	r8, r5
 8003516:	eba8 0305 	sub.w	r3, r8, r5
 800351a:	2b00      	cmp	r3, #0
 800351c:	f77f ae85 	ble.w	800322a <cbvprintf+0x41e>
			OUTC(' ');
 8003520:	4659      	mov	r1, fp
 8003522:	2020      	movs	r0, #32
 8003524:	47d0      	blx	sl
 8003526:	2800      	cmp	r0, #0
 8003528:	dbbb      	blt.n	80034a2 <cbvprintf+0x696>
 800352a:	3501      	adds	r5, #1
			--width;
 800352c:	e7f3      	b.n	8003516 <cbvprintf+0x70a>
				OUTC('0');
 800352e:	4659      	mov	r1, fp
 8003530:	2030      	movs	r0, #48	; 0x30
 8003532:	47d0      	blx	sl
 8003534:	2800      	cmp	r0, #0
 8003536:	dbb4      	blt.n	80034a2 <cbvprintf+0x696>
 8003538:	3501      	adds	r5, #1
 800353a:	e7df      	b.n	80034fc <cbvprintf+0x6f0>
 800353c:	0800ae28 	.word	0x0800ae28

08003540 <stm32l4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8003540:	f04f 0210 	mov.w	r2, #16
 8003544:	f3ef 8311 	mrs	r3, BASEPRI
 8003548:	f382 8812 	msr	BASEPRI_MAX, r2
 800354c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 8003558:	4b02      	ldr	r3, [pc, #8]	; (8003564 <stm32l4_init+0x24>)
 800355a:	4a03      	ldr	r2, [pc, #12]	; (8003568 <stm32l4_init+0x28>)
 800355c:	601a      	str	r2, [r3, #0]

	return 0;
}
 800355e:	2000      	movs	r0, #0
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	20000168 	.word	0x20000168
 8003568:	003d0900 	.word	0x003d0900

0800356c <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
 800356c:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <class_handler+0x34>)
{
 800356e:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
 8003570:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 8003572:	4e0c      	ldr	r6, [pc, #48]	; (80035a4 <class_handler+0x38>)
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <class_handler+0x3c>)
 8003576:	42b3      	cmp	r3, r6
 8003578:	d303      	bcc.n	8003582 <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
 800357a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800357e:	bcf0      	pop	{r4, r5, r6, r7}
 8003580:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
 8003582:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
 8003584:	42bd      	cmp	r5, r7
 8003586:	d309      	bcc.n	800359c <class_handler+0x30>
		if (iface->class_handler &&
 8003588:	691c      	ldr	r4, [r3, #16]
 800358a:	b13c      	cbz	r4, 800359c <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
 800358c:	f895 c002 	ldrb.w	ip, [r5, #2]
 8003590:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
 8003592:	45ac      	cmp	ip, r5
 8003594:	d102      	bne.n	800359c <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
 8003596:	4623      	mov	r3, r4
}
 8003598:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
 800359a:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 800359c:	3324      	adds	r3, #36	; 0x24
 800359e:	e7ea      	b.n	8003576 <class_handler+0xa>
 80035a0:	200005f4 	.word	0x200005f4
 80035a4:	20000324 	.word	0x20000324
 80035a8:	20000300 	.word	0x20000300

080035ac <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
 80035ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 80035b0:	4c13      	ldr	r4, [pc, #76]	; (8003600 <custom_handler+0x54>)
 80035b2:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8003604 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
 80035b6:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8003608 <custom_handler+0x5c>
{
 80035ba:	4605      	mov	r5, r0
 80035bc:	460e      	mov	r6, r1
 80035be:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 80035c0:	4544      	cmp	r4, r8
 80035c2:	d303      	bcc.n	80035cc <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
 80035c4:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80035c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
 80035cc:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
 80035ce:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d312      	bcc.n	80035fc <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
 80035d6:	69a3      	ldr	r3, [r4, #24]
 80035d8:	b183      	cbz	r3, 80035fc <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
 80035da:	7890      	ldrb	r0, [r2, #2]
 80035dc:	7929      	ldrb	r1, [r5, #4]
 80035de:	4288      	cmp	r0, r1
 80035e0:	d105      	bne.n	80035ee <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
 80035e2:	463a      	mov	r2, r7
 80035e4:	4631      	mov	r1, r6
 80035e6:	4628      	mov	r0, r5
}
 80035e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
 80035ec:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
 80035ee:	7952      	ldrb	r2, [r2, #5]
 80035f0:	2a01      	cmp	r2, #1
 80035f2:	d103      	bne.n	80035fc <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
 80035f4:	463a      	mov	r2, r7
 80035f6:	4631      	mov	r1, r6
 80035f8:	4628      	mov	r0, r5
 80035fa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 80035fc:	3424      	adds	r4, #36	; 0x24
 80035fe:	e7df      	b.n	80035c0 <custom_handler+0x14>
 8003600:	20000300 	.word	0x20000300
 8003604:	20000324 	.word	0x20000324
 8003608:	200005f4 	.word	0x200005f4

0800360c <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
 800360c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 8003610:	4c0b      	ldr	r4, [pc, #44]	; (8003640 <vendor_handler+0x34>)
 8003612:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8003644 <vendor_handler+0x38>
{
 8003616:	4605      	mov	r5, r0
 8003618:	460e      	mov	r6, r1
 800361a:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 800361c:	4544      	cmp	r4, r8
 800361e:	d302      	bcc.n	8003626 <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
 8003620:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8003624:	e009      	b.n	800363a <vendor_handler+0x2e>
		if (iface->vendor_handler) {
 8003626:	6963      	ldr	r3, [r4, #20]
 8003628:	b90b      	cbnz	r3, 800362e <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 800362a:	3424      	adds	r4, #36	; 0x24
 800362c:	e7f6      	b.n	800361c <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
 800362e:	463a      	mov	r2, r7
 8003630:	4631      	mov	r1, r6
 8003632:	4628      	mov	r0, r5
 8003634:	4798      	blx	r3
 8003636:	2800      	cmp	r0, #0
 8003638:	d1f7      	bne.n	800362a <vendor_handler+0x1e>
}
 800363a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800363e:	bf00      	nop
 8003640:	20000300 	.word	0x20000300
 8003644:	20000324 	.word	0x20000324

08003648 <set_endpoint>:
{
 8003648:	b507      	push	{r0, r1, r2, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
 800364a:	7883      	ldrb	r3, [r0, #2]
 800364c:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
 8003650:	7903      	ldrb	r3, [r0, #4]
 8003652:	7942      	ldrb	r2, [r0, #5]
 8003654:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003658:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
 800365c:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
 800365e:	4668      	mov	r0, sp
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
 8003660:	f003 0303 	and.w	r3, r3, #3
 8003664:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
 8003668:	f005 f990 	bl	800898c <usb_dc_ep_configure>
	if (ret == -EALREADY) {
 800366c:	f110 0f78 	cmn.w	r0, #120	; 0x78
 8003670:	d004      	beq.n	800367c <set_endpoint+0x34>
	} else if (ret) {
 8003672:	b118      	cbz	r0, 800367c <set_endpoint+0x34>
		return false;
 8003674:	2000      	movs	r0, #0
}
 8003676:	b003      	add	sp, #12
 8003678:	f85d fb04 	ldr.w	pc, [sp], #4
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
 800367c:	f89d 0000 	ldrb.w	r0, [sp]
 8003680:	f001 fd4c 	bl	800511c <usb_dc_ep_enable>
	if (ret == -EALREADY) {
 8003684:	f110 0f78 	cmn.w	r0, #120	; 0x78
 8003688:	d001      	beq.n	800368e <set_endpoint+0x46>
	} else if (ret) {
 800368a:	2800      	cmp	r0, #0
 800368c:	d1f2      	bne.n	8003674 <set_endpoint+0x2c>
	usb_dev.configured = true;
 800368e:	4b02      	ldr	r3, [pc, #8]	; (8003698 <set_endpoint+0x50>)
 8003690:	2001      	movs	r0, #1
 8003692:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
 8003696:	e7ee      	b.n	8003676 <set_endpoint+0x2e>
 8003698:	200005f4 	.word	0x200005f4

0800369c <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
 800369c:	4b03      	ldr	r3, [pc, #12]	; (80036ac <usb_reset_alt_setting+0x10>)
 800369e:	2200      	movs	r2, #0
 80036a0:	f8c3 20bb 	str.w	r2, [r3, #187]	; 0xbb
 80036a4:	f8c3 20bf 	str.w	r2, [r3, #191]	; 0xbf
}
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	200005f4 	.word	0x200005f4

080036b0 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
 80036b0:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 80036b2:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <is_ep_valid.part.0+0x30>)
 80036b4:	4c0b      	ldr	r4, [pc, #44]	; (80036e4 <is_ep_valid.part.0+0x34>)
 80036b6:	42a3      	cmp	r3, r4
 80036b8:	d301      	bcc.n	80036be <is_ep_valid.part.0+0xe>
	return false;
 80036ba:	2000      	movs	r0, #0
}
 80036bc:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
 80036be:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
 80036c0:	7f1e      	ldrb	r6, [r3, #28]
 80036c2:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
 80036c4:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
 80036c6:	b2d5      	uxtb	r5, r2
 80036c8:	42ae      	cmp	r6, r5
 80036ca:	d801      	bhi.n	80036d0 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 80036cc:	3324      	adds	r3, #36	; 0x24
 80036ce:	e7f2      	b.n	80036b6 <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
 80036d0:	3201      	adds	r2, #1
 80036d2:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
 80036d6:	4285      	cmp	r5, r0
 80036d8:	d1f5      	bne.n	80036c6 <is_ep_valid.part.0+0x16>
				return true;
 80036da:	2001      	movs	r0, #1
 80036dc:	e7ee      	b.n	80036bc <is_ep_valid.part.0+0xc>
 80036de:	bf00      	nop
 80036e0:	20000300 	.word	0x20000300
 80036e4:	20000324 	.word	0x20000324

080036e8 <usb_handle_request.constprop.0>:
	handler = usb_dev.req_handlers[type];
 80036e8:	4809      	ldr	r0, [pc, #36]	; (8003710 <usb_handle_request.constprop.0+0x28>)
static bool usb_handle_request(struct usb_setup_packet *setup,
 80036ea:	b508      	push	{r3, lr}
	uint32_t type = setup->RequestType.type;
 80036ec:	7803      	ldrb	r3, [r0, #0]
 80036ee:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
 80036f2:	330a      	adds	r3, #10
 80036f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
 80036f8:	b13b      	cbz	r3, 800370a <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
 80036fa:	f100 0208 	add.w	r2, r0, #8
 80036fe:	f100 0110 	add.w	r1, r0, #16
 8003702:	4798      	blx	r3
 8003704:	43c0      	mvns	r0, r0
 8003706:	0fc0      	lsrs	r0, r0, #31
}
 8003708:	bd08      	pop	{r3, pc}
		return false;
 800370a:	4618      	mov	r0, r3
 800370c:	e7fc      	b.n	8003708 <usb_handle_request.constprop.0+0x20>
 800370e:	bf00      	nop
 8003710:	200005f4 	.word	0x200005f4

08003714 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
 8003714:	2804      	cmp	r0, #4
{
 8003716:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800371a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80037a4 <forward_status_cb+0x90>
 800371e:	4604      	mov	r4, r0
 8003720:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
 8003722:	d10e      	bne.n	8003742 <forward_status_cb+0x2e>
		usb_reset_alt_setting();
 8003724:	f7ff ffba 	bl	800369c <usb_reset_alt_setting>
		if (usb_dev.configured) {
 8003728:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80037a8 <forward_status_cb+0x94>
 800372c:	f899 30b9 	ldrb.w	r3, [r9, #185]	; 0xb9
 8003730:	b15b      	cbz	r3, 800374a <forward_status_cb+0x36>
			usb_cancel_transfers();
 8003732:	f000 fd87 	bl	8004244 <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
 8003736:	2c04      	cmp	r4, #4
 8003738:	d001      	beq.n	800373e <forward_status_cb+0x2a>
 800373a:	2c01      	cmp	r4, #1
 800373c:	d105      	bne.n	800374a <forward_status_cb+0x36>
 800373e:	4d1b      	ldr	r5, [pc, #108]	; (80037ac <forward_status_cb+0x98>)
 8003740:	e016      	b.n	8003770 <forward_status_cb+0x5c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
 8003742:	2805      	cmp	r0, #5
 8003744:	d0f0      	beq.n	8003728 <forward_status_cb+0x14>
 8003746:	2801      	cmp	r0, #1
 8003748:	d0ee      	beq.n	8003728 <forward_status_cb+0x14>
 800374a:	4d18      	ldr	r5, [pc, #96]	; (80037ac <forward_status_cb+0x98>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 800374c:	4545      	cmp	r5, r8
 800374e:	d31e      	bcc.n	800378e <forward_status_cb+0x7a>
	if (usb_dev.user_status_callback) {
 8003750:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <forward_status_cb+0x94>)
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	b31b      	cbz	r3, 800379e <forward_status_cb+0x8a>
		usb_dev.user_status_callback(status, param);
 8003756:	4631      	mov	r1, r6
 8003758:	4620      	mov	r0, r4
}
 800375a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
 800375e:	4718      	bx	r3
		ep_data = cfg_data->endpoint;
 8003760:	f8d5 a020 	ldr.w	sl, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
 8003764:	2700      	movs	r7, #0
 8003766:	7f2a      	ldrb	r2, [r5, #28]
 8003768:	b2fb      	uxtb	r3, r7
 800376a:	429a      	cmp	r2, r3
 800376c:	d803      	bhi.n	8003776 <forward_status_cb+0x62>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 800376e:	3524      	adds	r5, #36	; 0x24
 8003770:	4545      	cmp	r5, r8
 8003772:	d3f5      	bcc.n	8003760 <forward_status_cb+0x4c>
 8003774:	e007      	b.n	8003786 <forward_status_cb+0x72>
	return usb_dc_ep_disable(ep_data->ep_addr);
 8003776:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
			if (ret < 0) {
 800377a:	3701      	adds	r7, #1
	return usb_dc_ep_disable(ep_data->ep_addr);
 800377c:	7918      	ldrb	r0, [r3, #4]
 800377e:	f001 fcef 	bl	8005160 <usb_dc_ep_disable>
			if (ret < 0) {
 8003782:	2800      	cmp	r0, #0
 8003784:	daef      	bge.n	8003766 <forward_status_cb+0x52>
				usb_dev.configured = false;
 8003786:	2300      	movs	r3, #0
 8003788:	f889 30b9 	strb.w	r3, [r9, #185]	; 0xb9
 800378c:	e7dd      	b.n	800374a <forward_status_cb+0x36>
		if (cfg_data->cb_usb_status) {
 800378e:	68eb      	ldr	r3, [r5, #12]
 8003790:	b11b      	cbz	r3, 800379a <forward_status_cb+0x86>
			cfg_data->cb_usb_status(cfg_data, status, param);
 8003792:	4632      	mov	r2, r6
 8003794:	4621      	mov	r1, r4
 8003796:	4628      	mov	r0, r5
 8003798:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 800379a:	3524      	adds	r5, #36	; 0x24
 800379c:	e7d6      	b.n	800374c <forward_status_cb+0x38>
}
 800379e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037a2:	bf00      	nop
 80037a4:	20000324 	.word	0x20000324
 80037a8:	200005f4 	.word	0x200005f4
 80037ac:	20000300 	.word	0x20000300

080037b0 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
 80037b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
 80037b2:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
 80037b4:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
 80037b6:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
 80037b8:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
 80037bc:	d007      	beq.n	80037ce <usb_halt_endpoint_req.isra.0+0x1e>
 80037be:	4620      	mov	r0, r4
 80037c0:	f7ff ff76 	bl	80036b0 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
 80037c4:	b188      	cbz	r0, 80037ea <usb_halt_endpoint_req.isra.0+0x3a>
	return (usb_dev.configuration != 0);
 80037c6:	4b0f      	ldr	r3, [pc, #60]	; (8003804 <usb_halt_endpoint_req.isra.0+0x54>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
 80037c8:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
 80037cc:	b168      	cbz	r0, 80037ea <usb_halt_endpoint_req.isra.0+0x3a>
		if (halt) {
 80037ce:	4e0d      	ldr	r6, [pc, #52]	; (8003804 <usb_halt_endpoint_req.isra.0+0x54>)
			usb_dc_ep_set_stall(ep);
 80037d0:	4620      	mov	r0, r4
		if (halt) {
 80037d2:	b165      	cbz	r5, 80037ee <usb_halt_endpoint_req.isra.0+0x3e>
			usb_dc_ep_set_stall(ep);
 80037d4:	f001 fc76 	bl	80050c4 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
 80037d8:	69f3      	ldr	r3, [r6, #28]
 80037da:	b90b      	cbnz	r3, 80037e0 <usb_halt_endpoint_req.isra.0+0x30>
		return true;
 80037dc:	2001      	movs	r0, #1
 80037de:	e004      	b.n	80037ea <usb_halt_endpoint_req.isra.0+0x3a>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
 80037e0:	2008      	movs	r0, #8
 80037e2:	f10d 0107 	add.w	r1, sp, #7
 80037e6:	4798      	blx	r3
		return true;
 80037e8:	4628      	mov	r0, r5
}
 80037ea:	b002      	add	sp, #8
 80037ec:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
 80037ee:	f001 fc7f 	bl	80050f0 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
 80037f2:	69f3      	ldr	r3, [r6, #28]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f1      	beq.n	80037dc <usb_halt_endpoint_req.isra.0+0x2c>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
 80037f8:	f10d 0107 	add.w	r1, sp, #7
 80037fc:	2009      	movs	r0, #9
 80037fe:	4798      	blx	r3
 8003800:	e7ec      	b.n	80037dc <usb_halt_endpoint_req.isra.0+0x2c>
 8003802:	bf00      	nop
 8003804:	200005f4 	.word	0x200005f4

08003808 <usb_handle_standard_request>:
{
 8003808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
 800380c:	4e96      	ldr	r6, [pc, #600]	; (8003a68 <usb_handle_standard_request+0x260>)
 800380e:	69b3      	ldr	r3, [r6, #24]
{
 8003810:	4605      	mov	r5, r0
 8003812:	460f      	mov	r7, r1
 8003814:	4690      	mov	r8, r2
	if (usb_dev.custom_req_handler &&
 8003816:	b95b      	cbnz	r3, 8003830 <usb_handle_standard_request+0x28>
	switch (setup->RequestType.recipient) {
 8003818:	7828      	ldrb	r0, [r5, #0]
 800381a:	f000 031f 	and.w	r3, r0, #31
 800381e:	2b01      	cmp	r3, #1
 8003820:	d07a      	beq.n	8003918 <usb_handle_standard_request+0x110>
 8003822:	2b02      	cmp	r3, #2
 8003824:	f000 80e3 	beq.w	80039ee <usb_handle_standard_request+0x1e6>
 8003828:	b13b      	cbz	r3, 800383a <usb_handle_standard_request+0x32>
		switch (setup->bRequest) {
 800382a:	f06f 0015 	mvn.w	r0, #21
 800382e:	e08d      	b.n	800394c <usb_handle_standard_request+0x144>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
 8003830:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
 8003832:	2800      	cmp	r0, #0
 8003834:	d1f0      	bne.n	8003818 <usb_handle_standard_request+0x10>
	int rc = 0;
 8003836:	2000      	movs	r0, #0
 8003838:	e088      	b.n	800394c <usb_handle_standard_request+0x144>
	if (usb_reqtype_is_to_host(setup)) {
 800383a:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
 800383e:	7868      	ldrb	r0, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
 8003840:	2a00      	cmp	r2, #0
 8003842:	da2b      	bge.n	800389c <usb_handle_standard_request+0x94>
		switch (setup->bRequest) {
 8003844:	2806      	cmp	r0, #6
	uint8_t *data = *data_buf;
 8003846:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
 800384a:	d009      	beq.n	8003860 <usb_handle_standard_request+0x58>
 800384c:	2808      	cmp	r0, #8
 800384e:	d01f      	beq.n	8003890 <usb_handle_standard_request+0x88>
 8003850:	2800      	cmp	r0, #0
 8003852:	d1ea      	bne.n	800382a <usb_handle_standard_request+0x22>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
 8003854:	2301      	movs	r3, #1
	data[1] = 0U;
 8003856:	7050      	strb	r0, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
 8003858:	7013      	strb	r3, [r2, #0]
		*len = 2;
 800385a:	2302      	movs	r3, #2
 800385c:	603b      	str	r3, [r7, #0]
		return true;
 800385e:	e075      	b.n	800394c <usb_handle_standard_request+0x144>
			return usb_get_descriptor(setup, len, data_buf);
 8003860:	8869      	ldrh	r1, [r5, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
 8003862:	0a0a      	lsrs	r2, r1, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
 8003864:	1f10      	subs	r0, r2, #4
 8003866:	2801      	cmp	r0, #1
 8003868:	d9df      	bls.n	800382a <usb_handle_standard_request+0x22>
 800386a:	2a07      	cmp	r2, #7
 800386c:	d8dd      	bhi.n	800382a <usb_handle_standard_request+0x22>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
 800386e:	b2cc      	uxtb	r4, r1
	p = (uint8_t *)usb_dev.descriptors;
 8003870:	6a71      	ldr	r1, [r6, #36]	; 0x24
	cur_index = 0U;
 8003872:	4618      	mov	r0, r3
	while (p[DESC_bLength] != 0U) {
 8003874:	780b      	ldrb	r3, [r1, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0d7      	beq.n	800382a <usb_handle_standard_request+0x22>
		if (p[DESC_bDescriptorType] == type) {
 800387a:	784d      	ldrb	r5, [r1, #1]
 800387c:	4295      	cmp	r5, r2
 800387e:	d103      	bne.n	8003888 <usb_handle_standard_request+0x80>
			if (cur_index == index) {
 8003880:	4284      	cmp	r4, r0
 8003882:	f000 80e9 	beq.w	8003a58 <usb_handle_standard_request+0x250>
			cur_index++;
 8003886:	3001      	adds	r0, #1
		p += p[DESC_bLength];
 8003888:	4419      	add	r1, r3
 800388a:	e7f3      	b.n	8003874 <usb_handle_standard_request+0x6c>
			*len = p[DESC_bLength];
 800388c:	780b      	ldrb	r3, [r1, #0]
 800388e:	e0e9      	b.n	8003a64 <usb_handle_standard_request+0x25c>
			data[0] = usb_dev.configuration;
 8003890:	f896 10ba 	ldrb.w	r1, [r6, #186]	; 0xba
 8003894:	7011      	strb	r1, [r2, #0]
			*len = 1;
 8003896:	2201      	movs	r2, #1
 8003898:	603a      	str	r2, [r7, #0]
			return true;
 800389a:	e7cc      	b.n	8003836 <usb_handle_standard_request+0x2e>
		switch (setup->bRequest) {
 800389c:	2805      	cmp	r0, #5
 800389e:	d018      	beq.n	80038d2 <usb_handle_standard_request+0xca>
 80038a0:	2809      	cmp	r0, #9
 80038a2:	d1c2      	bne.n	800382a <usb_handle_standard_request+0x22>
	if (setup->wValue == 0U) {
 80038a4:	886c      	ldrh	r4, [r5, #2]
 80038a6:	b144      	cbz	r4, 80038ba <usb_handle_standard_request+0xb2>
	uint8_t cur_config = 0xFF;
 80038a8:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
 80038ac:	6a77      	ldr	r7, [r6, #36]	; 0x24
	bool found = false;
 80038ae:	4618      	mov	r0, r3
	uint8_t cur_alt_setting = 0xFF;
 80038b0:	46c1      	mov	r9, r8
	while (p[DESC_bLength] != 0U) {
 80038b2:	783c      	ldrb	r4, [r7, #0]
 80038b4:	b99c      	cbnz	r4, 80038de <usb_handle_standard_request+0xd6>
	if (found) {
 80038b6:	2800      	cmp	r0, #0
 80038b8:	d0b7      	beq.n	800382a <usb_handle_standard_request+0x22>
		usb_reset_alt_setting();
 80038ba:	f7ff feef 	bl	800369c <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
 80038be:	886b      	ldrh	r3, [r5, #2]
 80038c0:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
 80038c4:	69f3      	ldr	r3, [r6, #28]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0b5      	beq.n	8003836 <usb_handle_standard_request+0x2e>
			usb_dev.status_callback(USB_DC_CONFIGURED,
 80038ca:	4968      	ldr	r1, [pc, #416]	; (8003a6c <usb_handle_standard_request+0x264>)
 80038cc:	2003      	movs	r0, #3
 80038ce:	4798      	blx	r3
 80038d0:	e7b1      	b.n	8003836 <usb_handle_standard_request+0x2e>
			return !usb_dc_set_address(setup->wValue);
 80038d2:	78a8      	ldrb	r0, [r5, #2]
 80038d4:	f001 fbb6 	bl	8005044 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
 80038d8:	2800      	cmp	r0, #0
 80038da:	d0ac      	beq.n	8003836 <usb_handle_standard_request+0x2e>
 80038dc:	e7a5      	b.n	800382a <usb_handle_standard_request+0x22>
		switch (p[DESC_bDescriptorType]) {
 80038de:	787b      	ldrb	r3, [r7, #1]
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d00c      	beq.n	80038fe <usb_handle_standard_request+0xf6>
 80038e4:	2b05      	cmp	r3, #5
 80038e6:	d00d      	beq.n	8003904 <usb_handle_standard_request+0xfc>
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d105      	bne.n	80038f8 <usb_handle_standard_request+0xf0>
			cur_config = p[CONF_DESC_bConfigurationValue];
 80038ec:	f897 8005 	ldrb.w	r8, [r7, #5]
			if (cur_config == setup->wValue) {
 80038f0:	886a      	ldrh	r2, [r5, #2]
				found = true;
 80038f2:	4542      	cmp	r2, r8
 80038f4:	bf08      	it	eq
 80038f6:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
 80038f8:	783b      	ldrb	r3, [r7, #0]
 80038fa:	441f      	add	r7, r3
 80038fc:	e7d9      	b.n	80038b2 <usb_handle_standard_request+0xaa>
			cur_alt_setting =
 80038fe:	f897 9003 	ldrb.w	r9, [r7, #3]
			break;
 8003902:	e7f9      	b.n	80038f8 <usb_handle_standard_request+0xf0>
			if ((cur_config != setup->wValue) ||
 8003904:	886b      	ldrh	r3, [r5, #2]
 8003906:	4543      	cmp	r3, r8
 8003908:	d1f6      	bne.n	80038f8 <usb_handle_standard_request+0xf0>
 800390a:	f1b9 0f00 	cmp.w	r9, #0
 800390e:	d1f3      	bne.n	80038f8 <usb_handle_standard_request+0xf0>
			found = set_endpoint((struct usb_ep_descriptor *)p);
 8003910:	4638      	mov	r0, r7
 8003912:	f7ff fe99 	bl	8003648 <set_endpoint>
			break;
 8003916:	e7ef      	b.n	80038f8 <usb_handle_standard_request+0xf0>
	if (!is_device_configured() ||
 8003918:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
 800391c:	2b00      	cmp	r3, #0
 800391e:	d084      	beq.n	800382a <usb_handle_standard_request+0x22>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
 8003920:	6a74      	ldr	r4, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
 8003922:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8003926:	7928      	ldrb	r0, [r5, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
 8003928:	4623      	mov	r3, r4
	while (p[DESC_bLength] != 0U) {
 800392a:	781a      	ldrb	r2, [r3, #0]
 800392c:	2a00      	cmp	r2, #0
 800392e:	f43f af7c 	beq.w	800382a <usb_handle_standard_request+0x22>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
 8003932:	7859      	ldrb	r1, [r3, #1]
 8003934:	2902      	cmp	r1, #2
 8003936:	d104      	bne.n	8003942 <usb_handle_standard_request+0x13a>
			if (interface < cfg_descr->bNumInterfaces) {
 8003938:	f893 e004 	ldrb.w	lr, [r3, #4]
 800393c:	4586      	cmp	lr, r0
 800393e:	f200 8097 	bhi.w	8003a70 <usb_handle_standard_request+0x268>
		p += p[DESC_bLength];
 8003942:	4413      	add	r3, r2
 8003944:	e7f1      	b.n	800392a <usb_handle_standard_request+0x122>
			data[0] = 0U;
 8003946:	7010      	strb	r0, [r2, #0]
			data[1] = 0U;
 8003948:	7050      	strb	r0, [r2, #1]
			*len = 2;
 800394a:	6039      	str	r1, [r7, #0]
}
 800394c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		p += p[DESC_bLength];
 8003950:	440c      	add	r4, r1
 8003952:	e09b      	b.n	8003a8c <usb_handle_standard_request+0x284>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
 8003954:	280b      	cmp	r0, #11
 8003956:	f47f af68 	bne.w	800382a <usb_handle_standard_request+0x22>
	bool ret = false;
 800395a:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
 800395c:	f04f 0aff 	mov.w	sl, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
 8003960:	46d0      	mov	r8, sl
	const uint8_t *if_desc = NULL;
 8003962:	46b9      	mov	r9, r7
 8003964:	e006      	b.n	8003974 <usb_handle_standard_request+0x16c>
		switch (p[DESC_bDescriptorType]) {
 8003966:	7863      	ldrb	r3, [r4, #1]
 8003968:	2b04      	cmp	r3, #4
 800396a:	d00f      	beq.n	800398c <usb_handle_standard_request+0x184>
 800396c:	2b05      	cmp	r3, #5
 800396e:	d022      	beq.n	80039b6 <usb_handle_standard_request+0x1ae>
		p += p[DESC_bLength];
 8003970:	7823      	ldrb	r3, [r4, #0]
 8003972:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
 8003974:	7823      	ldrb	r3, [r4, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f5      	bne.n	8003966 <usb_handle_standard_request+0x15e>
	if (usb_dev.status_callback) {
 800397a:	69f3      	ldr	r3, [r6, #28]
 800397c:	b113      	cbz	r3, 8003984 <usb_handle_standard_request+0x17c>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
 800397e:	4649      	mov	r1, r9
 8003980:	2007      	movs	r0, #7
 8003982:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
 8003984:	2f00      	cmp	r7, #0
 8003986:	f47f af56 	bne.w	8003836 <usb_handle_standard_request+0x2e>
 800398a:	e74e      	b.n	800382a <usb_handle_standard_request+0x22>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
 800398c:	f894 a002 	ldrb.w	sl, [r4, #2]
			if (cur_iface == setup->wIndex &&
 8003990:	88aa      	ldrh	r2, [r5, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
 8003992:	f894 8003 	ldrb.w	r8, [r4, #3]
			if (cur_iface == setup->wIndex &&
 8003996:	4592      	cmp	sl, r2
 8003998:	4653      	mov	r3, sl
 800399a:	d1e9      	bne.n	8003970 <usb_handle_standard_request+0x168>
			    cur_alt_setting == setup->wValue) {
 800399c:	8869      	ldrh	r1, [r5, #2]
			if (cur_iface == setup->wIndex &&
 800399e:	4588      	cmp	r8, r1
 80039a0:	fa1f f288 	uxth.w	r2, r8
 80039a4:	d1e4      	bne.n	8003970 <usb_handle_standard_request+0x168>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
 80039a6:	2b07      	cmp	r3, #7
 80039a8:	d81e      	bhi.n	80039e8 <usb_handle_standard_request+0x1e0>
		usb_dev.alt_setting[iface] = alt_setting;
 80039aa:	4433      	add	r3, r6
		return true;
 80039ac:	46a1      	mov	r9, r4
				ret = usb_set_alt_setting(setup->wIndex,
 80039ae:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	return true;
 80039b2:	2701      	movs	r7, #1
 80039b4:	e7dc      	b.n	8003970 <usb_handle_standard_request+0x168>
			if (cur_iface == setup->wIndex) {
 80039b6:	88ab      	ldrh	r3, [r5, #4]
 80039b8:	4553      	cmp	r3, sl
 80039ba:	d1d9      	bne.n	8003970 <usb_handle_standard_request+0x168>
	if (cur_alt_setting != alt_setting) {
 80039bc:	78ab      	ldrb	r3, [r5, #2]
 80039be:	4543      	cmp	r3, r8
 80039c0:	d00d      	beq.n	80039de <usb_handle_standard_request+0x1d6>
		ret = reset_endpoint(ep_desc);
 80039c2:	78a7      	ldrb	r7, [r4, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
 80039c4:	4638      	mov	r0, r7
 80039c6:	f000 fc1f 	bl	8004208 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
 80039ca:	4638      	mov	r0, r7
 80039cc:	f001 fbc8 	bl	8005160 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
 80039d0:	f110 0f78 	cmn.w	r0, #120	; 0x78
 80039d4:	d0ed      	beq.n	80039b2 <usb_handle_standard_request+0x1aa>
	} else if (ret) {
 80039d6:	fab0 f780 	clz	r7, r0
 80039da:	097f      	lsrs	r7, r7, #5
 80039dc:	e7c8      	b.n	8003970 <usb_handle_standard_request+0x168>
		ret = set_endpoint(ep_desc);
 80039de:	4620      	mov	r0, r4
 80039e0:	f7ff fe32 	bl	8003648 <set_endpoint>
 80039e4:	4607      	mov	r7, r0
 80039e6:	e7c3      	b.n	8003970 <usb_handle_standard_request+0x168>
 80039e8:	46a1      	mov	r9, r4
	return false;
 80039ea:	2700      	movs	r7, #0
 80039ec:	e7c0      	b.n	8003970 <usb_handle_standard_request+0x168>
	if (usb_reqtype_is_to_host(setup)) {
 80039ee:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
 80039f2:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
 80039f4:	2a00      	cmp	r2, #0
 80039f6:	da19      	bge.n	8003a2c <usb_handle_standard_request+0x224>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f47f af16 	bne.w	800382a <usb_handle_standard_request+0x22>
	uint8_t ep = setup->wIndex;
 80039fe:	792c      	ldrb	r4, [r5, #4]
	if (USB_EP_GET_IDX(ep) == 0) {
 8003a00:	0663      	lsls	r3, r4, #25
 8003a02:	d00a      	beq.n	8003a1a <usb_handle_standard_request+0x212>
 8003a04:	4620      	mov	r0, r4
 8003a06:	f7ff fe53 	bl	80036b0 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	f43f af0d 	beq.w	800382a <usb_handle_standard_request+0x22>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
 8003a10:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f43f af08 	beq.w	800382a <usb_handle_standard_request+0x22>
 8003a1a:	f8d8 5000 	ldr.w	r5, [r8]
		usb_dc_ep_is_stalled(ep, &data[0]);
 8003a1e:	4620      	mov	r0, r4
 8003a20:	4629      	mov	r1, r5
 8003a22:	f004 ffd1 	bl	80089c8 <usb_dc_ep_is_stalled>
		data[1] = 0U;
 8003a26:	2000      	movs	r0, #0
 8003a28:	7068      	strb	r0, [r5, #1]
 8003a2a:	e716      	b.n	800385a <usb_handle_standard_request+0x52>
		switch (setup->bRequest) {
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d008      	beq.n	8003a42 <usb_handle_standard_request+0x23a>
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	f47f aefa 	bne.w	800382a <usb_handle_standard_request+0x22>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
 8003a36:	886b      	ldrh	r3, [r5, #2]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f47f aef6 	bne.w	800382a <usb_handle_standard_request+0x22>
				return usb_halt_endpoint_req(setup, true);
 8003a3e:	2101      	movs	r1, #1
 8003a40:	e003      	b.n	8003a4a <usb_handle_standard_request+0x242>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
 8003a42:	8869      	ldrh	r1, [r5, #2]
 8003a44:	2900      	cmp	r1, #0
 8003a46:	f47f aef0 	bne.w	800382a <usb_handle_standard_request+0x22>
				return usb_halt_endpoint_req(setup, true);
 8003a4a:	88a8      	ldrh	r0, [r5, #4]
 8003a4c:	f7ff feb0 	bl	80037b0 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
 8003a50:	2800      	cmp	r0, #0
 8003a52:	f47f aef0 	bne.w	8003836 <usb_handle_standard_request+0x2e>
 8003a56:	e6e8      	b.n	800382a <usb_handle_standard_request+0x22>
		if (type == USB_DESC_CONFIGURATION) {
 8003a58:	2a02      	cmp	r2, #2
		*data = p;
 8003a5a:	f8c8 1000 	str.w	r1, [r8]
		if (type == USB_DESC_CONFIGURATION) {
 8003a5e:	f47f af15 	bne.w	800388c <usb_handle_standard_request+0x84>
			*len = (p[CONF_DESC_wTotalLength]) |
 8003a62:	884b      	ldrh	r3, [r1, #2]
				*len = 1;
 8003a64:	603b      	str	r3, [r7, #0]
 8003a66:	e6e6      	b.n	8003836 <usb_handle_standard_request+0x2e>
 8003a68:	200005f4 	.word	0x200005f4
 8003a6c:	200006ae 	.word	0x200006ae
	if (usb_reqtype_is_to_host(setup)) {
 8003a70:	f995 3000 	ldrsb.w	r3, [r5]
		switch (setup->bRequest) {
 8003a74:	7868      	ldrb	r0, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f6bf af6c 	bge.w	8003954 <usb_handle_standard_request+0x14c>
 8003a7c:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
 8003a80:	2800      	cmp	r0, #0
 8003a82:	f43f af60 	beq.w	8003946 <usb_handle_standard_request+0x13e>
 8003a86:	280a      	cmp	r0, #10
 8003a88:	f47f aecf 	bne.w	800382a <usb_handle_standard_request+0x22>
	while (p[DESC_bLength] != 0U) {
 8003a8c:	7821      	ldrb	r1, [r4, #0]
 8003a8e:	2900      	cmp	r1, #0
 8003a90:	f43f aecb 	beq.w	800382a <usb_handle_standard_request+0x22>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
 8003a94:	7863      	ldrb	r3, [r4, #1]
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	f47f af5a 	bne.w	8003950 <usb_handle_standard_request+0x148>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
 8003a9c:	78a3      	ldrb	r3, [r4, #2]
			if (cur_iface == setup->wIndex) {
 8003a9e:	459c      	cmp	ip, r3
 8003aa0:	f47f af56 	bne.w	8003950 <usb_handle_standard_request+0x148>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
 8003aa4:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
 8003aa6:	bf96      	itet	ls
 8003aa8:	199b      	addls	r3, r3, r6
	return 0;
 8003aaa:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
 8003aac:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
 8003ab0:	7013      	strb	r3, [r2, #0]
				*len = 1;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e7d6      	b.n	8003a64 <usb_handle_standard_request+0x25c>
 8003ab6:	bf00      	nop

08003ab8 <usb_data_to_host>:
{
 8003ab8:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
 8003aba:	4c13      	ldr	r4, [pc, #76]	; (8003b08 <usb_data_to_host+0x50>)
 8003abc:	7d23      	ldrb	r3, [r4, #20]
 8003abe:	b9cb      	cbnz	r3, 8003af4 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
 8003ac0:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
 8003ac2:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
 8003ac4:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
 8003ac6:	ab01      	add	r3, sp, #4
 8003ac8:	2080      	movs	r0, #128	; 0x80
 8003aca:	f004 fdab 	bl	8008624 <usb_write>
		usb_dev.data_buf += chunk;
 8003ace:	9a01      	ldr	r2, [sp, #4]
 8003ad0:	68a3      	ldr	r3, [r4, #8]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
 8003ad6:	68e3      	ldr	r3, [r4, #12]
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
 8003adc:	b943      	cbnz	r3, 8003af0 <usb_data_to_host+0x38>
 8003ade:	b13a      	cbz	r2, 8003af0 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
 8003ae0:	6923      	ldr	r3, [r4, #16]
 8003ae2:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	dd03      	ble.n	8003af0 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
 8003ae8:	069b      	lsls	r3, r3, #26
 8003aea:	d101      	bne.n	8003af0 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
 8003aec:	2301      	movs	r3, #1
 8003aee:	7523      	strb	r3, [r4, #20]
}
 8003af0:	b002      	add	sp, #8
 8003af2:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
 8003af4:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
 8003af6:	461a      	mov	r2, r3
 8003af8:	4619      	mov	r1, r3
 8003afa:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
 8003afc:	7523      	strb	r3, [r4, #20]
}
 8003afe:	b002      	add	sp, #8
 8003b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
 8003b04:	f001 bb40 	b.w	8005188 <usb_dc_ep_write>
 8003b08:	200005f4 	.word	0x200005f4

08003b0c <usb_handle_control_transfer>:
{
 8003b0c:	b530      	push	{r4, r5, lr}
 8003b0e:	b085      	sub	sp, #20
	uint32_t chunk = 0U;
 8003b10:	2300      	movs	r3, #0
{
 8003b12:	4602      	mov	r2, r0
 8003b14:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
 8003b16:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
 8003b18:	2800      	cmp	r0, #0
 8003b1a:	d15f      	bne.n	8003bdc <usb_handle_control_transfer+0xd0>
 8003b1c:	2900      	cmp	r1, #0
 8003b1e:	d13c      	bne.n	8003b9a <usb_handle_control_transfer+0x8e>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
 8003b20:	2208      	movs	r2, #8
 8003b22:	460b      	mov	r3, r1
 8003b24:	eb0d 0102 	add.w	r1, sp, r2
 8003b28:	f004 ff5b 	bl	80089e2 <usb_dc_ep_read>
 8003b2c:	2800      	cmp	r0, #0
 8003b2e:	da04      	bge.n	8003b3a <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
 8003b30:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
 8003b32:	f001 fac7 	bl	80050c4 <usb_dc_ep_set_stall>
}
 8003b36:	b005      	add	sp, #20
 8003b38:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
 8003b3a:	4c2d      	ldr	r4, [pc, #180]	; (8003bf0 <usb_handle_control_transfer+0xe4>)
		setup->bRequest = setup_raw.bRequest;
 8003b3c:	f89d 3009 	ldrb.w	r3, [sp, #9]
		setup->bmRequestType = setup_raw.bmRequestType;
 8003b40:	f89d 2008 	ldrb.w	r2, [sp, #8]
		setup->bRequest = setup_raw.bRequest;
 8003b44:	7063      	strb	r3, [r4, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
 8003b46:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8003b4a:	8063      	strh	r3, [r4, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
 8003b4c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
		setup->bmRequestType = setup_raw.bmRequestType;
 8003b50:	7022      	strb	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
 8003b52:	80a3      	strh	r3, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
 8003b54:	f104 0138 	add.w	r1, r4, #56	; 0x38
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
 8003b58:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8003b5c:	80e3      	strh	r3, [r4, #6]
		if (usb_reqtype_is_to_device(setup)) {
 8003b5e:	0612      	lsls	r2, r2, #24
		usb_dev.data_buf_residue = 0;
 8003b60:	e9c4 5503 	strd	r5, r5, [r4, #12]
		usb_dev.data_buf = usb_dev.req_data;
 8003b64:	60a1      	str	r1, [r4, #8]
		usb_dev.zlp_flag = false;
 8003b66:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
 8003b68:	d40a      	bmi.n	8003b80 <usb_handle_control_transfer+0x74>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
 8003b6a:	2b80      	cmp	r3, #128	; 0x80
 8003b6c:	d904      	bls.n	8003b78 <usb_handle_control_transfer+0x6c>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
 8003b6e:	2080      	movs	r0, #128	; 0x80
 8003b70:	f001 faa8 	bl	80050c4 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
 8003b74:	2000      	movs	r0, #0
 8003b76:	e7dc      	b.n	8003b32 <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
 8003b78:	b113      	cbz	r3, 8003b80 <usb_handle_control_transfer+0x74>
				usb_dev.data_buf_residue = setup->wLength;
 8003b7a:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
 8003b7e:	e7da      	b.n	8003b36 <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
 8003b80:	f7ff fdb2 	bl	80036e8 <usb_handle_request.constprop.0>
 8003b84:	2800      	cmp	r0, #0
 8003b86:	d0d3      	beq.n	8003b30 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
 8003b88:	88e2      	ldrh	r2, [r4, #6]
 8003b8a:	6923      	ldr	r3, [r4, #16]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	bfd4      	ite	le
 8003b90:	60e2      	strle	r2, [r4, #12]
 8003b92:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
 8003b94:	f7ff ff90 	bl	8003ab8 <usb_data_to_host>
 8003b98:	e7cd      	b.n	8003b36 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
 8003b9a:	4c15      	ldr	r4, [pc, #84]	; (8003bf0 <usb_handle_control_transfer+0xe4>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
 8003b9c:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
 8003ba0:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
 8003ba2:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
 8003ba4:	dc04      	bgt.n	8003bb0 <usb_handle_control_transfer+0xa4>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
 8003ba6:	f004 ff1c 	bl	80089e2 <usb_dc_ep_read>
 8003baa:	2800      	cmp	r0, #0
 8003bac:	dac3      	bge.n	8003b36 <usb_handle_control_transfer+0x2a>
 8003bae:	e7bf      	b.n	8003b30 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
 8003bb0:	462a      	mov	r2, r5
 8003bb2:	f004 ff16 	bl	80089e2 <usb_dc_ep_read>
 8003bb6:	2800      	cmp	r0, #0
 8003bb8:	dbd9      	blt.n	8003b6e <usb_handle_control_transfer+0x62>
		usb_dev.data_buf += chunk;
 8003bba:	9901      	ldr	r1, [sp, #4]
 8003bbc:	68a2      	ldr	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
 8003bbe:	68e3      	ldr	r3, [r4, #12]
		usb_dev.data_buf += chunk;
 8003bc0:	440a      	add	r2, r1
		usb_dev.data_buf_residue -= chunk;
 8003bc2:	1a5b      	subs	r3, r3, r1
		usb_dev.data_buf += chunk;
 8003bc4:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
 8003bc6:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1b4      	bne.n	8003b36 <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
 8003bcc:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8003bd0:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
 8003bd2:	f7ff fd89 	bl	80036e8 <usb_handle_request.constprop.0>
 8003bd6:	2800      	cmp	r0, #0
 8003bd8:	d1dc      	bne.n	8003b94 <usb_handle_control_transfer+0x88>
 8003bda:	e7a9      	b.n	8003b30 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
 8003bdc:	2880      	cmp	r0, #128	; 0x80
 8003bde:	d1aa      	bne.n	8003b36 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
 8003be0:	4b03      	ldr	r3, [pc, #12]	; (8003bf0 <usb_handle_control_transfer+0xe4>)
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	2a00      	cmp	r2, #0
 8003be6:	d1d5      	bne.n	8003b94 <usb_handle_control_transfer+0x88>
 8003be8:	7d1b      	ldrb	r3, [r3, #20]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1d2      	bne.n	8003b94 <usb_handle_control_transfer+0x88>
 8003bee:	e7a2      	b.n	8003b36 <usb_handle_control_transfer+0x2a>
 8003bf0:	200005f4 	.word	0x200005f4

08003bf4 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
 8003bf4:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
 8003bf6:	4a06      	ldr	r2, [pc, #24]	; (8003c10 <usb_set_config+0x1c>)
 8003bf8:	629a      	str	r2, [r3, #40]	; 0x28
 8003bfa:	4a06      	ldr	r2, [pc, #24]	; (8003c14 <usb_set_config+0x20>)
 8003bfc:	62da      	str	r2, [r3, #44]	; 0x2c
 8003bfe:	4a06      	ldr	r2, [pc, #24]	; (8003c18 <usb_set_config+0x24>)
 8003c00:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
 8003c02:	4a06      	ldr	r2, [pc, #24]	; (8003c1c <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
 8003c04:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
 8003c06:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
 8003c08:	2000      	movs	r0, #0
 8003c0a:	4770      	bx	lr
 8003c0c:	200005f4 	.word	0x200005f4
 8003c10:	08003809 	.word	0x08003809
 8003c14:	0800356d 	.word	0x0800356d
 8003c18:	0800360d 	.word	0x0800360d
 8003c1c:	080035ad 	.word	0x080035ad

08003c20 <usb_device_init>:
 */
static int usb_device_init(const struct device *dev)
{
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
 8003c20:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <usb_device_init+0x24>)
{
 8003c22:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
 8003c24:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
 8003c28:	b934      	cbnz	r4, 8003c38 <usb_device_init+0x18>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
 8003c2a:	f000 f9a3 	bl	8003f74 <usb_get_device_descriptor>
	if (!device_descriptor) {
 8003c2e:	b130      	cbz	r0, 8003c3e <usb_device_init+0x1e>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
 8003c30:	f7ff ffe0 	bl	8003bf4 <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
 8003c34:	4620      	mov	r0, r4
}
 8003c36:	bd10      	pop	{r4, pc}
		return -EALREADY;
 8003c38:	f06f 0077 	mvn.w	r0, #119	; 0x77
 8003c3c:	e7fb      	b.n	8003c36 <usb_device_init+0x16>
		return -1;
 8003c3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c42:	e7f8      	b.n	8003c36 <usb_device_init+0x16>
 8003c44:	200005f4 	.word	0x200005f4

08003c48 <usb_enable>:
{
 8003c48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003c4c:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
 8003c4e:	4d35      	ldr	r5, [pc, #212]	; (8003d24 <usb_enable+0xdc>)
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
 8003c50:	4835      	ldr	r0, [pc, #212]	; (8003d28 <usb_enable+0xe0>)
 8003c52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c5a:	f003 fa25 	bl	80070a8 <z_impl_k_mutex_lock>
 8003c5e:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
 8003c62:	2e00      	cmp	r6, #0
 8003c64:	d15b      	bne.n	8003d1e <usb_enable+0xd6>
	usb_dev.status_callback = cb;
 8003c66:	4831      	ldr	r0, [pc, #196]	; (8003d2c <usb_enable+0xe4>)
	usb_dev.user_status_callback = status_cb;
 8003c68:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
 8003c6a:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
 8003c6c:	f001 f9e4 	bl	8005038 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
 8003c70:	f001 f928 	bl	8004ec4 <usb_dc_attach>
	if (ret < 0) {
 8003c74:	1e04      	subs	r4, r0, #0
 8003c76:	db36      	blt.n	8003ce6 <usb_enable+0x9e>
	ret = usb_transfer_init();
 8003c78:	f000 fb0c 	bl	8004294 <usb_transfer_init>
	if (ret < 0) {
 8003c7c:	1e04      	subs	r4, r0, #0
 8003c7e:	db32      	blt.n	8003ce6 <usb_enable+0x9e>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
 8003c80:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
 8003c82:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
 8003c84:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
 8003c88:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
 8003c8c:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
 8003c90:	f004 fe7c 	bl	800898c <usb_dc_ep_configure>
	if (ret < 0) {
 8003c94:	1e04      	subs	r4, r0, #0
 8003c96:	db26      	blt.n	8003ce6 <usb_enable+0x9e>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
 8003c98:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
 8003c9a:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
 8003c9c:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
 8003ca0:	f004 fe74 	bl	800898c <usb_dc_ep_configure>
	if (ret < 0) {
 8003ca4:	1e04      	subs	r4, r0, #0
 8003ca6:	db1e      	blt.n	8003ce6 <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
 8003ca8:	4921      	ldr	r1, [pc, #132]	; (8003d30 <usb_enable+0xe8>)
 8003caa:	4630      	mov	r0, r6
 8003cac:	f004 fe53 	bl	8008956 <usb_dc_ep_set_callback>
	if (ret < 0) {
 8003cb0:	1e04      	subs	r4, r0, #0
 8003cb2:	db18      	blt.n	8003ce6 <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
 8003cb4:	491e      	ldr	r1, [pc, #120]	; (8003d30 <usb_enable+0xe8>)
 8003cb6:	4638      	mov	r0, r7
 8003cb8:	f004 fe4d 	bl	8008956 <usb_dc_ep_set_callback>
	if (ret < 0) {
 8003cbc:	1e04      	subs	r4, r0, #0
 8003cbe:	db12      	blt.n	8003ce6 <usb_enable+0x9e>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 8003cc0:	4c1c      	ldr	r4, [pc, #112]	; (8003d34 <usb_enable+0xec>)
 8003cc2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8003d38 <usb_enable+0xf0>
 8003cc6:	4544      	cmp	r4, r8
 8003cc8:	d314      	bcc.n	8003cf4 <usb_enable+0xac>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
 8003cca:	2000      	movs	r0, #0
 8003ccc:	f001 fa26 	bl	800511c <usb_dc_ep_enable>
	if (ret < 0) {
 8003cd0:	1e04      	subs	r4, r0, #0
 8003cd2:	db08      	blt.n	8003ce6 <usb_enable+0x9e>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
 8003cd4:	2080      	movs	r0, #128	; 0x80
 8003cd6:	f001 fa21 	bl	800511c <usb_dc_ep_enable>
	if (ret < 0) {
 8003cda:	1e04      	subs	r4, r0, #0
 8003cdc:	db03      	blt.n	8003ce6 <usb_enable+0x9e>
	usb_dev.enabled = true;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
 8003ce4:	2400      	movs	r4, #0
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
 8003ce6:	4810      	ldr	r0, [pc, #64]	; (8003d28 <usb_enable+0xe0>)
 8003ce8:	f003 fa56 	bl	8007198 <z_impl_k_mutex_unlock>
}
 8003cec:	4620      	mov	r0, r4
 8003cee:	b002      	add	sp, #8
 8003cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
 8003cf4:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
 8003cf6:	2600      	movs	r6, #0
 8003cf8:	7f22      	ldrb	r2, [r4, #28]
 8003cfa:	b2f3      	uxtb	r3, r6
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d801      	bhi.n	8003d04 <usb_enable+0xbc>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 8003d00:	3424      	adds	r4, #36	; 0x24
 8003d02:	e7e0      	b.n	8003cc6 <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
 8003d04:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 8003d08:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
 8003d0c:	7910      	ldrb	r0, [r2, #4]
 8003d0e:	f004 fe22 	bl	8008956 <usb_dc_ep_set_callback>
 8003d12:	3601      	adds	r6, #1
 8003d14:	2800      	cmp	r0, #0
 8003d16:	d0ef      	beq.n	8003cf8 <usb_enable+0xb0>
 8003d18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003d1c:	e7e3      	b.n	8003ce6 <usb_enable+0x9e>
		ret = -EALREADY;
 8003d1e:	f06f 0477 	mvn.w	r4, #119	; 0x77
 8003d22:	e7e0      	b.n	8003ce6 <usb_enable+0x9e>
 8003d24:	200005f4 	.word	0x200005f4
 8003d28:	20000238 	.word	0x20000238
 8003d2c:	08003715 	.word	0x08003715
 8003d30:	08003b0d 	.word	0x08003b0d
 8003d34:	20000300 	.word	0x20000300
 8003d38:	20000324 	.word	0x20000324

08003d3c <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
 8003d3c:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
 8003d3e:	4b1f      	ldr	r3, [pc, #124]	; (8003dbc <usb_update_sn_string_descriptor+0x80>)
{
 8003d40:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
 8003d42:	aa05      	add	r2, sp, #20
 8003d44:	f103 0510 	add.w	r5, r3, #16
 8003d48:	6818      	ldr	r0, [r3, #0]
 8003d4a:	6859      	ldr	r1, [r3, #4]
 8003d4c:	4614      	mov	r4, r2
 8003d4e:	c403      	stmia	r4!, {r0, r1}
 8003d50:	3308      	adds	r3, #8
 8003d52:	42ab      	cmp	r3, r5
 8003d54:	4622      	mov	r2, r4
 8003d56:	d1f7      	bne.n	8003d48 <usb_update_sn_string_descriptor+0xc>
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
 8003d5c:	2210      	movs	r2, #16
 8003d5e:	2100      	movs	r1, #0
 8003d60:	a801      	add	r0, sp, #4
 8003d62:	f005 fff3 	bl	8009d4c <memset>
	memset(sn, 0, sizeof(sn));
 8003d66:	2212      	movs	r2, #18
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4815      	ldr	r0, [pc, #84]	; (8003dc0 <usb_update_sn_string_descriptor+0x84>)
 8003d6c:	f005 ffee 	bl	8009d4c <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
 8003d70:	2110      	movs	r1, #16
 8003d72:	a801      	add	r0, sp, #4
 8003d74:	f001 fe66 	bl	8005a44 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
 8003d78:	2800      	cmp	r0, #0
 8003d7a:	dd1b      	ble.n	8003db4 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
 8003d7c:	2808      	cmp	r0, #8
 8003d7e:	bfb8      	it	lt
 8003d80:	2008      	movlt	r0, #8
 8003d82:	3808      	subs	r0, #8
 8003d84:	ab01      	add	r3, sp, #4
 8003d86:	4a0e      	ldr	r2, [pc, #56]	; (8003dc0 <usb_update_sn_string_descriptor+0x84>)
 8003d88:	4418      	add	r0, r3
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
 8003d8a:	2100      	movs	r1, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
 8003d8c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003d90:	ac0a      	add	r4, sp, #40	; 0x28
 8003d92:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
 8003d96:	f003 030f 	and.w	r3, r3, #15
			sn[i * 2] = hex[hwid[i + skip] >> 4];
 8003d9a:	f814 4c14 	ldrb.w	r4, [r4, #-20]
 8003d9e:	7014      	strb	r4, [r2, #0]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
 8003da0:	ac0a      	add	r4, sp, #40	; 0x28
 8003da2:	4423      	add	r3, r4
		for (int i = 0; i < usblen; i++) {
 8003da4:	3101      	adds	r1, #1
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
 8003da6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8003daa:	7053      	strb	r3, [r2, #1]
		for (int i = 0; i < usblen; i++) {
 8003dac:	2908      	cmp	r1, #8
 8003dae:	f102 0202 	add.w	r2, r2, #2
 8003db2:	d1eb      	bne.n	8003d8c <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
 8003db4:	4802      	ldr	r0, [pc, #8]	; (8003dc0 <usb_update_sn_string_descriptor+0x84>)
 8003db6:	b00b      	add	sp, #44	; 0x2c
 8003db8:	bd30      	pop	{r4, r5, pc}
 8003dba:	bf00      	nop
 8003dbc:	0800ae29 	.word	0x0800ae29
 8003dc0:	2000112a 	.word	0x2000112a

08003dc4 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
 8003dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc8:	4604      	mov	r4, r0
 8003dca:	b085      	sub	sp, #20
	struct usb_cfg_descriptor *cfg_descr = NULL;
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
 8003dcc:	2500      	movs	r5, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
 8003dce:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
 8003dd2:	46a9      	mov	r9, r5
	struct usb_cfg_data *cfg_data = NULL;
 8003dd4:	462e      	mov	r6, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
 8003dd6:	46aa      	mov	sl, r5

	while (head->bLength != 0U) {
 8003dd8:	7820      	ldrb	r0, [r4, #0]
 8003dda:	b920      	cbnz	r0, 8003de6 <usb_fix_descriptor+0x22>

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
	}

	if ((head + 1) != __usb_descriptor_end) {
 8003ddc:	4b61      	ldr	r3, [pc, #388]	; (8003f64 <usb_fix_descriptor+0x1a0>)
 8003dde:	3402      	adds	r4, #2
 8003de0:	429c      	cmp	r4, r3
 8003de2:	d01f      	beq.n	8003e24 <usb_fix_descriptor+0x60>
 8003de4:	e7f2      	b.n	8003dcc <usb_fix_descriptor+0x8>
		switch (head->bDescriptorType) {
 8003de6:	7863      	ldrb	r3, [r4, #1]
 8003de8:	2b05      	cmp	r3, #5
 8003dea:	d805      	bhi.n	8003df8 <usb_fix_descriptor+0x34>
 8003dec:	e8df f003 	tbb	[pc, r3]
 8003df0:	78030478 	.word	0x78030478
 8003df4:	2007      	.short	0x2007
 8003df6:	46a2      	mov	sl, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
 8003df8:	7823      	ldrb	r3, [r4, #0]
 8003dfa:	441c      	add	r4, r3
 8003dfc:	e7ec      	b.n	8003dd8 <usb_fix_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
 8003dfe:	78e3      	ldrb	r3, [r4, #3]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1f9      	bne.n	8003df8 <usb_fix_descriptor+0x34>
			if (if_descr->bInterfaceNumber == 0U) {
 8003e04:	78a3      	ldrb	r3, [r4, #2]
 8003e06:	b183      	cbz	r3, 8003e2a <usb_fix_descriptor+0x66>
			numof_ifaces++;
 8003e08:	f109 0901 	add.w	r9, r9, #1
 8003e0c:	fa5f f989 	uxtb.w	r9, r9
			break;
 8003e10:	e7f2      	b.n	8003df8 <usb_fix_descriptor+0x34>
		if (cfg_data->interface_descriptor == iface) {
 8003e12:	6872      	ldr	r2, [r6, #4]
 8003e14:	4294      	cmp	r4, r2
 8003e16:	f000 809d 	beq.w	8003f54 <usb_fix_descriptor+0x190>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 8003e1a:	3624      	adds	r6, #36	; 0x24
 8003e1c:	429e      	cmp	r6, r3
 8003e1e:	d3f8      	bcc.n	8003e12 <usb_fix_descriptor+0x4e>
					return -1;
 8003e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
}
 8003e24:	b005      	add	sp, #20
 8003e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 8003e2a:	4e4f      	ldr	r6, [pc, #316]	; (8003f68 <usb_fix_descriptor+0x1a4>)
 8003e2c:	4b4f      	ldr	r3, [pc, #316]	; (8003f6c <usb_fix_descriptor+0x1a8>)
 8003e2e:	e7f5      	b.n	8003e1c <usb_fix_descriptor+0x58>
			if (!cfg_data) {
 8003e30:	2e00      	cmp	r6, #0
 8003e32:	d0f5      	beq.n	8003e20 <usb_fix_descriptor+0x5c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
 8003e34:	2300      	movs	r3, #0
 8003e36:	2101      	movs	r1, #1
 8003e38:	7f32      	ldrb	r2, [r6, #28]
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d2f0      	bcs.n	8003e20 <usb_fix_descriptor+0x5c>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
 8003e3e:	6a32      	ldr	r2, [r6, #32]
 8003e40:	78a7      	ldrb	r7, [r4, #2]
 8003e42:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8003e46:	7910      	ldrb	r0, [r2, #4]
 8003e48:	4287      	cmp	r7, r0
 8003e4a:	d001      	beq.n	8003e50 <usb_fix_descriptor+0x8c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	e7f3      	b.n	8003e38 <usb_fix_descriptor+0x74>
 8003e50:	2701      	movs	r7, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
 8003e52:	78e0      	ldrb	r0, [r4, #3]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
 8003e54:	f894 c005 	ldrb.w	ip, [r4, #5]
			ep_cfg.ep_type = (ep_descr->bmAttributes &
 8003e58:	f000 0003 	and.w	r0, r0, #3
 8003e5c:	f88d 000c 	strb.w	r0, [sp, #12]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
 8003e60:	7920      	ldrb	r0, [r4, #4]
 8003e62:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8003e66:	f8ad 000a 	strh.w	r0, [sp, #10]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
 8003e6a:	f994 0002 	ldrsb.w	r0, [r4, #2]
 8003e6e:	2800      	cmp	r0, #0
 8003e70:	fa5f f887 	uxtb.w	r8, r7
 8003e74:	da28      	bge.n	8003ec8 <usb_fix_descriptor+0x104>
				if ((*requested_ep & (1U << (idx + 16U)))) {
 8003e76:	f107 0010 	add.w	r0, r7, #16
 8003e7a:	fa01 f000 	lsl.w	r0, r1, r0
 8003e7e:	ea10 0f0b 	tst.w	r0, fp
 8003e82:	d129      	bne.n	8003ed8 <usb_fix_descriptor+0x114>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
 8003e84:	f068 007f 	orn	r0, r8, #127	; 0x7f
 8003e88:	f88d 0008 	strb.w	r0, [sp, #8]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
 8003e8c:	a802      	add	r0, sp, #8
 8003e8e:	e9cd 3200 	strd	r3, r2, [sp]
 8003e92:	f004 fd6b 	bl	800896c <usb_dc_ep_check_cap>
 8003e96:	e9dd 3200 	ldrd	r3, r2, [sp]
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	b9e0      	cbnz	r0, 8003ed8 <usb_fix_descriptor+0x114>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
 8003e9e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003ea2:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
 8003ea4:	f013 0f80 	tst.w	r3, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
 8003ea8:	bf1c      	itt	ne
 8003eaa:	f108 0810 	addne.w	r8, r8, #16
 8003eae:	fa5f f888 	uxtbne.w	r8, r8
				ep_data[i].ep_addr = ep_cfg.ep_addr;
 8003eb2:	7113      	strb	r3, [r2, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
 8003eb4:	460b      	mov	r3, r1
					*requested_ep |= (1U << (idx + 16U));
 8003eb6:	bf15      	itete	ne
 8003eb8:	fa01 f808 	lslne.w	r8, r1, r8
					*requested_ep |= (1U << idx);
 8003ebc:	40bb      	lsleq	r3, r7
					*requested_ep |= (1U << (idx + 16U));
 8003ebe:	ea4b 0b08 	orrne.w	fp, fp, r8
					*requested_ep |= (1U << idx);
 8003ec2:	ea4b 0b03 	orreq.w	fp, fp, r3
				return 0;
 8003ec6:	e797      	b.n	8003df8 <usb_fix_descriptor+0x34>
				if ((*requested_ep & (1U << (idx)))) {
 8003ec8:	fa01 f007 	lsl.w	r0, r1, r7
 8003ecc:	ea10 0f0b 	tst.w	r0, fp
 8003ed0:	d102      	bne.n	8003ed8 <usb_fix_descriptor+0x114>
				ep_cfg.ep_addr = idx;
 8003ed2:	f88d 8008 	strb.w	r8, [sp, #8]
 8003ed6:	e7d9      	b.n	8003e8c <usb_fix_descriptor+0xc8>
		for (uint8_t idx = 1; idx < 16U; idx++) {
 8003ed8:	3701      	adds	r7, #1
 8003eda:	2f10      	cmp	r7, #16
 8003edc:	d1b9      	bne.n	8003e52 <usb_fix_descriptor+0x8e>
 8003ede:	e7b5      	b.n	8003e4c <usb_fix_descriptor+0x88>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
 8003ee0:	2d03      	cmp	r5, #3
 8003ee2:	d11d      	bne.n	8003f20 <usb_fix_descriptor+0x15c>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
 8003ee4:	f7ff ff2a 	bl	8003d3c <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
 8003ee8:	4607      	mov	r7, r0
 8003eea:	b168      	cbz	r0, 8003f08 <usb_fix_descriptor+0x144>
	runtime_sn_len = strlen(runtime_sn);
 8003eec:	f7fc ffb1 	bl	8000e52 <strlen>
	if (!runtime_sn_len) {
 8003ef0:	4680      	mov	r8, r0
 8003ef2:	b148      	cbz	r0, 8003f08 <usb_fix_descriptor+0x144>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
 8003ef4:	481e      	ldr	r0, [pc, #120]	; (8003f70 <usb_fix_descriptor+0x1ac>)
 8003ef6:	f7fc ffac 	bl	8000e52 <strlen>
	if (runtime_sn_len != default_sn_len) {
 8003efa:	4580      	cmp	r8, r0
 8003efc:	d104      	bne.n	8003f08 <usb_fix_descriptor+0x144>
 8003efe:	4642      	mov	r2, r8
 8003f00:	4639      	mov	r1, r7
 8003f02:	1ca0      	adds	r0, r4, #2
 8003f04:	f005 ff14 	bl	8009d30 <memcpy>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
 8003f08:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
 8003f0a:	f06f 0102 	mvn.w	r1, #2
 8003f0e:	18e2      	adds	r2, r4, r3
 8003f10:	1b09      	subs	r1, r1, r4
 8003f12:	eb04 0353 	add.w	r3, r4, r3, lsr #1
 8003f16:	42d1      	cmn	r1, r2
 8003f18:	d513      	bpl.n	8003f42 <usb_fix_descriptor+0x17e>
			str_descr_idx += 1U;
 8003f1a:	3501      	adds	r5, #1
 8003f1c:	b2ed      	uxtb	r5, r5
			break;
 8003f1e:	e76b      	b.n	8003df8 <usb_fix_descriptor+0x34>
			if (str_descr_idx) {
 8003f20:	2d00      	cmp	r5, #0
 8003f22:	d1f1      	bne.n	8003f08 <usb_fix_descriptor+0x144>
				if (!cfg_descr) {
 8003f24:	f1ba 0f00 	cmp.w	sl, #0
 8003f28:	f43f af7a 	beq.w	8003e20 <usb_fix_descriptor+0x5c>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
 8003f2c:	eba4 030a 	sub.w	r3, r4, sl
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
 8003f30:	f88a 3002 	strb.w	r3, [sl, #2]
	dst[1] = val >> 8;
 8003f34:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003f38:	f88a 3003 	strb.w	r3, [sl, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
 8003f3c:	f88a 9004 	strb.w	r9, [sl, #4]
 8003f40:	e7eb      	b.n	8003f1a <usb_fix_descriptor+0x156>
		buf[i] = 0U;
 8003f42:	f04f 0000 	mov.w	r0, #0
 8003f46:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
 8003f4a:	f813 0901 	ldrb.w	r0, [r3], #-1
 8003f4e:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
 8003f52:	e7e0      	b.n	8003f16 <usb_fix_descriptor+0x152>
				if (cfg_data->interface_config) {
 8003f54:	68b3      	ldr	r3, [r6, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f43f af56 	beq.w	8003e08 <usb_fix_descriptor+0x44>
					cfg_data->interface_config(head,
 8003f5c:	4649      	mov	r1, r9
 8003f5e:	4620      	mov	r0, r4
 8003f60:	4798      	blx	r3
 8003f62:	e751      	b.n	8003e08 <usb_fix_descriptor+0x44>
 8003f64:	200002ff 	.word	0x200002ff
 8003f68:	20000300 	.word	0x20000300
 8003f6c:	20000324 	.word	0x20000324
 8003f70:	0800ae29 	.word	0x0800ae29

08003f74 <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
 8003f74:	b508      	push	{r3, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
 8003f76:	4804      	ldr	r0, [pc, #16]	; (8003f88 <usb_get_device_descriptor+0x14>)
 8003f78:	f7ff ff24 	bl	8003dc4 <usb_fix_descriptor>
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
 8003f7c:	2800      	cmp	r0, #0
	}

	return (uint8_t *) __usb_descriptor_start;
}
 8003f7e:	4802      	ldr	r0, [pc, #8]	; (8003f88 <usb_get_device_descriptor+0x14>)
 8003f80:	bf18      	it	ne
 8003f82:	2000      	movne	r0, #0
 8003f84:	bd08      	pop	{r3, pc}
 8003f86:	bf00      	nop
 8003f88:	2000024c 	.word	0x2000024c

08003f8c <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
 8003f8c:	b510      	push	{r4, lr}
 8003f8e:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
 8003f90:	2100      	movs	r1, #0
 8003f92:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
 8003f94:	781c      	ldrb	r4, [r3, #0]
 8003f96:	4284      	cmp	r4, r0
 8003f98:	d104      	bne.n	8003fa4 <usb_ep_get_transfer+0x18>
 8003f9a:	685c      	ldr	r4, [r3, #4]
 8003f9c:	b114      	cbz	r4, 8003fa4 <usb_ep_get_transfer+0x18>
			return &ut_data[i];
 8003f9e:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
 8003fa2:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
 8003fa4:	3101      	adds	r1, #1
 8003fa6:	2904      	cmp	r1, #4
 8003fa8:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8003fac:	d1f2      	bne.n	8003f94 <usb_ep_get_transfer+0x8>
	return NULL;
 8003fae:	2000      	movs	r0, #0
 8003fb0:	e7f7      	b.n	8003fa2 <usb_ep_get_transfer+0x16>
 8003fb2:	bf00      	nop
 8003fb4:	200006b8 	.word	0x200006b8

08003fb8 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
 8003fb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
 8003fbc:	f850 3c28 	ldr.w	r3, [r0, #-40]
	ep = trans->ep;
 8003fc0:	f810 6c2c 	ldrb.w	r6, [r0, #-44]
	if (trans->status != -EBUSY) {
 8003fc4:	3310      	adds	r3, #16
{
 8003fc6:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
 8003fc8:	d110      	bne.n	8003fec <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
 8003fca:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
 8003fcc:	f850 2c20 	ldr.w	r2, [r0, #-32]
	if (trans->flags & USB_TRANS_WRITE) {
 8003fd0:	0799      	lsls	r1, r3, #30
 8003fd2:	d53c      	bpl.n	800404e <usb_transfer_work+0x96>
		if (!trans->bsize) {
 8003fd4:	bb02      	cbnz	r2, 8004018 <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
 8003fd6:	f013 0304 	ands.w	r3, r3, #4
 8003fda:	d104      	bne.n	8003fe6 <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4630      	mov	r0, r6
 8003fe2:	f004 fb1f 	bl	8008624 <usb_write>
			}
			trans->status = 0;
 8003fe6:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
 8003fe8:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
 8003fec:	f854 3c28 	ldr.w	r3, [r4, #-40]
 8003ff0:	3310      	adds	r3, #16
 8003ff2:	d00e      	beq.n	8004012 <usb_transfer_work+0x5a>
 8003ff4:	f854 5c18 	ldr.w	r5, [r4, #-24]
 8003ff8:	b15d      	cbz	r5, 8004012 <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
 8003ffa:	f854 7c1c 	ldr.w	r7, [r4, #-28]
		void *priv = trans->priv;
 8003ffe:	f854 8c14 	ldr.w	r8, [r4, #-20]

		if (k_is_in_isr()) {
 8004002:	f005 fd3c 	bl	8009a7e <k_is_in_isr>
 8004006:	2800      	cmp	r0, #0
 8004008:	d04c      	beq.n	80040a4 <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
 800400a:	482e      	ldr	r0, [pc, #184]	; (80040c4 <usb_transfer_work+0x10c>)
 800400c:	4621      	mov	r1, r4
 800400e:	f005 fd7c 	bl	8009b0a <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
 8004012:	b002      	add	sp, #8
 8004014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
 8004018:	f850 1c24 	ldr.w	r1, [r0, #-36]
 800401c:	ab01      	add	r3, sp, #4
 800401e:	4630      	mov	r0, r6
 8004020:	f004 fb00 	bl	8008624 <usb_write>
		if (ret) {
 8004024:	b110      	cbz	r0, 800402c <usb_transfer_work+0x74>
			trans->status = -EINVAL;
 8004026:	f06f 0315 	mvn.w	r3, #21
 800402a:	e7dd      	b.n	8003fe8 <usb_transfer_work+0x30>
		trans->buffer += bytes;
 800402c:	9a01      	ldr	r2, [sp, #4]
 800402e:	f854 3c24 	ldr.w	r3, [r4, #-36]
 8004032:	4413      	add	r3, r2
 8004034:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
 8004038:	f854 3c20 	ldr.w	r3, [r4, #-32]
 800403c:	1a9b      	subs	r3, r3, r2
 800403e:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
 8004042:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8004046:	4413      	add	r3, r2
 8004048:	f844 3c1c 	str.w	r3, [r4, #-28]
 800404c:	e7ce      	b.n	8003fec <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
 800404e:	f850 1c24 	ldr.w	r1, [r0, #-36]
 8004052:	ab01      	add	r3, sp, #4
 8004054:	4630      	mov	r0, r6
 8004056:	f001 f8e5 	bl	8005224 <usb_dc_ep_read_wait>
		if (ret) {
 800405a:	2800      	cmp	r0, #0
 800405c:	d1e3      	bne.n	8004026 <usb_transfer_work+0x6e>
		trans->buffer += bytes;
 800405e:	9d01      	ldr	r5, [sp, #4]
 8004060:	f854 3c24 	ldr.w	r3, [r4, #-36]
 8004064:	442b      	add	r3, r5
 8004066:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
 800406a:	f854 3c20 	ldr.w	r3, [r4, #-32]
 800406e:	1b5b      	subs	r3, r3, r5
 8004070:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
 8004074:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8004078:	442b      	add	r3, r5
 800407a:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
 800407e:	2d00      	cmp	r5, #0
 8004080:	d0b1      	beq.n	8003fe6 <usb_transfer_work+0x2e>
 8004082:	4630      	mov	r0, r6
 8004084:	f004 fcb9 	bl	80089fa <usb_dc_ep_mps>
 8004088:	fbb5 f3f0 	udiv	r3, r5, r0
 800408c:	fb03 5510 	mls	r5, r3, r0, r5
 8004090:	2d00      	cmp	r5, #0
 8004092:	d1a8      	bne.n	8003fe6 <usb_transfer_work+0x2e>
 8004094:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0a4      	beq.n	8003fe6 <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
 800409c:	4630      	mov	r0, r6
 800409e:	f001 f8f1 	bl	8005284 <usb_dc_ep_read_continue>
 80040a2:	e7a3      	b.n	8003fec <usb_transfer_work+0x34>
		trans->cb = NULL;
 80040a4:	f844 0c18 	str.w	r0, [r4, #-24]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 80040a8:	f1a4 0010 	sub.w	r0, r4, #16
 80040ac:	f003 f8b6 	bl	800721c <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
 80040b0:	f854 3c28 	ldr.w	r3, [r4, #-40]
 80040b4:	338c      	adds	r3, #140	; 0x8c
 80040b6:	d0ac      	beq.n	8004012 <usb_transfer_work+0x5a>
			cb(ep, tsize, priv);
 80040b8:	4642      	mov	r2, r8
 80040ba:	4639      	mov	r1, r7
 80040bc:	4630      	mov	r0, r6
 80040be:	47a8      	blx	r5
 80040c0:	e7a7      	b.n	8004012 <usb_transfer_work+0x5a>
 80040c2:	bf00      	nop
 80040c4:	20000328 	.word	0x20000328

080040c8 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
 80040c8:	1e4b      	subs	r3, r1, #1
 80040ca:	2b01      	cmp	r3, #1
{
 80040cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80040ce:	4606      	mov	r6, r0
 80040d0:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
 80040d2:	d80f      	bhi.n	80040f4 <usb_transfer_ep_callback+0x2c>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
 80040d4:	f7ff ff5a 	bl	8003f8c <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
 80040d8:	4604      	mov	r4, r0
 80040da:	b968      	cbnz	r0, 80040f8 <usb_transfer_ep_callback+0x30>
		if (status == USB_DC_EP_DATA_OUT) {
 80040dc:	2d01      	cmp	r5, #1
 80040de:	d109      	bne.n	80040f4 <usb_transfer_ep_callback+0x2c>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
 80040e0:	ab01      	add	r3, sp, #4
 80040e2:	2201      	movs	r2, #1
 80040e4:	f10d 0103 	add.w	r1, sp, #3
 80040e8:	4630      	mov	r0, r6
 80040ea:	f001 f89b 	bl	8005224 <usb_dc_ep_read_wait>
			} while (bytes);
 80040ee:	9b01      	ldr	r3, [sp, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1f5      	bne.n	80040e0 <usb_transfer_ep_callback+0x18>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
 80040f4:	b002      	add	sp, #8
 80040f6:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
 80040f8:	f005 fcc1 	bl	8009a7e <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
 80040fc:	f104 012c 	add.w	r1, r4, #44	; 0x2c
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
 8004100:	b108      	cbz	r0, 8004106 <usb_transfer_ep_callback+0x3e>
 8004102:	2d01      	cmp	r5, #1
 8004104:	d105      	bne.n	8004112 <usb_transfer_ep_callback+0x4a>
		usb_transfer_work(&trans->work);
 8004106:	4608      	mov	r0, r1
}
 8004108:	b002      	add	sp, #8
 800410a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
 800410e:	f7ff bf53 	b.w	8003fb8 <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
 8004112:	4803      	ldr	r0, [pc, #12]	; (8004120 <usb_transfer_ep_callback+0x58>)
}
 8004114:	b002      	add	sp, #8
 8004116:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
 800411a:	f005 bcf6 	b.w	8009b0a <k_work_submit_to_queue>
 800411e:	bf00      	nop
 8004120:	20000328 	.word	0x20000328

08004124 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
 8004124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004128:	4606      	mov	r6, r0
 800412a:	9101      	str	r1, [sp, #4]
 800412c:	4615      	mov	r5, r2
 800412e:	4698      	mov	r8, r3
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
 8004130:	f004 fac0 	bl	80086b4 <usb_transfer_is_busy>
 8004134:	4604      	mov	r4, r0
 8004136:	2800      	cmp	r0, #0
 8004138:	d15c      	bne.n	80041f4 <usb_transfer+0xd0>
	__asm__ volatile(
 800413a:	f04f 0310 	mov.w	r3, #16
 800413e:	f3ef 8a11 	mrs	sl, BASEPRI
 8004142:	f383 8812 	msr	BASEPRI_MAX, r3
 8004146:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
 800414a:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 80041fc <usb_transfer+0xd8>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
 800414e:	01a7      	lsls	r7, r4, #6
	return z_impl_k_sem_take(sem, timeout);
 8004150:	2200      	movs	r2, #0
 8004152:	2300      	movs	r3, #0
 8004154:	4658      	mov	r0, fp
 8004156:	f003 f881 	bl	800725c <z_impl_k_sem_take>
 800415a:	b968      	cbnz	r0, 8004178 <usb_transfer+0x54>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
 800415c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8004200 <usb_transfer+0xdc>
 8004160:	eb09 0407 	add.w	r4, r9, r7
 8004164:	6863      	ldr	r3, [r4, #4]
 8004166:	f113 0f10 	cmn.w	r3, #16
 800416a:	d114      	bne.n	8004196 <usb_transfer+0x72>
 800416c:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
 800416e:	4658      	mov	r0, fp
 8004170:	f003 f854 	bl	800721c <z_impl_k_sem_give>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
		k_sem_give(&trans->sem);
		ret = -EBUSY;
		goto done;
 8004174:	9b01      	ldr	r3, [sp, #4]
 8004176:	e006      	b.n	8004186 <usb_transfer+0x62>
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
 8004178:	3401      	adds	r4, #1
 800417a:	2c04      	cmp	r4, #4
 800417c:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 8004180:	d1e5      	bne.n	800414e <usb_transfer+0x2a>
		ret = -ENOMEM;
 8004182:	f06f 030b 	mvn.w	r3, #11
	__asm__ volatile(
 8004186:	f38a 8811 	msr	BASEPRI, sl
 800418a:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
 800418e:	4618      	mov	r0, r3
 8004190:	b003      	add	sp, #12
 8004192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	trans->buffer = data;
 8004196:	9b01      	ldr	r3, [sp, #4]
	trans->tsize = 0;
 8004198:	6120      	str	r0, [r4, #16]
	trans->bsize = dlen;
 800419a:	e9c4 3502 	strd	r3, r5, [r4, #8]
	trans->cb = cb;
 800419e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041a0:	6163      	str	r3, [r4, #20]
	trans->priv = cb_data;
 80041a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041a4:	61a3      	str	r3, [r4, #24]
	trans->status = -EBUSY;
 80041a6:	f06f 030f 	mvn.w	r3, #15
	trans->flags = flags;
 80041aa:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	trans->status = -EBUSY;
 80041ae:	6063      	str	r3, [r4, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
 80041b0:	4630      	mov	r0, r6
	trans->ep = ep;
 80041b2:	f809 6007 	strb.w	r6, [r9, r7]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
 80041b6:	f004 fc20 	bl	80089fa <usb_dc_ep_mps>
 80041ba:	b158      	cbz	r0, 80041d4 <usb_transfer+0xb0>
 80041bc:	4630      	mov	r0, r6
 80041be:	f004 fc1c 	bl	80089fa <usb_dc_ep_mps>
 80041c2:	fbb5 f2f0 	udiv	r2, r5, r0
 80041c6:	fb02 5510 	mls	r5, r2, r0, r5
 80041ca:	b11d      	cbz	r5, 80041d4 <usb_transfer+0xb0>
		trans->flags |= USB_TRANS_NO_ZLP;
 80041cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80041ce:	f043 0304 	orr.w	r3, r3, #4
 80041d2:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (flags & USB_TRANS_WRITE) {
 80041d4:	f018 0f02 	tst.w	r8, #2
 80041d8:	d007      	beq.n	80041ea <usb_transfer+0xc6>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
 80041da:	372c      	adds	r7, #44	; 0x2c
 80041dc:	4809      	ldr	r0, [pc, #36]	; (8004204 <usb_transfer+0xe0>)
 80041de:	eb09 0107 	add.w	r1, r9, r7
 80041e2:	f005 fc92 	bl	8009b0a <k_work_submit_to_queue>
	int i, key, ret = 0;
 80041e6:	2300      	movs	r3, #0
 80041e8:	e7cd      	b.n	8004186 <usb_transfer+0x62>
		ret = usb_dc_ep_read_continue(ep);
 80041ea:	4630      	mov	r0, r6
 80041ec:	f001 f84a 	bl	8005284 <usb_dc_ep_read_continue>
 80041f0:	4603      	mov	r3, r0
 80041f2:	e7c8      	b.n	8004186 <usb_transfer+0x62>
		return -EBUSY;
 80041f4:	f06f 030f 	mvn.w	r3, #15
 80041f8:	e7c9      	b.n	800418e <usb_transfer+0x6a>
 80041fa:	bf00      	nop
 80041fc:	200006d4 	.word	0x200006d4
 8004200:	200006b8 	.word	0x200006b8
 8004204:	20000328 	.word	0x20000328

08004208 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
 8004208:	b510      	push	{r4, lr}
	__asm__ volatile(
 800420a:	f04f 0310 	mov.w	r3, #16
 800420e:	f3ef 8411 	mrs	r4, BASEPRI
 8004212:	f383 8812 	msr	BASEPRI_MAX, r3
 8004216:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
 800421a:	f7ff feb7 	bl	8003f8c <usb_ep_get_transfer>
	if (!trans) {
 800421e:	b150      	cbz	r0, 8004236 <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
 8004220:	6843      	ldr	r3, [r0, #4]
 8004222:	3310      	adds	r3, #16
 8004224:	d107      	bne.n	8004236 <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
 8004226:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800422a:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
 800422c:	f100 012c 	add.w	r1, r0, #44	; 0x2c
 8004230:	4803      	ldr	r0, [pc, #12]	; (8004240 <usb_cancel_transfer+0x38>)
 8004232:	f005 fc6a 	bl	8009b0a <k_work_submit_to_queue>
	__asm__ volatile(
 8004236:	f384 8811 	msr	BASEPRI, r4
 800423a:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
 800423e:	bd10      	pop	{r4, pc}
 8004240:	20000328 	.word	0x20000328

08004244 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
 8004244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004248:	4c10      	ldr	r4, [pc, #64]	; (800428c <usb_cancel_transfers+0x48>)

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
 800424a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8004290 <usb_cancel_transfers+0x4c>
{
 800424e:	2504      	movs	r5, #4
			trans->status = -ECANCELED;
 8004250:	f06f 078b 	mvn.w	r7, #139	; 0x8b
	__asm__ volatile(
 8004254:	f04f 0310 	mov.w	r3, #16
 8004258:	f3ef 8611 	mrs	r6, BASEPRI
 800425c:	f383 8812 	msr	BASEPRI_MAX, r3
 8004260:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
 8004264:	6863      	ldr	r3, [r4, #4]
 8004266:	3310      	adds	r3, #16
 8004268:	d105      	bne.n	8004276 <usb_cancel_transfers+0x32>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
 800426a:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 800426e:	4640      	mov	r0, r8
			trans->status = -ECANCELED;
 8004270:	6067      	str	r7, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
 8004272:	f005 fc4a 	bl	8009b0a <k_work_submit_to_queue>
	__asm__ volatile(
 8004276:	f386 8811 	msr	BASEPRI, r6
 800427a:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
 800427e:	3d01      	subs	r5, #1
 8004280:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8004284:	d1e6      	bne.n	8004254 <usb_cancel_transfers+0x10>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
 8004286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800428a:	bf00      	nop
 800428c:	200006b8 	.word	0x200006b8
 8004290:	20000328 	.word	0x20000328

08004294 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
 8004294:	b570      	push	{r4, r5, r6, lr}
 8004296:	4c0a      	ldr	r4, [pc, #40]	; (80042c0 <usb_transfer_init+0x2c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
 8004298:	4e0a      	ldr	r6, [pc, #40]	; (80042c4 <usb_transfer_init+0x30>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
 800429a:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
 800429c:	4631      	mov	r1, r6
 800429e:	4620      	mov	r0, r4
 80042a0:	f005 fc2a 	bl	8009af8 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
 80042a4:	2201      	movs	r2, #1
 80042a6:	f1a4 0010 	sub.w	r0, r4, #16
 80042aa:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
 80042ac:	3501      	adds	r5, #1
 80042ae:	f005 fc05 	bl	8009abc <z_impl_k_sem_init>
 80042b2:	2d04      	cmp	r5, #4
 80042b4:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80042b8:	d1f0      	bne.n	800429c <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
 80042ba:	2000      	movs	r0, #0
 80042bc:	bd70      	pop	{r4, r5, r6, pc}
 80042be:	bf00      	nop
 80042c0:	200006e4 	.word	0x200006e4
 80042c4:	08003fb9 	.word	0x08003fb9

080042c8 <cdc_acm_int_in>:
 *
 * @param ep        Endpoint address.
 * @param ep_status Endpoint status code.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
 80042c8:	b508      	push	{r3, lr}
 80042ca:	4601      	mov	r1, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
 80042cc:	4803      	ldr	r0, [pc, #12]	; (80042dc <cdc_acm_int_in+0x14>)
 80042ce:	f004 f9db 	bl	8008688 <usb_get_dev_data_by_ep>
	if (common == NULL) {
 80042d2:	b110      	cbz	r0, 80042da <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
 80042d4:	2301      	movs	r3, #1
 80042d6:	f800 3c03 	strb.w	r3, [r0, #-3]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
 80042da:	bd08      	pop	{r3, pc}
 80042dc:	200007b8 	.word	0x200007b8

080042e0 <cdc_acm_irq_rx_enable>:
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
 80042e0:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
 80042e2:	2301      	movs	r3, #1
 80042e4:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b

	if (dev_data->cb && dev_data->rx_ready) {
 80042e8:	680b      	ldr	r3, [r1, #0]
 80042ea:	b133      	cbz	r3, 80042fa <cdc_acm_irq_rx_enable+0x1a>
 80042ec:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 80042f0:	b11b      	cbz	r3, 80042fa <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
 80042f2:	4802      	ldr	r0, [pc, #8]	; (80042fc <cdc_acm_irq_rx_enable+0x1c>)
 80042f4:	3108      	adds	r1, #8
 80042f6:	f005 bc08 	b.w	8009b0a <k_work_submit_to_queue>
	}
}
 80042fa:	4770      	bx	lr
 80042fc:	20000328 	.word	0x20000328

08004300 <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
 8004300:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
 8004302:	2301      	movs	r3, #1
 8004304:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	if (dev_data->cb && dev_data->tx_ready) {
 8004308:	680b      	ldr	r3, [r1, #0]
 800430a:	b133      	cbz	r3, 800431a <cdc_acm_irq_tx_enable+0x1a>
 800430c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8004310:	b11b      	cbz	r3, 800431a <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
 8004312:	4802      	ldr	r0, [pc, #8]	; (800431c <cdc_acm_irq_tx_enable+0x1c>)
 8004314:	3108      	adds	r1, #8
 8004316:	f005 bbf8 	b.w	8009b0a <k_work_submit_to_queue>
}
 800431a:	4770      	bx	lr
 800431c:	20000328 	.word	0x20000328

08004320 <cdc_acm_write_cb>:
	dev_data->tx_ready = true;
 8004320:	2301      	movs	r3, #1
{
 8004322:	b510      	push	{r4, lr}
	dev_data->tx_ready = true;
 8004324:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	if (dev_data->cb && dev_data->tx_irq_ena) {
 8004328:	6813      	ldr	r3, [r2, #0]
{
 800432a:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
 800432c:	b13b      	cbz	r3, 800433e <cdc_acm_write_cb+0x1e>
 800432e:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8004332:	b123      	cbz	r3, 800433e <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
 8004334:	4808      	ldr	r0, [pc, #32]	; (8004358 <cdc_acm_write_cb+0x38>)
 8004336:	f102 0108 	add.w	r1, r2, #8
 800433a:	f005 fbe6 	bl	8009b0a <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
 800433e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004340:	691a      	ldr	r2, [r3, #16]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	429a      	cmp	r2, r3
 8004346:	d006      	beq.n	8004356 <cdc_acm_write_cb+0x36>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
 8004348:	f104 0118 	add.w	r1, r4, #24
 800434c:	4802      	ldr	r0, [pc, #8]	; (8004358 <cdc_acm_write_cb+0x38>)
}
 800434e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
 8004352:	f005 bbda 	b.w	8009b0a <k_work_submit_to_queue>
}
 8004356:	bd10      	pop	{r4, pc}
 8004358:	20000328 	.word	0x20000328

0800435c <cdc_acm_fifo_fill>:
{
 800435c:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
 800435e:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
 8004360:	f895 007e 	ldrb.w	r0, [r5, #126]	; 0x7e
 8004364:	b170      	cbz	r0, 8004384 <cdc_acm_fifo_fill+0x28>
 8004366:	f895 307f 	ldrb.w	r3, [r5, #127]	; 0x7f
 800436a:	b963      	cbnz	r3, 8004386 <cdc_acm_fifo_fill+0x2a>
	dev_data->tx_ready = false;
 800436c:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
 8004370:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8004372:	f004 f8d7 	bl	8008524 <ring_buf_put>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
 8004376:	f105 0118 	add.w	r1, r5, #24
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
 800437a:	4604      	mov	r4, r0
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
 800437c:	4803      	ldr	r0, [pc, #12]	; (800438c <cdc_acm_fifo_fill+0x30>)
 800437e:	f005 fbc4 	bl	8009b0a <k_work_submit_to_queue>
	return wrote;
 8004382:	4620      	mov	r0, r4
}
 8004384:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
 8004386:	2000      	movs	r0, #0
 8004388:	e7fc      	b.n	8004384 <cdc_acm_fifo_fill+0x28>
 800438a:	bf00      	nop
 800438c:	20000328 	.word	0x20000328

08004390 <cdc_acm_read_cb>:
{
 8004390:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004392:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
 8004394:	f102 062c 	add.w	r6, r2, #44	; 0x2c
	if (size <= 0) {
 8004398:	1e0a      	subs	r2, r1, #0
{
 800439a:	4605      	mov	r5, r0
	if (size <= 0) {
 800439c:	dd10      	ble.n	80043c0 <cdc_acm_read_cb+0x30>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
 800439e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80043a0:	4631      	mov	r1, r6
 80043a2:	f004 f8bf 	bl	8008524 <ring_buf_put>
	dev_data->rx_ready = true;
 80043a6:	2301      	movs	r3, #1
 80043a8:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (dev_data->cb && dev_data->rx_irq_ena) {
 80043ac:	6823      	ldr	r3, [r4, #0]
 80043ae:	b13b      	cbz	r3, 80043c0 <cdc_acm_read_cb+0x30>
 80043b0:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 80043b4:	b123      	cbz	r3, 80043c0 <cdc_acm_read_cb+0x30>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
 80043b6:	4808      	ldr	r0, [pc, #32]	; (80043d8 <cdc_acm_read_cb+0x48>)
 80043b8:	f104 0108 	add.w	r1, r4, #8
 80043bc:	f005 fba5 	bl	8009b0a <k_work_submit_to_queue>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
 80043c0:	4b06      	ldr	r3, [pc, #24]	; (80043dc <cdc_acm_read_cb+0x4c>)
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	9401      	str	r4, [sp, #4]
 80043c6:	2301      	movs	r3, #1
 80043c8:	2240      	movs	r2, #64	; 0x40
 80043ca:	4631      	mov	r1, r6
 80043cc:	4628      	mov	r0, r5
 80043ce:	f7ff fea9 	bl	8004124 <usb_transfer>
}
 80043d2:	b002      	add	sp, #8
 80043d4:	bd70      	pop	{r4, r5, r6, pc}
 80043d6:	bf00      	nop
 80043d8:	20000328 	.word	0x20000328
 80043dc:	08004391 	.word	0x08004391

080043e0 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
 80043e0:	b513      	push	{r0, r1, r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
 80043e2:	6904      	ldr	r4, [r0, #16]
{
 80043e4:	f88d 1007 	strb.w	r1, [sp, #7]

	if (!dev_data->configured || dev_data->suspended) {
 80043e8:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
 80043ec:	b18b      	cbz	r3, 8004412 <cdc_acm_poll_out+0x32>
 80043ee:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
 80043f2:	b973      	cbnz	r3, 8004412 <cdc_acm_poll_out+0x32>
		return;
	}

	dev_data->tx_ready = false;

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
 80043f4:	f10d 0107 	add.w	r1, sp, #7
 80043f8:	6f20      	ldr	r0, [r4, #112]	; 0x70
	dev_data->tx_ready = false;
 80043fa:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
 80043fe:	2201      	movs	r2, #1
 8004400:	f004 f890 	bl	8008524 <ring_buf_put>
 8004404:	4601      	mov	r1, r0
 8004406:	b130      	cbz	r0, 8004416 <cdc_acm_poll_out+0x36>
			LOG_ERR("Failed to drain buffer");
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
 8004408:	480a      	ldr	r0, [pc, #40]	; (8004434 <cdc_acm_poll_out+0x54>)
 800440a:	f104 0118 	add.w	r1, r4, #24
 800440e:	f005 fb7c 	bl	8009b0a <k_work_submit_to_queue>
}
 8004412:	b002      	add	sp, #8
 8004414:	bd10      	pop	{r4, pc}
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
 8004416:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004418:	2201      	movs	r2, #1
 800441a:	f004 f8d5 	bl	80085c8 <ring_buf_get>
 800441e:	2800      	cmp	r0, #0
 8004420:	d0f7      	beq.n	8004412 <cdc_acm_poll_out+0x32>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
 8004422:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004424:	2201      	movs	r2, #1
 8004426:	f10d 0107 	add.w	r1, sp, #7
 800442a:	f004 f87b 	bl	8008524 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
 800442e:	2800      	cmp	r0, #0
 8004430:	d1ea      	bne.n	8004408 <cdc_acm_poll_out+0x28>
 8004432:	e7ee      	b.n	8004412 <cdc_acm_poll_out+0x32>
 8004434:	20000328 	.word	0x20000328

08004438 <tx_work_handler>:
{
 8004438:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
 800443a:	6e83      	ldr	r3, [r0, #104]	; 0x68
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	7d1e      	ldrb	r6, [r3, #20]
{
 8004442:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
 8004444:	4630      	mov	r0, r6
 8004446:	f004 f935 	bl	80086b4 <usb_transfer_is_busy>
 800444a:	b9d0      	cbnz	r0, 8004482 <tx_work_handler+0x4a>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
 800444c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800444e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004452:	a903      	add	r1, sp, #12
 8004454:	f004 f885 	bl	8008562 <ring_buf_get_claim>
	if (!len) {
 8004458:	4604      	mov	r4, r0
 800445a:	b190      	cbz	r0, 8004482 <tx_work_handler+0x4a>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
 800445c:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
 800445e:	f1a5 0318 	sub.w	r3, r5, #24
		len -= 1;
 8004462:	bf08      	it	eq
 8004464:	f100 34ff 	addeq.w	r4, r0, #4294967295	; 0xffffffff
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
 8004468:	9301      	str	r3, [sp, #4]
 800446a:	4b07      	ldr	r3, [pc, #28]	; (8004488 <tx_work_handler+0x50>)
 800446c:	9903      	ldr	r1, [sp, #12]
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	4622      	mov	r2, r4
 8004472:	2302      	movs	r3, #2
 8004474:	4630      	mov	r0, r6
 8004476:	f7ff fe55 	bl	8004124 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
 800447a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800447c:	4621      	mov	r1, r4
 800447e:	f004 f88f 	bl	80085a0 <ring_buf_get_finish>
}
 8004482:	b004      	add	sp, #16
 8004484:	bd70      	pop	{r4, r5, r6, pc}
 8004486:	bf00      	nop
 8004488:	08004321 	.word	0x08004321

0800448c <cdc_acm_class_handle_req>:
{
 800448c:	b570      	push	{r4, r5, r6, lr}
 800448e:	4604      	mov	r4, r0
 8004490:	460e      	mov	r6, r1
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
 8004492:	7901      	ldrb	r1, [r0, #4]
 8004494:	4815      	ldr	r0, [pc, #84]	; (80044ec <cdc_acm_class_handle_req+0x60>)
{
 8004496:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
 8004498:	f004 f8e8 	bl	800866c <usb_get_dev_data_by_iface>
	if (common == NULL) {
 800449c:	b310      	cbz	r0, 80044e4 <cdc_acm_class_handle_req+0x58>
	if (usb_reqtype_is_to_device(setup)) {
 800449e:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
 80044a2:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
 80044a4:	2a00      	cmp	r2, #0
 80044a6:	db16      	blt.n	80044d6 <cdc_acm_class_handle_req+0x4a>
		switch (setup->bRequest) {
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d004      	beq.n	80044b6 <cdc_acm_class_handle_req+0x2a>
 80044ac:	2b22      	cmp	r3, #34	; 0x22
 80044ae:	d00e      	beq.n	80044ce <cdc_acm_class_handle_req+0x42>
	return -ENOTSUP;
 80044b0:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80044b4:	e00a      	b.n	80044cc <cdc_acm_class_handle_req+0x40>
 80044b6:	682b      	ldr	r3, [r5, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	f840 2c0c 	str.w	r2, [r0, #-12]
 80044be:	889a      	ldrh	r2, [r3, #4]
 80044c0:	f820 2c08 	strh.w	r2, [r0, #-8]
 80044c4:	799b      	ldrb	r3, [r3, #6]
 80044c6:	f800 3c06 	strb.w	r3, [r0, #-6]
			return 0;
 80044ca:	2000      	movs	r0, #0
}
 80044cc:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
 80044ce:	8863      	ldrh	r3, [r4, #2]
 80044d0:	f800 3c05 	strb.w	r3, [r0, #-5]
			return 0;
 80044d4:	e7f9      	b.n	80044ca <cdc_acm_class_handle_req+0x3e>
		if (setup->bRequest == GET_LINE_CODING) {
 80044d6:	2b21      	cmp	r3, #33	; 0x21
 80044d8:	d1ea      	bne.n	80044b0 <cdc_acm_class_handle_req+0x24>
			*data = (uint8_t *)(&dev_data->line_coding);
 80044da:	380c      	subs	r0, #12
			*len = sizeof(dev_data->line_coding);
 80044dc:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
 80044de:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
 80044e0:	6033      	str	r3, [r6, #0]
 80044e2:	e7f2      	b.n	80044ca <cdc_acm_class_handle_req+0x3e>
		return -ENODEV;
 80044e4:	f06f 0012 	mvn.w	r0, #18
 80044e8:	e7f0      	b.n	80044cc <cdc_acm_class_handle_req+0x40>
 80044ea:	bf00      	nop
 80044ec:	200007b8 	.word	0x200007b8

080044f0 <cdc_acm_reset_port>:
	dev_data->line_coding = (struct cdc_acm_line_coding)
 80044f0:	4a0b      	ldr	r2, [pc, #44]	; (8004520 <cdc_acm_reset_port+0x30>)
{
 80044f2:	4603      	mov	r3, r0
	dev_data->configured = false;
 80044f4:	2100      	movs	r1, #0
 80044f6:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
	dev_data->tx_ready = false;
 80044fa:	8501      	strh	r1, [r0, #40]	; 0x28
	dev_data->line_coding = (struct cdc_acm_line_coding)
 80044fc:	6810      	ldr	r0, [r2, #0]
 80044fe:	6758      	str	r0, [r3, #116]	; 0x74
 8004500:	8890      	ldrh	r0, [r2, #4]
 8004502:	7992      	ldrb	r2, [r2, #6]
 8004504:	f8a3 0078 	strh.w	r0, [r3, #120]	; 0x78
 8004508:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	dev_data->serial_state = 0;
 800450c:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
	dev_data->line_state = 0;
 8004510:	f883 107b 	strb.w	r1, [r3, #123]	; 0x7b
__ssp_bos_icheck3(memset, void *, int)
 8004514:	2240      	movs	r2, #64	; 0x40
 8004516:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800451a:	f005 bc17 	b.w	8009d4c <memset>
 800451e:	bf00      	nop
 8004520:	0800a400 	.word	0x0800a400

08004524 <cdc_acm_dev_status_cb>:
{
 8004524:	b538      	push	{r3, r4, r5, lr}
 8004526:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
 8004528:	4601      	mov	r1, r0
 800452a:	4824      	ldr	r0, [pc, #144]	; (80045bc <cdc_acm_dev_status_cb+0x98>)
 800452c:	f004 f892 	bl	8008654 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
 8004530:	4604      	mov	r4, r0
 8004532:	b380      	cbz	r0, 8004596 <cdc_acm_dev_status_cb+0x72>
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
 8004534:	4602      	mov	r2, r0
	switch (status) {
 8004536:	1e69      	subs	r1, r5, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
 8004538:	f852 3980 	ldr.w	r3, [r2], #-128
 800453c:	685b      	ldr	r3, [r3, #4]
	switch (status) {
 800453e:	2905      	cmp	r1, #5
 8004540:	d829      	bhi.n	8004596 <cdc_acm_dev_status_cb+0x72>
 8004542:	e8df f001 	tbb	[pc, r1]
 8004546:	2820      	.short	0x2820
 8004548:	29252003 	.word	0x29252003
		if (!dev_data->configured) {
 800454c:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8004550:	b931      	cbnz	r1, 8004560 <cdc_acm_dev_status_cb+0x3c>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	7b18      	ldrb	r0, [r3, #12]
 8004556:	f7ff ff1b 	bl	8004390 <cdc_acm_read_cb>
			dev_data->configured = true;
 800455a:	2301      	movs	r3, #1
 800455c:	f804 3c02 	strb.w	r3, [r4, #-2]
		if (!dev_data->tx_ready) {
 8004560:	f814 3c58 	ldrb.w	r3, [r4, #-88]
 8004564:	b9bb      	cbnz	r3, 8004596 <cdc_acm_dev_status_cb+0x72>
			dev_data->tx_ready = true;
 8004566:	2301      	movs	r3, #1
 8004568:	f804 3c58 	strb.w	r3, [r4, #-88]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
 800456c:	f854 3c80 	ldr.w	r3, [r4, #-128]
 8004570:	b18b      	cbz	r3, 8004596 <cdc_acm_dev_status_cb+0x72>
 8004572:	f814 3c56 	ldrb.w	r3, [r4, #-86]
 8004576:	b173      	cbz	r3, 8004596 <cdc_acm_dev_status_cb+0x72>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
 8004578:	f1a4 0178 	sub.w	r1, r4, #120	; 0x78
 800457c:	4810      	ldr	r0, [pc, #64]	; (80045c0 <cdc_acm_dev_status_cb+0x9c>)
}
 800457e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
 8004582:	f005 bac2 	b.w	8009b0a <k_work_submit_to_queue>
}
 8004586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		cdc_acm_reset_port(dev_data);
 800458a:	4610      	mov	r0, r2
 800458c:	f7ff bfb0 	b.w	80044f0 <cdc_acm_reset_port>
		dev_data->suspended = true;
 8004590:	2301      	movs	r3, #1
 8004592:	f804 3c01 	strb.w	r3, [r4, #-1]
}
 8004596:	bd38      	pop	{r3, r4, r5, pc}
		if (dev_data->suspended) {
 8004598:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 800459c:	2900      	cmp	r1, #0
 800459e:	d0fa      	beq.n	8004596 <cdc_acm_dev_status_cb+0x72>
			if (dev_data->configured) {
 80045a0:	f814 0c02 	ldrb.w	r0, [r4, #-2]
			dev_data->suspended = false;
 80045a4:	2100      	movs	r1, #0
 80045a6:	f804 1c01 	strb.w	r1, [r4, #-1]
			if (dev_data->configured) {
 80045aa:	2800      	cmp	r0, #0
 80045ac:	d0f3      	beq.n	8004596 <cdc_acm_dev_status_cb+0x72>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	7b18      	ldrb	r0, [r3, #12]
}
 80045b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
 80045b6:	f7ff beeb 	b.w	8004390 <cdc_acm_read_cb>
 80045ba:	bf00      	nop
 80045bc:	200007b8 	.word	0x200007b8
 80045c0:	20000328 	.word	0x20000328

080045c4 <cdc_acm_init>:
{
 80045c4:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
 80045c6:	6904      	ldr	r4, [r0, #16]
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
 80045c8:	2300      	movs	r3, #0
 80045ca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
 80045ce:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
 80045d0:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 80045d4:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
 80045d6:	f104 0284 	add.w	r2, r4, #132	; 0x84
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
 80045da:	b969      	cbnz	r1, 80045f8 <cdc_acm_init+0x34>
	list->head = node;
 80045dc:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
 80045e0:	f104 0008 	add.w	r0, r4, #8
 80045e4:	4907      	ldr	r1, [pc, #28]	; (8004604 <cdc_acm_init+0x40>)
 80045e6:	f005 fa87 	bl	8009af8 <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
 80045ea:	f104 0018 	add.w	r0, r4, #24
 80045ee:	4906      	ldr	r1, [pc, #24]	; (8004608 <cdc_acm_init+0x44>)
 80045f0:	f005 fa82 	bl	8009af8 <k_work_init>
}
 80045f4:	2000      	movs	r0, #0
 80045f6:	bd10      	pop	{r4, pc}
	parent->next = child;
 80045f8:	600a      	str	r2, [r1, #0]
	list->tail = node;
 80045fa:	605a      	str	r2, [r3, #4]
}
 80045fc:	e7f0      	b.n	80045e0 <cdc_acm_init+0x1c>
 80045fe:	bf00      	nop
 8004600:	200007b8 	.word	0x200007b8
 8004604:	080086df 	.word	0x080086df
 8004608:	08004439 	.word	0x08004439

0800460c <cdc_acm_send_notification.isra.0>:
static int cdc_acm_send_notification(const struct device *dev,
 800460c:	b530      	push	{r4, r5, lr}
 800460e:	b085      	sub	sp, #20
	notification.bmRequestType = 0xA1;
 8004610:	23a1      	movs	r3, #161	; 0xa1
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
 8004612:	6905      	ldr	r5, [r0, #16]
	notification.bmRequestType = 0xA1;
 8004614:	f88d 3004 	strb.w	r3, [sp, #4]
	notification.bNotificationType = 0x20;
 8004618:	2320      	movs	r3, #32
	struct usb_cfg_data * const cfg = (void *)dev->config;
 800461a:	6842      	ldr	r2, [r0, #4]
	notification.bNotificationType = 0x20;
 800461c:	f88d 3005 	strb.w	r3, [sp, #5]
	notification.wValue = 0U;
 8004620:	2300      	movs	r3, #0
	dev_data->notification_sent = 0U;
 8004622:	f885 307d 	strb.w	r3, [r5, #125]	; 0x7d
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
 8004626:	2002      	movs	r0, #2
 8004628:	f8ad 000a 	strh.w	r0, [sp, #10]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
 800462c:	6a10      	ldr	r0, [r2, #32]
	notification.data = sys_cpu_to_le16(serial_state);
 800462e:	f8ad 100c 	strh.w	r1, [sp, #12]
	notification.wIndex = 0U;
 8004632:	f8ad 3008 	strh.w	r3, [sp, #8]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
 8004636:	7900      	ldrb	r0, [r0, #4]
	notification.wValue = 0U;
 8004638:	f8ad 3006 	strh.w	r3, [sp, #6]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
 800463c:	220a      	movs	r2, #10
 800463e:	a901      	add	r1, sp, #4
 8004640:	f003 fff0 	bl	8008624 <usb_write>
	while (!((volatile uint8_t)dev_data->notification_sent)) {
 8004644:	4c05      	ldr	r4, [pc, #20]	; (800465c <cdc_acm_send_notification.isra.0+0x50>)
 8004646:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
 800464a:	b923      	cbnz	r3, 8004656 <cdc_acm_send_notification.isra.0+0x4a>
	z_impl_k_busy_wait(usec_to_wait);
 800464c:	2001      	movs	r0, #1
 800464e:	f003 fbfd 	bl	8007e4c <z_impl_k_busy_wait>
		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
 8004652:	3c01      	subs	r4, #1
 8004654:	d1f7      	bne.n	8004646 <cdc_acm_send_notification.isra.0+0x3a>
}
 8004656:	b005      	add	sp, #20
 8004658:	bd30      	pop	{r4, r5, pc}
 800465a:	bf00      	nop
 800465c:	000186a1 	.word	0x000186a1

08004660 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
 8004660:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
 8004662:	4d09      	ldr	r5, [pc, #36]	; (8004688 <z_usb_work_q_init+0x28>)
 8004664:	4909      	ldr	r1, [pc, #36]	; (800468c <z_usb_work_q_init+0x2c>)
 8004666:	2400      	movs	r4, #0
 8004668:	9400      	str	r4, [sp, #0]
 800466a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800466e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004672:	4628      	mov	r0, r5
 8004674:	f002 ff00 	bl	8007478 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
 8004678:	4905      	ldr	r1, [pc, #20]	; (8004690 <z_usb_work_q_init+0x30>)
 800467a:	4628      	mov	r0, r5
 800467c:	f005 fa05 	bl	8009a8a <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
 8004680:	4620      	mov	r0, r4
 8004682:	b003      	add	sp, #12
 8004684:	bd30      	pop	{r4, r5, pc}
 8004686:	bf00      	nop
 8004688:	20000328 	.word	0x20000328
 800468c:	20001140 	.word	0x20001140
 8004690:	0800ae44 	.word	0x0800ae44

08004694 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8004694:	4901      	ldr	r1, [pc, #4]	; (800469c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8004696:	2210      	movs	r2, #16
	str	r2, [r1]
 8004698:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 800469a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 800469c:	e000ed10 	.word	0xe000ed10

080046a0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 80046a0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 80046a2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 80046a4:	f380 8811 	msr	BASEPRI, r0
	isb
 80046a8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 80046ac:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 80046b0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 80046b2:	b662      	cpsie	i
	isb
 80046b4:	f3bf 8f6f 	isb	sy

	bx	lr
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop

080046bc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 80046bc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80046be:	2b00      	cmp	r3, #0
 80046c0:	db08      	blt.n	80046d4 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046c2:	2201      	movs	r2, #1
 80046c4:	f000 001f 	and.w	r0, r0, #31
 80046c8:	fa02 f000 	lsl.w	r0, r2, r0
 80046cc:	095b      	lsrs	r3, r3, #5
 80046ce:	4a02      	ldr	r2, [pc, #8]	; (80046d8 <arch_irq_enable+0x1c>)
 80046d0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	e000e100 	.word	0xe000e100

080046dc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
 80046dc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80046de:	2b00      	cmp	r3, #0
 80046e0:	db0d      	blt.n	80046fe <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046e2:	2201      	movs	r2, #1
 80046e4:	095b      	lsrs	r3, r3, #5
 80046e6:	f000 001f 	and.w	r0, r0, #31
 80046ea:	fa02 f000 	lsl.w	r0, r2, r0
 80046ee:	3320      	adds	r3, #32
 80046f0:	4a03      	ldr	r2, [pc, #12]	; (8004700 <arch_irq_disable+0x24>)
 80046f2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80046f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80046fa:	f3bf 8f6f 	isb	sy
}
 80046fe:	4770      	bx	lr
 8004700:	e000e100 	.word	0xe000e100

08004704 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8004704:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8004706:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004708:	bfa8      	it	ge
 800470a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
 800470e:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004712:	bfb8      	it	lt
 8004714:	4b06      	ldrlt	r3, [pc, #24]	; (8004730 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004716:	ea4f 1101 	mov.w	r1, r1, lsl #4
 800471a:	bfac      	ite	ge
 800471c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004720:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004724:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004726:	bfb4      	ite	lt
 8004728:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800472a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
 800472e:	4770      	bx	lr
 8004730:	e000ed14 	.word	0xe000ed14

08004734 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8004734:	bf30      	wfi
    b z_SysNmiOnReset
 8004736:	f7ff bffd 	b.w	8004734 <z_SysNmiOnReset>
 800473a:	bf00      	nop

0800473c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 800473c:	4a0f      	ldr	r2, [pc, #60]	; (800477c <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 800473e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8004740:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <z_arm_prep_c+0x44>)
 8004742:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8004746:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8004748:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800474c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8004750:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004754:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004758:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800475c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8004760:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8004764:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8004768:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 800476c:	f002 fb46 	bl	8006dfc <z_bss_zero>
	z_data_copy();
 8004770:	f003 fa1a 	bl	8007ba8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8004774:	f000 f9c4 	bl	8004b00 <z_arm_interrupt_init>
	z_cstart();
 8004778:	f002 fb84 	bl	8006e84 <z_cstart>
 800477c:	08000000 	.word	0x08000000
 8004780:	e000ed00 	.word	0xe000ed00

08004784 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8004784:	4a09      	ldr	r2, [pc, #36]	; (80047ac <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8004786:	490a      	ldr	r1, [pc, #40]	; (80047b0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8004788:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 800478a:	6809      	ldr	r1, [r1, #0]
 800478c:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800478e:	4909      	ldr	r1, [pc, #36]	; (80047b4 <arch_swap+0x30>)
	_current->arch.basepri = key;
 8004790:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8004792:	684b      	ldr	r3, [r1, #4]
 8004794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004798:	604b      	str	r3, [r1, #4]
 800479a:	2300      	movs	r3, #0
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 80047a4:	6893      	ldr	r3, [r2, #8]
}
 80047a6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	200010e0 	.word	0x200010e0
 80047b0:	0800a830 	.word	0x0800a830
 80047b4:	e000ed00 	.word	0xe000ed00

080047b8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 80047b8:	4912      	ldr	r1, [pc, #72]	; (8004804 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 80047ba:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 80047bc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 80047c0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 80047c2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 80047c6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80047ca:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 80047cc:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 80047d0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 80047d4:	4f0c      	ldr	r7, [pc, #48]	; (8004808 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 80047d6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 80047da:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 80047dc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 80047de:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 80047e0:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 80047e2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 80047e4:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 80047e6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 80047ea:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 80047ec:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 80047ee:	f000 f9c7 	bl	8004b80 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 80047f2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 80047f6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 80047fa:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 80047fe:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8004802:	4770      	bx	lr
    ldr r1, =_kernel
 8004804:	200010e0 	.word	0x200010e0
    ldr v4, =_SCS_ICSR
 8004808:	e000ed04 	.word	0xe000ed04

0800480c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 800480c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8004810:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8004812:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8004816:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 800481a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 800481c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8004820:	2902      	cmp	r1, #2
    beq _oops
 8004822:	d0ff      	beq.n	8004824 <_oops>

08004824 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8004824:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8004826:	f004 f81b 	bl	8008860 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 800482a:	bd01      	pop	{r0, pc}

0800482c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 800482c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8004830:	9b00      	ldr	r3, [sp, #0]
 8004832:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8004836:	490a      	ldr	r1, [pc, #40]	; (8004860 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
 8004838:	9b01      	ldr	r3, [sp, #4]
 800483a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 800483e:	9b02      	ldr	r3, [sp, #8]
 8004840:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8004844:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8004848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800484c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8004850:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8004854:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8004856:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8004858:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 800485a:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	0800847f 	.word	0x0800847f

08004864 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8004864:	4a09      	ldr	r2, [pc, #36]	; (800488c <z_check_thread_stack_fail+0x28>)
{
 8004866:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 8004868:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 800486a:	b170      	cbz	r0, 800488a <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 800486c:	f113 0f16 	cmn.w	r3, #22
 8004870:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8004872:	d005      	beq.n	8004880 <z_check_thread_stack_fail+0x1c>
 8004874:	f1a0 0220 	sub.w	r2, r0, #32
 8004878:	429a      	cmp	r2, r3
 800487a:	d805      	bhi.n	8004888 <z_check_thread_stack_fail+0x24>
 800487c:	4283      	cmp	r3, r0
 800487e:	d203      	bcs.n	8004888 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8004880:	4281      	cmp	r1, r0
 8004882:	bf28      	it	cs
 8004884:	2000      	movcs	r0, #0
 8004886:	4770      	bx	lr
 8004888:	2000      	movs	r0, #0
}
 800488a:	4770      	bx	lr
 800488c:	200010e0 	.word	0x200010e0

08004890 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8004890:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8004892:	4b09      	ldr	r3, [pc, #36]	; (80048b8 <arch_switch_to_main_thread+0x28>)
 8004894:	6098      	str	r0, [r3, #8]
{
 8004896:	460d      	mov	r5, r1
 8004898:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 800489a:	f000 f971 	bl	8004b80 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 800489e:	4620      	mov	r0, r4
 80048a0:	f385 8809 	msr	PSP, r5
 80048a4:	2100      	movs	r1, #0
 80048a6:	b663      	cpsie	if
 80048a8:	f381 8811 	msr	BASEPRI, r1
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	2200      	movs	r2, #0
 80048b2:	2300      	movs	r3, #0
 80048b4:	f003 fde3 	bl	800847e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 80048b8:	200010e0 	.word	0x200010e0

080048bc <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 80048bc:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 80048be:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 80048c2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 80048c6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 80048ca:	4904      	ldr	r1, [pc, #16]	; (80048dc <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 80048cc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 80048ce:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 80048d0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 80048d2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 80048d6:	4902      	ldr	r1, [pc, #8]	; (80048e0 <_isr_wrapper+0x24>)
	bx r1
 80048d8:	4708      	bx	r1
 80048da:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 80048dc:	0800a03c 	.word	0x0800a03c
	ldr r1, =z_arm_int_exit
 80048e0:	080048e5 	.word	0x080048e5

080048e4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 80048e4:	4b04      	ldr	r3, [pc, #16]	; (80048f8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 80048e6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 80048e8:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 80048ea:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 80048ec:	d003      	beq.n	80048f6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 80048ee:	4903      	ldr	r1, [pc, #12]	; (80048fc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 80048f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 80048f4:	600a      	str	r2, [r1, #0]

080048f6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 80048f6:	4770      	bx	lr
	ldr r3, =_kernel
 80048f8:	200010e0 	.word	0x200010e0
	ldr r1, =_SCS_ICSR
 80048fc:	e000ed04 	.word	0xe000ed04

08004900 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 8004900:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8004902:	4b19      	ldr	r3, [pc, #100]	; (8004968 <mem_manage_fault+0x68>)
{
 8004904:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8004906:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8004908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 800490a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
 800490c:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 800490e:	0790      	lsls	r0, r2, #30
 8004910:	d519      	bpl.n	8004946 <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
 8004912:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8004914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004916:	0612      	lsls	r2, r2, #24
 8004918:	d515      	bpl.n	8004946 <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
 800491a:	b119      	cbz	r1, 8004924 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 800491c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800491e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004922:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8004924:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8004926:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8004928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800492a:	06d1      	lsls	r1, r2, #27
 800492c:	d40e      	bmi.n	800494c <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 800492e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8004930:	079a      	lsls	r2, r3, #30
 8004932:	d40b      	bmi.n	800494c <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8004934:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8004936:	4a0c      	ldr	r2, [pc, #48]	; (8004968 <mem_manage_fault+0x68>)
 8004938:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800493a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 800493e:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
 8004940:	2300      	movs	r3, #0
 8004942:	7023      	strb	r3, [r4, #0]

	return reason;
}
 8004944:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
 8004946:	f06f 0015 	mvn.w	r0, #21
 800494a:	e7eb      	b.n	8004924 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 800494c:	4b06      	ldr	r3, [pc, #24]	; (8004968 <mem_manage_fault+0x68>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	051b      	lsls	r3, r3, #20
 8004952:	d5ef      	bpl.n	8004934 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8004954:	4629      	mov	r1, r5
 8004956:	f7ff ff85 	bl	8004864 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 800495a:	2800      	cmp	r0, #0
 800495c:	d0ea      	beq.n	8004934 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800495e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8004962:	2002      	movs	r0, #2
 8004964:	e7e7      	b.n	8004936 <mem_manage_fault+0x36>
 8004966:	bf00      	nop
 8004968:	e000ed00 	.word	0xe000ed00

0800496c <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 800496c:	4b0d      	ldr	r3, [pc, #52]	; (80049a4 <bus_fault.constprop.0+0x38>)
 800496e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8004970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8004972:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004974:	0592      	lsls	r2, r2, #22
 8004976:	d508      	bpl.n	800498a <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8004978:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 800497a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800497c:	0412      	lsls	r2, r2, #16
 800497e:	d504      	bpl.n	800498a <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
 8004980:	b118      	cbz	r0, 800498a <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8004982:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004984:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004988:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 800498a:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <bus_fault.constprop.0+0x38>)
 800498c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 800498e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004990:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8004992:	bf58      	it	pl
 8004994:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8004996:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 8004998:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800499a:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
 800499e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 80049a0:	7008      	strb	r0, [r1, #0]

	return reason;
}
 80049a2:	4770      	bx	lr
 80049a4:	e000ed00 	.word	0xe000ed00

080049a8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 80049a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80049aa:	4b4b      	ldr	r3, [pc, #300]	; (8004ad8 <z_arm_fault+0x130>)
 80049ac:	685b      	ldr	r3, [r3, #4]
{
 80049ae:	b08b      	sub	sp, #44	; 0x2c
 80049b0:	460c      	mov	r4, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80049b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b6:	2500      	movs	r5, #0
 80049b8:	f385 8811 	msr	BASEPRI, r5
 80049bc:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 80049c0:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
 80049c4:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 80049c8:	d111      	bne.n	80049ee <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 80049ca:	f002 010c 	and.w	r1, r2, #12
 80049ce:	2908      	cmp	r1, #8
 80049d0:	d00d      	beq.n	80049ee <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 80049d2:	0716      	lsls	r6, r2, #28
 80049d4:	d401      	bmi.n	80049da <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 80049d6:	4604      	mov	r4, r0
			*nested_exc = true;
 80049d8:	2501      	movs	r5, #1
	*recoverable = false;
 80049da:	2200      	movs	r2, #0
	switch (fault) {
 80049dc:	3b03      	subs	r3, #3
	*recoverable = false;
 80049de:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 80049e2:	2b03      	cmp	r3, #3
 80049e4:	d871      	bhi.n	8004aca <z_arm_fault+0x122>
 80049e6:	e8df f003 	tbb	[pc, r3]
 80049ea:	5b04      	.short	0x5b04
 80049ec:	635f      	.short	0x635f
		return NULL;
 80049ee:	462c      	mov	r4, r5
 80049f0:	e7f3      	b.n	80049da <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80049f2:	4a39      	ldr	r2, [pc, #228]	; (8004ad8 <z_arm_fault+0x130>)
 80049f4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80049f6:	f013 0302 	ands.w	r3, r3, #2
 80049fa:	d166      	bne.n	8004aca <z_arm_fault+0x122>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 80049fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80049fe:	2900      	cmp	r1, #0
 8004a00:	db15      	blt.n	8004a2e <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8004a02:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a04:	0049      	lsls	r1, r1, #1
 8004a06:	d512      	bpl.n	8004a2e <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
 8004a08:	69a1      	ldr	r1, [r4, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8004a0a:	f831 0c02 	ldrh.w	r0, [r1, #-2]
 8004a0e:	f64d 7102 	movw	r1, #57090	; 0xdf02
 8004a12:	4288      	cmp	r0, r1
 8004a14:	d00a      	beq.n	8004a2c <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
 8004a16:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
 8004a1a:	b339      	cbz	r1, 8004a6c <z_arm_fault+0xc4>
			reason = mem_manage_fault(esf, 1, recoverable);
 8004a1c:	f10d 0207 	add.w	r2, sp, #7
 8004a20:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 8004a22:	4620      	mov	r0, r4
 8004a24:	f7ff ff6c 	bl	8004900 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
 8004a28:	4603      	mov	r3, r0
		break;
 8004a2a:	e000      	b.n	8004a2e <z_arm_fault+0x86>
			reason = esf->basic.r0;
 8004a2c:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 8004a2e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004a32:	b9ca      	cbnz	r2, 8004a68 <z_arm_fault+0xc0>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8004a34:	ae02      	add	r6, sp, #8
 8004a36:	f104 0720 	add.w	r7, r4, #32
 8004a3a:	6820      	ldr	r0, [r4, #0]
 8004a3c:	6861      	ldr	r1, [r4, #4]
 8004a3e:	4632      	mov	r2, r6
 8004a40:	c203      	stmia	r2!, {r0, r1}
 8004a42:	3408      	adds	r4, #8
 8004a44:	42bc      	cmp	r4, r7
 8004a46:	4616      	mov	r6, r2
 8004a48:	d1f7      	bne.n	8004a3a <z_arm_fault+0x92>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 8004a4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a4c:	2d00      	cmp	r5, #0
 8004a4e:	d03e      	beq.n	8004ace <z_arm_fault+0x126>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8004a50:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004a54:	b921      	cbnz	r1, 8004a60 <z_arm_fault+0xb8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8004a56:	ea6f 2252 	mvn.w	r2, r2, lsr #9
 8004a5a:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8004a5e:	9209      	str	r2, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 8004a60:	a902      	add	r1, sp, #8
 8004a62:	4618      	mov	r0, r3
 8004a64:	f003 fefa 	bl	800885c <z_arm_fatal_error>
}
 8004a68:	b00b      	add	sp, #44	; 0x2c
 8004a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
 8004a6c:	f892 1029 	ldrb.w	r1, [r2, #41]	; 0x29
 8004a70:	b129      	cbz	r1, 8004a7e <z_arm_fault+0xd6>
			reason = bus_fault(esf, 1, recoverable);
 8004a72:	f10d 0107 	add.w	r1, sp, #7
 8004a76:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 8004a78:	f7ff ff78 	bl	800496c <bus_fault.constprop.0>
 8004a7c:	e7d4      	b.n	8004a28 <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
 8004a7e:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 8004a80:	b289      	uxth	r1, r1
 8004a82:	2900      	cmp	r1, #0
 8004a84:	d0d3      	beq.n	8004a2e <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8004a86:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8004a88:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8004a8a:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8004a8c:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8004a8e:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8004a90:	6a91      	ldr	r1, [r2, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8004a92:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004a94:	ea6f 4101 	mvn.w	r1, r1, lsl #16
 8004a98:	ea6f 4111 	mvn.w	r1, r1, lsr #16
 8004a9c:	6291      	str	r1, [r2, #40]	; 0x28
	return reason;
 8004a9e:	e7c6      	b.n	8004a2e <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
 8004aa0:	f10d 0207 	add.w	r2, sp, #7
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	e7bc      	b.n	8004a22 <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
 8004aa8:	f10d 0107 	add.w	r1, sp, #7
 8004aac:	2000      	movs	r0, #0
 8004aae:	e7e3      	b.n	8004a78 <z_arm_fault+0xd0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8004ab0:	4b09      	ldr	r3, [pc, #36]	; (8004ad8 <z_arm_fault+0x130>)
 8004ab2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8004ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8004ab6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8004ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8004aba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8004abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8004abe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ac0:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8004ac4:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8004ac8:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8004aca:	2300      	movs	r3, #0
 8004acc:	e7af      	b.n	8004a2e <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8004ace:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004ad2:	f022 0201 	bic.w	r2, r2, #1
 8004ad6:	e7c2      	b.n	8004a5e <z_arm_fault+0xb6>
 8004ad8:	e000ed00 	.word	0xe000ed00

08004adc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8004adc:	4a02      	ldr	r2, [pc, #8]	; (8004ae8 <z_arm_fault_init+0xc>)
 8004ade:	6953      	ldr	r3, [r2, #20]
 8004ae0:	f043 0310 	orr.w	r3, r3, #16
 8004ae4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 8004ae6:	4770      	bx	lr
 8004ae8:	e000ed00 	.word	0xe000ed00

08004aec <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8004aec:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8004af0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8004af4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8004af6:	4672      	mov	r2, lr
	bl z_arm_fault
 8004af8:	f7ff ff56 	bl	80049a8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8004afc:	bd01      	pop	{r0, pc}
 8004afe:	bf00      	nop

08004b00 <z_arm_interrupt_init>:
 8004b00:	4804      	ldr	r0, [pc, #16]	; (8004b14 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8004b02:	2300      	movs	r3, #0
 8004b04:	2110      	movs	r1, #16
 8004b06:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8004b08:	3301      	adds	r3, #1
 8004b0a:	2b5f      	cmp	r3, #95	; 0x5f
 8004b0c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8004b10:	d1f9      	bne.n	8004b06 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8004b12:	4770      	bx	lr
 8004b14:	e000e100 	.word	0xe000e100

08004b18 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8004b18:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8004b1a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8004b1e:	4808      	ldr	r0, [pc, #32]	; (8004b40 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8004b20:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 8004b24:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8004b26:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8004b2a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8004b2e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8004b30:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8004b32:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8004b36:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8004b3a:	f7ff fdff 	bl	800473c <z_arm_prep_c>
 8004b3e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8004b40:	20001ae0 	.word	0x20001ae0

08004b44 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 8004b44:	4b06      	ldr	r3, [pc, #24]	; (8004b60 <z_impl_k_thread_abort+0x1c>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	4283      	cmp	r3, r0
 8004b4a:	d107      	bne.n	8004b5c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b4c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8004b50:	b123      	cbz	r3, 8004b5c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8004b52:	4a04      	ldr	r2, [pc, #16]	; (8004b64 <z_impl_k_thread_abort+0x20>)
 8004b54:	6853      	ldr	r3, [r2, #4]
 8004b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b5a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
 8004b5c:	f002 bfc0 	b.w	8007ae0 <z_thread_abort>
 8004b60:	200010e0 	.word	0x200010e0
 8004b64:	e000ed00 	.word	0xe000ed00

08004b68 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8004b68:	4b02      	ldr	r3, [pc, #8]	; (8004b74 <z_arm_configure_static_mpu_regions+0xc>)
 8004b6a:	4a03      	ldr	r2, [pc, #12]	; (8004b78 <z_arm_configure_static_mpu_regions+0x10>)
 8004b6c:	4803      	ldr	r0, [pc, #12]	; (8004b7c <z_arm_configure_static_mpu_regions+0x14>)
 8004b6e:	2101      	movs	r1, #1
 8004b70:	f000 b86e 	b.w	8004c50 <arm_core_mpu_configure_static_mpu_regions>
 8004b74:	200a0000 	.word	0x200a0000
 8004b78:	20000000 	.word	0x20000000
 8004b7c:	0800a4ac 	.word	0x0800a4ac

08004b80 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8004b80:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8004b82:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 8004b84:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
 8004b86:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8004b88:	4a04      	ldr	r2, [pc, #16]	; (8004b9c <z_arm_configure_dynamic_mpu_regions+0x1c>)
 8004b8a:	2120      	movs	r1, #32
 8004b8c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8004b90:	4618      	mov	r0, r3
 8004b92:	2101      	movs	r1, #1
 8004b94:	f000 b866 	b.w	8004c64 <arm_core_mpu_configure_dynamic_mpu_regions>
 8004b98:	200007c0 	.word	0x200007c0
 8004b9c:	150b0000 	.word	0x150b0000

08004ba0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8004ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8004ba2:	4f1f      	ldr	r7, [pc, #124]	; (8004c20 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 8004ba4:	2600      	movs	r6, #0
 8004ba6:	428e      	cmp	r6, r1
 8004ba8:	db01      	blt.n	8004bae <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 8004baa:	4610      	mov	r0, r2
 8004bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
 8004bae:	6844      	ldr	r4, [r0, #4]
 8004bb0:	b39c      	cbz	r4, 8004c1a <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
 8004bb2:	b153      	cbz	r3, 8004bca <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 8004bb4:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 8004bb8:	ea14 0f0c 	tst.w	r4, ip
 8004bbc:	d118      	bne.n	8004bf0 <mpu_configure_regions+0x50>
		&&
 8004bbe:	2c1f      	cmp	r4, #31
 8004bc0:	d916      	bls.n	8004bf0 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
 8004bc2:	6805      	ldr	r5, [r0, #0]
		&&
 8004bc4:	ea1c 0f05 	tst.w	ip, r5
 8004bc8:	d112      	bne.n	8004bf0 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 8004bca:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 8004bcc:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8004bce:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8004bd2:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
 8004bd4:	d90f      	bls.n	8004bf6 <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
 8004bd6:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8004bda:	d80e      	bhi.n	8004bfa <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8004bdc:	3c01      	subs	r4, #1
 8004bde:	fab4 f484 	clz	r4, r4
 8004be2:	f1c4 041f 	rsb	r4, r4, #31
 8004be6:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 8004be8:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8004bea:	ea4c 0404 	orr.w	r4, ip, r4
 8004bee:	d906      	bls.n	8004bfe <mpu_configure_regions+0x5e>
			return -EINVAL;
 8004bf0:	f06f 0215 	mvn.w	r2, #21
 8004bf4:	e7d9      	b.n	8004baa <mpu_configure_regions+0xa>
		return REGION_32B;
 8004bf6:	2408      	movs	r4, #8
 8004bf8:	e7f6      	b.n	8004be8 <mpu_configure_regions+0x48>
		return REGION_4G;
 8004bfa:	243e      	movs	r4, #62	; 0x3e
 8004bfc:	e7f4      	b.n	8004be8 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8004bfe:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
 8004c02:	4315      	orrs	r5, r2
 8004c04:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8004c08:	f044 0401 	orr.w	r4, r4, #1
 8004c0c:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8004c10:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
 8004c14:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8004c16:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
 8004c1a:	3601      	adds	r6, #1
 8004c1c:	300c      	adds	r0, #12
 8004c1e:	e7c2      	b.n	8004ba6 <mpu_configure_regions+0x6>
 8004c20:	e000ed00 	.word	0xe000ed00

08004c24 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8004c24:	4b04      	ldr	r3, [pc, #16]	; (8004c38 <arm_core_mpu_enable+0x14>)
 8004c26:	2205      	movs	r2, #5
 8004c28:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8004c2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004c30:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	e000ed00 	.word	0xe000ed00

08004c3c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8004c3c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8004c40:	4b02      	ldr	r3, [pc, #8]	; (8004c4c <arm_core_mpu_disable+0x10>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	e000ed00 	.word	0xe000ed00

08004c50 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8004c50:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 8004c52:	4c03      	ldr	r4, [pc, #12]	; (8004c60 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8004c54:	2301      	movs	r3, #1
 8004c56:	7822      	ldrb	r2, [r4, #0]
 8004c58:	f7ff ffa2 	bl	8004ba0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8004c5c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 8004c5e:	bd10      	pop	{r4, pc}
 8004c60:	2000113c 	.word	0x2000113c

08004c64 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 8004c64:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8004c66:	4a09      	ldr	r2, [pc, #36]	; (8004c8c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
 8004c68:	2300      	movs	r3, #0
 8004c6a:	7812      	ldrb	r2, [r2, #0]
 8004c6c:	f7ff ff98 	bl	8004ba0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8004c70:	f110 0f16 	cmn.w	r0, #22
 8004c74:	d002      	beq.n	8004c7c <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8004c76:	4a06      	ldr	r2, [pc, #24]	; (8004c90 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8004c78:	2807      	cmp	r0, #7
 8004c7a:	dd00      	ble.n	8004c7e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 8004c7c:	bd08      	pop	{r3, pc}
 8004c7e:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 8004c82:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8004c86:	3001      	adds	r0, #1
 8004c88:	e7f6      	b.n	8004c78 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
 8004c8a:	bf00      	nop
 8004c8c:	2000113c 	.word	0x2000113c
 8004c90:	e000ed00 	.word	0xe000ed00

08004c94 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8004c94:	4914      	ldr	r1, [pc, #80]	; (8004ce8 <z_arm_mpu_init+0x54>)
 8004c96:	6808      	ldr	r0, [r1, #0]
 8004c98:	2808      	cmp	r0, #8
{
 8004c9a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 8004c9c:	d821      	bhi.n	8004ce2 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8004c9e:	f7ff ffcd 	bl	8004c3c <arm_core_mpu_disable>
 8004ca2:	4c12      	ldr	r4, [pc, #72]	; (8004cec <z_arm_mpu_init+0x58>)
 8004ca4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	4290      	cmp	r0, r2
 8004caa:	f101 010c 	add.w	r1, r1, #12
 8004cae:	d105      	bne.n	8004cbc <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8004cb0:	4b0f      	ldr	r3, [pc, #60]	; (8004cf0 <z_arm_mpu_init+0x5c>)
 8004cb2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 8004cb4:	f7ff ffb6 	bl	8004c24 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 8004cb8:	2000      	movs	r0, #0
}
 8004cba:	bd10      	pop	{r4, pc}
 8004cbc:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8004cc0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 8004cc4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8004cce:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8004cd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cd6:	f043 0301 	orr.w	r3, r3, #1
 8004cda:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8004cde:	3201      	adds	r2, #1
 8004ce0:	e7e2      	b.n	8004ca8 <z_arm_mpu_init+0x14>
		return -1;
 8004ce2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ce6:	e7e8      	b.n	8004cba <z_arm_mpu_init+0x26>
 8004ce8:	0800a4b8 	.word	0x0800a4b8
 8004cec:	e000ed00 	.word	0xe000ed00
 8004cf0:	2000113c 	.word	0x2000113c

08004cf4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8004cf4:	4b01      	ldr	r3, [pc, #4]	; (8004cfc <__stdout_hook_install+0x8>)
 8004cf6:	6018      	str	r0, [r3, #0]
}
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	2000010c 	.word	0x2000010c

08004d00 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 8004d00:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 8004d02:	4c07      	ldr	r4, [pc, #28]	; (8004d20 <_sbrk+0x20>)
 8004d04:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 8004d06:	18c2      	adds	r2, r0, r3
 8004d08:	4806      	ldr	r0, [pc, #24]	; (8004d24 <_sbrk+0x24>)
 8004d0a:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
 8004d0e:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
 8004d12:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
 8004d14:	bf3a      	itte	cc
 8004d16:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
 8004d18:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
 8004d1a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
 8004d1e:	bd10      	pop	{r4, pc}
 8004d20:	200007cc 	.word	0x200007cc
 8004d24:	20002f20 	.word	0x20002f20

08004d28 <board_swan_init>:

#include <drivers/gpio.h>
#include <init.h>

static int board_swan_init(const struct device *dev)
{
 8004d28:	b530      	push	{r4, r5, lr}
	const struct gpio_dt_spec gpio4 =
 8004d2a:	4b11      	ldr	r3, [pc, #68]	; (8004d70 <board_swan_init+0x48>)
 8004d2c:	e893 0003 	ldmia.w	r3, {r0, r1}
{
 8004d30:	b085      	sub	sp, #20
	const struct gpio_dt_spec gpio4 =
 8004d32:	466d      	mov	r5, sp
 8004d34:	e885 0003 	stmia.w	r5, {r0, r1}
		GPIO_DT_SPEC_GET(DT_PATH(zephyr_user), pull_up_gpios);
	const struct gpio_dt_spec gpio6 =
 8004d38:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004d3c:	ac02      	add	r4, sp, #8
 8004d3e:	e884 0003 	stmia.w	r4, {r0, r1}
 8004d42:	480c      	ldr	r0, [pc, #48]	; (8004d74 <board_swan_init+0x4c>)
 8004d44:	f004 fe66 	bl	8009a14 <z_device_is_ready>
		GPIO_DT_SPEC_GET(DT_PATH(zephyr_user), no_pull_gpios);

	ARG_UNUSED(dev);

	if (!device_is_ready(gpio4.port) ||
 8004d48:	b918      	cbnz	r0, 8004d52 <board_swan_init+0x2a>
	    !device_is_ready(gpio6.port)) {
		return -ENODEV;
 8004d4a:	f06f 0012 	mvn.w	r0, #18

	(void)gpio_pin_configure_dt(&gpio4, GPIO_PUSH_PULL);
	(void)gpio_pin_configure_dt(&gpio6, (GPIO_OPEN_DRAIN | GPIO_SPEED_LOW));

    return 0;
}
 8004d4e:	b005      	add	sp, #20
 8004d50:	bd30      	pop	{r4, r5, pc}
	    !device_is_ready(gpio6.port)) {
 8004d52:	9802      	ldr	r0, [sp, #8]
 8004d54:	f004 fe5e 	bl	8009a14 <z_device_is_ready>
	if (!device_is_ready(gpio4.port) ||
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	d0f6      	beq.n	8004d4a <board_swan_init+0x22>
	(void)gpio_pin_configure_dt(&gpio4, GPIO_PUSH_PULL);
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	4628      	mov	r0, r5
 8004d60:	f003 fd9a 	bl	8008898 <gpio_pin_configure_dt.isra.0>
	(void)gpio_pin_configure_dt(&gpio6, (GPIO_OPEN_DRAIN | GPIO_SPEED_LOW));
 8004d64:	4620      	mov	r0, r4
 8004d66:	2106      	movs	r1, #6
 8004d68:	f003 fd96 	bl	8008898 <gpio_pin_configure_dt.isra.0>
    return 0;
 8004d6c:	2000      	movs	r0, #0
 8004d6e:	e7ee      	b.n	8004d4e <board_swan_init+0x26>
 8004d70:	0800a3e0 	.word	0x0800a3e0
 8004d74:	08009f04 	.word	0x08009f04

08004d78 <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 8004d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004d7c:	4f0d      	ldr	r7, [pc, #52]	; (8004db4 <__stm32_exti_isr.isra.0+0x3c>)
 8004d7e:	4604      	mov	r4, r0
 8004d80:	460e      	mov	r6, r1
 8004d82:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8004d84:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8004d88:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 8004d8c:	42b4      	cmp	r4, r6
 8004d8e:	db01      	blt.n	8004d94 <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 8004d90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d94:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8004d96:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 8004d9a:	ea33 0202 	bics.w	r2, r3, r2
 8004d9e:	d107      	bne.n	8004db0 <__stm32_exti_isr.isra.0+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004da0:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 8004da2:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8004da6:	b11b      	cbz	r3, 8004db0 <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 8004da8:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 8004dac:	4620      	mov	r0, r4
 8004dae:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8004db0:	3401      	adds	r4, #1
 8004db2:	e7eb      	b.n	8004d8c <__stm32_exti_isr.isra.0+0x14>
 8004db4:	40010400 	.word	0x40010400

08004db8 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004db8:	4a04      	ldr	r2, [pc, #16]	; (8004dcc <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 8004dba:	2301      	movs	r3, #1
 8004dbc:	6811      	ldr	r1, [r2, #0]
 8004dbe:	4083      	lsls	r3, r0
 8004dc0:	430b      	orrs	r3, r1
 8004dc2:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8004dc4:	4b02      	ldr	r3, [pc, #8]	; (8004dd0 <stm32_exti_enable+0x18>)
 8004dc6:	5618      	ldrsb	r0, [r3, r0]
 8004dc8:	f7ff bc78 	b.w	80046bc <arch_irq_enable>
 8004dcc:	40010400 	.word	0x40010400
 8004dd0:	0800ae7a 	.word	0x0800ae7a

08004dd4 <stm32_exti_disable>:
	if (line < 32) {
 8004dd4:	281f      	cmp	r0, #31
 8004dd6:	dc07      	bgt.n	8004de8 <stm32_exti_disable+0x14>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004dd8:	4904      	ldr	r1, [pc, #16]	; (8004dec <stm32_exti_disable+0x18>)
		LL_EXTI_DisableIT_0_31(1 << line);
 8004dda:	2201      	movs	r2, #1
 8004ddc:	680b      	ldr	r3, [r1, #0]
 8004dde:	fa02 f000 	lsl.w	r0, r2, r0
 8004de2:	ea23 0000 	bic.w	r0, r3, r0
 8004de6:	6008      	str	r0, [r1, #0]
}
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	40010400 	.word	0x40010400

08004df0 <stm32_exti_trigger>:
	switch (trigger) {
 8004df0:	2903      	cmp	r1, #3
 8004df2:	d80f      	bhi.n	8004e14 <stm32_exti_trigger+0x24>
 8004df4:	e8df f001 	tbb	[pc, r1]
 8004df8:	23170f02 	.word	0x23170f02
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004dfc:	4b15      	ldr	r3, [pc, #84]	; (8004e54 <stm32_exti_trigger+0x64>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8004dfe:	2201      	movs	r2, #1
 8004e00:	6899      	ldr	r1, [r3, #8]
 8004e02:	fa02 f000 	lsl.w	r0, r2, r0
 8004e06:	ea21 0100 	bic.w	r1, r1, r0
 8004e0a:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004e12:	60d8      	str	r0, [r3, #12]
}
 8004e14:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8004e16:	2301      	movs	r3, #1
 8004e18:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004e1c:	4b0d      	ldr	r3, [pc, #52]	; (8004e54 <stm32_exti_trigger+0x64>)
 8004e1e:	689a      	ldr	r2, [r3, #8]
 8004e20:	4302      	orrs	r2, r0
 8004e22:	609a      	str	r2, [r3, #8]
 8004e24:	e7f2      	b.n	8004e0c <stm32_exti_trigger+0x1c>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8004e26:	2301      	movs	r3, #1
 8004e28:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004e2c:	4b09      	ldr	r3, [pc, #36]	; (8004e54 <stm32_exti_trigger+0x64>)
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	4302      	orrs	r2, r0
 8004e32:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	ea22 0000 	bic.w	r0, r2, r0
 8004e3a:	6098      	str	r0, [r3, #8]
}
 8004e3c:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8004e3e:	2301      	movs	r3, #1
 8004e40:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004e44:	4b03      	ldr	r3, [pc, #12]	; (8004e54 <stm32_exti_trigger+0x64>)
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	4302      	orrs	r2, r0
 8004e4a:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	4310      	orrs	r0, r2
 8004e50:	e7df      	b.n	8004e12 <stm32_exti_trigger+0x22>
 8004e52:	bf00      	nop
 8004e54:	40010400 	.word	0x40010400

08004e58 <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 8004e58:	4b07      	ldr	r3, [pc, #28]	; (8004e78 <stm32_exti_set_callback+0x20>)
{
 8004e5a:	b510      	push	{r4, lr}
 8004e5c:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 8004e5e:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8004e62:	b928      	cbnz	r0, 8004e70 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8004e64:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 8004e68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004e6c:	605a      	str	r2, [r3, #4]

	return 0;
}
 8004e6e:	bd10      	pop	{r4, pc}
		return -EBUSY;
 8004e70:	f06f 000f 	mvn.w	r0, #15
 8004e74:	e7fb      	b.n	8004e6e <stm32_exti_set_callback+0x16>
 8004e76:	bf00      	nop
 8004e78:	200007d0 	.word	0x200007d0

08004e7c <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8004e7c:	4b03      	ldr	r3, [pc, #12]	; (8004e8c <stm32_exti_unset_callback+0x10>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8004e84:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8004e88:	605a      	str	r2, [r3, #4]
}
 8004e8a:	4770      	bx	lr
 8004e8c:	200007d0 	.word	0x200007d0

08004e90 <usb_dc_stm32_get_ep_state>:

static struct usb_dc_stm32_ep_state *usb_dc_stm32_get_ep_state(uint8_t ep)
{
	struct usb_dc_stm32_ep_state *ep_state_base;

	if (USB_EP_GET_IDX(ep) >= USB_NUM_BIDIR_ENDPOINTS) {
 8004e90:	f020 0280 	bic.w	r2, r0, #128	; 0x80
 8004e94:	2a05      	cmp	r2, #5
 8004e96:	d80b      	bhi.n	8004eb0 <usb_dc_stm32_get_ep_state+0x20>
	}

	if (USB_EP_DIR_IS_OUT(ep)) {
		ep_state_base = usb_dc_stm32_state.out_ep_state;
	} else {
		ep_state_base = usb_dc_stm32_state.in_ep_state;
 8004e98:	4b06      	ldr	r3, [pc, #24]	; (8004eb4 <usb_dc_stm32_get_ep_state+0x24>)
 8004e9a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004e9e:	f103 01d8 	add.w	r1, r3, #216	; 0xd8
 8004ea2:	bf0c      	ite	eq
 8004ea4:	4618      	moveq	r0, r3
 8004ea6:	4608      	movne	r0, r1
	}

	return ep_state_base + USB_EP_GET_IDX(ep);
 8004ea8:	2324      	movs	r3, #36	; 0x24
 8004eaa:	fb03 0002 	mla	r0, r3, r2, r0
 8004eae:	4770      	bx	lr
		return NULL;
 8004eb0:	2000      	movs	r0, #0
}
 8004eb2:	4770      	bx	lr
 8004eb4:	20000c5c 	.word	0x20000c5c

08004eb8 <usb_dc_stm32_isr>:

static void usb_dc_stm32_isr(const void *arg)
{
	HAL_PCD_IRQHandler(&usb_dc_stm32_state.pcd);
 8004eb8:	4801      	ldr	r0, [pc, #4]	; (8004ec0 <usb_dc_stm32_isr+0x8>)
 8004eba:	f001 b8fb 	b.w	80060b4 <HAL_PCD_IRQHandler>
 8004ebe:	bf00      	nop
 8004ec0:	20000850 	.word	0x20000850

08004ec4 <usb_dc_attach>:
}

/* Zephyr USB device controller API implementation */

int usb_dc_attach(void)
{
 8004ec4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct stm32_pclken pclken = {
 8004ec8:	4b52      	ldr	r3, [pc, #328]	; (8005014 <usb_dc_attach+0x150>)
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004eca:	4c53      	ldr	r4, [pc, #332]	; (8005018 <usb_dc_attach+0x154>)
 8004ecc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004ed0:	46e8      	mov	r8, sp
 8004ed2:	e888 0003 	stmia.w	r8, {r0, r1}
 8004ed6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8004eda:	f043 0301 	orr.w	r3, r3, #1
 8004ede:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RCC_CRRCR_HSI48RDY) ? 1UL : 0UL);
 8004ee2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8004ee6:	0798      	lsls	r0, r3, #30
 8004ee8:	d5fb      	bpl.n	8004ee2 <usb_dc_attach+0x1e>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSBClockSource(uint32_t USBxSource)
{
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, USBxSource);
 8004eea:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004eee:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004ef2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8004ef6:	4d49      	ldr	r5, [pc, #292]	; (800501c <usb_dc_attach+0x158>)
 8004ef8:	4628      	mov	r0, r5
 8004efa:	f004 fd8b 	bl	8009a14 <z_device_is_ready>
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
				   clock_control_subsys_t sys)
{
	if (!device_is_ready(dev)) {
 8004efe:	b928      	cbnz	r0, 8004f0c <usb_dc_attach+0x48>
		return -EIO;
 8004f00:	f06f 0704 	mvn.w	r7, #4
	LL_PWR_EnableVddUSB();
#endif /* defined(LL_APB1_GRP1_PERIPH_PWR) */
#endif /* PWR_CR2_USV */

	return 0;
}
 8004f04:	4638      	mov	r0, r7
 8004f06:	b002      	add	sp, #8
 8004f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8004f0c:	68ab      	ldr	r3, [r5, #8]
 8004f0e:	4641      	mov	r1, r8
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4628      	mov	r0, r5
 8004f14:	4798      	blx	r3
	if (clock_control_on(clk, (clock_control_subsys_t *)&pclken) != 0) {
 8004f16:	4607      	mov	r7, r0
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	d1f1      	bne.n	8004f00 <usb_dc_attach+0x3c>
	usb_dc_stm32_state.pcd.Instance = USB_OTG_FS;
 8004f1c:	4e40      	ldr	r6, [pc, #256]	; (8005020 <usb_dc_attach+0x15c>)
	if (!strncmp(USB_MAXIMUM_SPEED, "high-speed", 10)) {
 8004f1e:	4841      	ldr	r0, [pc, #260]	; (8005024 <usb_dc_attach+0x160>)
	usb_dc_stm32_state.pcd.Init.dev_endpoints = USB_NUM_BIDIR_ENDPOINTS;
 8004f20:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8004f24:	2306      	movs	r3, #6
 8004f26:	e9c6 1300 	strd	r1, r3, [r6]
	if (!strncmp(USB_MAXIMUM_SPEED, "high-speed", 10)) {
 8004f2a:	220a      	movs	r2, #10
 8004f2c:	493e      	ldr	r1, [pc, #248]	; (8005028 <usb_dc_attach+0x164>)
 8004f2e:	f004 ff1d 	bl	8009d6c <strncmp>
 8004f32:	2800      	cmp	r0, #0
 8004f34:	d066      	beq.n	8005004 <usb_dc_attach+0x140>
	} else if (!strncmp(USB_MAXIMUM_SPEED, "full-speed", 10)) {
 8004f36:	493b      	ldr	r1, [pc, #236]	; (8005024 <usb_dc_attach+0x160>)
 8004f38:	220a      	movs	r2, #10
 8004f3a:	4608      	mov	r0, r1
 8004f3c:	f004 ff16 	bl	8009d6c <strncmp>
	uint32_t speed = USB_OTG_SPEED_FULL;
 8004f40:	2800      	cmp	r0, #0
 8004f42:	bf0c      	ite	eq
 8004f44:	2301      	moveq	r3, #1
 8004f46:	2303      	movne	r3, #3
	usb_dc_stm32_state.pcd.Init.vbus_sensing_enable = DISABLE;
 8004f48:	2500      	movs	r5, #0
	usb_dc_stm32_state.pcd.Init.speed = usb_dc_stm32_get_maximum_speed();
 8004f4a:	60f3      	str	r3, [r6, #12]
	usb_dc_stm32_state.pcd.Init.ep0_mps = USB_OTG_MAX_EP0_SIZE;
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	2340      	movs	r3, #64	; 0x40
 8004f50:	e9c6 3205 	strd	r3, r2, [r6, #20]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 8004f54:	4835      	ldr	r0, [pc, #212]	; (800502c <usb_dc_attach+0x168>)
	usb_dc_stm32_state.pcd.Init.vbus_sensing_enable = DISABLE;
 8004f56:	62f5      	str	r5, [r6, #44]	; 0x2c
 8004f58:	4642      	mov	r2, r8
 8004f5a:	4629      	mov	r1, r5
	usb_dc_stm32_state.pcd.Init.dma_enable = DISABLE;
 8004f5c:	6135      	str	r5, [r6, #16]
 8004f5e:	f004 f9d2 	bl	8009306 <pinctrl_lookup_state>
	if (ret < 0) {
 8004f62:	42a8      	cmp	r0, r5
 8004f64:	db05      	blt.n	8004f72 <usb_dc_attach+0xae>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 8004f66:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8004f68:	462a      	mov	r2, r5
 8004f6a:	7919      	ldrb	r1, [r3, #4]
 8004f6c:	6818      	ldr	r0, [r3, #0]
 8004f6e:	f001 f85d 	bl	800602c <pinctrl_configure_pins>
	status = HAL_PCD_Init(&usb_dc_stm32_state.pcd);
 8004f72:	482b      	ldr	r0, [pc, #172]	; (8005020 <usb_dc_attach+0x15c>)
 8004f74:	f004 f9e0 	bl	8009338 <HAL_PCD_Init>
	if (status != HAL_OK) {
 8004f78:	2800      	cmp	r0, #0
 8004f7a:	d1c1      	bne.n	8004f00 <usb_dc_attach+0x3c>
	status = HAL_PCD_Start(&usb_dc_stm32_state.pcd);
 8004f7c:	4828      	ldr	r0, [pc, #160]	; (8005020 <usb_dc_attach+0x15c>)
 8004f7e:	f004 fa66 	bl	800944e <HAL_PCD_Start>
	if (status != HAL_OK) {
 8004f82:	4605      	mov	r5, r0
 8004f84:	2800      	cmp	r0, #0
 8004f86:	d1bb      	bne.n	8004f00 <usb_dc_attach+0x3c>
	usb_dc_stm32_state.out_ep_state[EP0_IDX].ep_mps = EP0_MPS;
 8004f88:	2340      	movs	r3, #64	; 0x40
	usb_dc_stm32_state.out_ep_state[EP0_IDX].ep_type = EP_TYPE_CTRL;
 8004f8a:	f886 0410 	strb.w	r0, [r6, #1040]	; 0x410
	usb_dc_stm32_state.in_ep_state[EP0_IDX].ep_type = EP_TYPE_CTRL;
 8004f8e:	f886 04e8 	strb.w	r0, [r6, #1256]	; 0x4e8
	HAL_PCDEx_SetRxFiFo(&usb_dc_stm32_state.pcd, FIFO_EP_WORDS);
 8004f92:	212d      	movs	r1, #45	; 0x2d
 8004f94:	4822      	ldr	r0, [pc, #136]	; (8005020 <usb_dc_attach+0x15c>)
	usb_dc_stm32_state.out_ep_state[EP0_IDX].ep_mps = EP0_MPS;
 8004f96:	f8a6 340c 	strh.w	r3, [r6, #1036]	; 0x40c
	usb_dc_stm32_state.in_ep_state[EP0_IDX].ep_mps = EP0_MPS;
 8004f9a:	f8a6 34e4 	strh.w	r3, [r6, #1252]	; 0x4e4
	HAL_PCDEx_SetRxFiFo(&usb_dc_stm32_state.pcd, FIFO_EP_WORDS);
 8004f9e:	4e24      	ldr	r6, [pc, #144]	; (8005030 <usb_dc_attach+0x16c>)
 8004fa0:	f004 fbbd 	bl	800971e <HAL_PCDEx_SetRxFiFo>
		HAL_PCDEx_SetTxFiFo(&usb_dc_stm32_state.pcd, i,
 8004fa4:	f5a6 689f 	sub.w	r8, r6, #1272	; 0x4f8
 8004fa8:	222d      	movs	r2, #45	; 0x2d
 8004faa:	b2e9      	uxtb	r1, r5
 8004fac:	4640      	mov	r0, r8
 8004fae:	f004 fb96 	bl	80096de <HAL_PCDEx_SetTxFiFo>
	return z_impl_k_sem_init(sem, initial_count, limit);
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	4611      	mov	r1, r2
	for (i = 0U; i < USB_NUM_BIDIR_ENDPOINTS; i++) {
 8004fb8:	3501      	adds	r5, #1
 8004fba:	f004 fd7f 	bl	8009abc <z_impl_k_sem_init>
 8004fbe:	2d06      	cmp	r5, #6
 8004fc0:	f106 0624 	add.w	r6, r6, #36	; 0x24
 8004fc4:	d1f0      	bne.n	8004fa8 <usb_dc_attach+0xe4>
	IRQ_CONNECT(USB_IRQ, USB_IRQ_PRI,
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	4611      	mov	r1, r2
 8004fca:	2043      	movs	r0, #67	; 0x43
 8004fcc:	f7ff fb9a 	bl	8004704 <z_arm_irq_priority_set>
	irq_enable(USB_IRQ);
 8004fd0:	2043      	movs	r0, #67	; 0x43
 8004fd2:	f7ff fb73 	bl	80046bc <arch_irq_enable>
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8004fd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004fd8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004fdc:	4b15      	ldr	r3, [pc, #84]	; (8005034 <usb_dc_attach+0x170>)
 8004fde:	d113      	bne.n	8005008 <usb_dc_attach+0x144>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004fe0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004fe2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004fe6:	65a2      	str	r2, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004fe8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004fea:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004fee:	9200      	str	r2, [sp, #0]
  (void)tmpreg;
 8004ff0:	9a00      	ldr	r2, [sp, #0]
  * @rmtoll CR2          USV           LL_PWR_EnableVddUSB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ff8:	605a      	str	r2, [r3, #4]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8004ffa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005000:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8005002:	e77f      	b.n	8004f04 <usb_dc_attach+0x40>
		speed = USB_OTG_SPEED_HIGH;
 8005004:	463b      	mov	r3, r7
 8005006:	e79f      	b.n	8004f48 <usb_dc_attach+0x84>
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800500e:	605a      	str	r2, [r3, #4]
}
 8005010:	e778      	b.n	8004f04 <usb_dc_attach+0x40>
 8005012:	bf00      	nop
 8005014:	0800a3f0 	.word	0x0800a3f0
 8005018:	40021000 	.word	0x40021000
 800501c:	08009e8c 	.word	0x08009e8c
 8005020:	20000850 	.word	0x20000850
 8005024:	0800ae95 	.word	0x0800ae95
 8005028:	0800ae8a 	.word	0x0800ae8a
 800502c:	0800a4d8 	.word	0x0800a4d8
 8005030:	20000d48 	.word	0x20000d48
 8005034:	40007000 	.word	0x40007000

08005038 <usb_dc_set_status_callback>:

void usb_dc_set_status_callback(const usb_dc_status_callback cb)
{
	LOG_DBG("");

	usb_dc_stm32_state.status_cb = cb;
 8005038:	4b01      	ldr	r3, [pc, #4]	; (8005040 <usb_dc_set_status_callback+0x8>)
 800503a:	f8c3 0408 	str.w	r0, [r3, #1032]	; 0x408
}
 800503e:	4770      	bx	lr
 8005040:	20000850 	.word	0x20000850

08005044 <usb_dc_set_address>:

int usb_dc_set_address(const uint8_t addr)
{
 8005044:	4601      	mov	r1, r0
 8005046:	b508      	push	{r3, lr}
	HAL_StatusTypeDef status;

	LOG_DBG("addr %u (0x%02x)", addr, addr);

	status = HAL_PCD_SetAddress(&usb_dc_stm32_state.pcd, addr);
 8005048:	4804      	ldr	r0, [pc, #16]	; (800505c <usb_dc_set_address+0x18>)
 800504a:	f004 fa1f 	bl	800948c <HAL_PCD_SetAddress>
	if (status != HAL_OK) {
		LOG_ERR("HAL_PCD_SetAddress failed(0x%02x), %d", addr,
			(int)status);
		return -EIO;
 800504e:	2800      	cmp	r0, #0
	}

	return 0;
}
 8005050:	bf14      	ite	ne
 8005052:	f06f 0004 	mvnne.w	r0, #4
 8005056:	2000      	moveq	r0, #0
 8005058:	bd08      	pop	{r3, pc}
 800505a:	bf00      	nop
 800505c:	20000850 	.word	0x20000850

08005060 <usb_dc_ep_start_read>:

int usb_dc_ep_start_read(uint8_t ep, uint8_t *data, uint32_t max_data_len)
{
 8005060:	b508      	push	{r3, lr}
 8005062:	4613      	mov	r3, r2
	HAL_StatusTypeDef status;

	LOG_DBG("ep 0x%02x, len %u", ep, max_data_len);

	/* we flush EP0_IN by doing a 0 length receive on it */
	if (!USB_EP_DIR_IS_OUT(ep) && (ep != EP0_IN || max_data_len)) {
 8005064:	0602      	lsls	r2, r0, #24
{
 8005066:	4601      	mov	r1, r0
	if (!USB_EP_DIR_IS_OUT(ep) && (ep != EP0_IN || max_data_len)) {
 8005068:	d502      	bpl.n	8005070 <usb_dc_ep_start_read+0x10>
 800506a:	2880      	cmp	r0, #128	; 0x80
 800506c:	d112      	bne.n	8005094 <usb_dc_ep_start_read+0x34>
 800506e:	b98b      	cbnz	r3, 8005094 <usb_dc_ep_start_read+0x34>
	if (max_data_len > EP_MPS) {
		max_data_len = EP_MPS;
	}

	status = HAL_PCD_EP_Receive(&usb_dc_stm32_state.pcd, ep,
				    usb_dc_stm32_state.ep_buf[USB_EP_GET_IDX(ep)],
 8005070:	480a      	ldr	r0, [pc, #40]	; (800509c <usb_dc_ep_start_read+0x3c>)
 8005072:	f021 0280 	bic.w	r2, r1, #128	; 0x80
	status = HAL_PCD_EP_Receive(&usb_dc_stm32_state.pcd, ep,
 8005076:	2b40      	cmp	r3, #64	; 0x40
				    usb_dc_stm32_state.ep_buf[USB_EP_GET_IDX(ep)],
 8005078:	eb00 1282 	add.w	r2, r0, r2, lsl #6
	status = HAL_PCD_EP_Receive(&usb_dc_stm32_state.pcd, ep,
 800507c:	bf28      	it	cs
 800507e:	2340      	movcs	r3, #64	; 0x40
 8005080:	f202 52bc 	addw	r2, r2, #1468	; 0x5bc
 8005084:	f004 fa7d 	bl	8009582 <HAL_PCD_EP_Receive>
				    max_data_len);
	if (status != HAL_OK) {
		LOG_ERR("HAL_PCD_EP_Receive failed(0x%02x), %d", ep,
			(int)status);
		return -EIO;
 8005088:	2800      	cmp	r0, #0
 800508a:	bf0c      	ite	eq
 800508c:	2000      	moveq	r0, #0
 800508e:	f06f 0004 	mvnne.w	r0, #4
	}

	return 0;
}
 8005092:	bd08      	pop	{r3, pc}
		return -EINVAL;
 8005094:	f06f 0015 	mvn.w	r0, #21
 8005098:	e7fb      	b.n	8005092 <usb_dc_ep_start_read+0x32>
 800509a:	bf00      	nop
 800509c:	20000850 	.word	0x20000850

080050a0 <usb_dc_ep_get_read_count>:

int usb_dc_ep_get_read_count(uint8_t ep, uint32_t *read_bytes)
{
	if (!USB_EP_DIR_IS_OUT(ep) || !read_bytes) {
 80050a0:	0603      	lsls	r3, r0, #24
{
 80050a2:	b510      	push	{r4, lr}
 80050a4:	460c      	mov	r4, r1
	if (!USB_EP_DIR_IS_OUT(ep) || !read_bytes) {
 80050a6:	d407      	bmi.n	80050b8 <usb_dc_ep_get_read_count+0x18>
 80050a8:	b131      	cbz	r1, 80050b8 <usb_dc_ep_get_read_count+0x18>
		LOG_ERR("invalid ep 0x%02x", ep);
		return -EINVAL;
	}

	*read_bytes = HAL_PCD_EP_GetRxCount(&usb_dc_stm32_state.pcd, ep);
 80050aa:	4601      	mov	r1, r0
 80050ac:	4804      	ldr	r0, [pc, #16]	; (80050c0 <usb_dc_ep_get_read_count+0x20>)
 80050ae:	f004 fa86 	bl	80095be <HAL_PCD_EP_GetRxCount>
 80050b2:	6020      	str	r0, [r4, #0]

	return 0;
 80050b4:	2000      	movs	r0, #0
}
 80050b6:	bd10      	pop	{r4, pc}
		return -EINVAL;
 80050b8:	f06f 0015 	mvn.w	r0, #21
 80050bc:	e7fb      	b.n	80050b6 <usb_dc_ep_get_read_count+0x16>
 80050be:	bf00      	nop
 80050c0:	20000850 	.word	0x20000850

080050c4 <usb_dc_ep_set_stall>:

	return 0;
}

int usb_dc_ep_set_stall(const uint8_t ep)
{
 80050c4:	b538      	push	{r3, r4, r5, lr}
 80050c6:	4605      	mov	r5, r0
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 80050c8:	f7ff fee2 	bl	8004e90 <usb_dc_stm32_get_ep_state>
	HAL_StatusTypeDef status;

	LOG_DBG("ep 0x%02x", ep);

	if (!ep_state) {
 80050cc:	4604      	mov	r4, r0
 80050ce:	b138      	cbz	r0, 80050e0 <usb_dc_ep_set_stall+0x1c>
		return -EINVAL;
	}

	status = HAL_PCD_EP_SetStall(&usb_dc_stm32_state.pcd, ep);
 80050d0:	4806      	ldr	r0, [pc, #24]	; (80050ec <usb_dc_ep_set_stall+0x28>)
 80050d2:	4629      	mov	r1, r5
 80050d4:	f004 fa96 	bl	8009604 <HAL_PCD_EP_SetStall>
	if (status != HAL_OK) {
 80050d8:	b928      	cbnz	r0, 80050e6 <usb_dc_ep_set_stall+0x22>
		LOG_ERR("HAL_PCD_EP_SetStall failed(0x%02x), %d", ep,
			(int)status);
		return -EIO;
	}

	ep_state->ep_stalled = 1U;
 80050da:	2301      	movs	r3, #1
 80050dc:	7163      	strb	r3, [r4, #5]

	return 0;
}
 80050de:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 80050e0:	f06f 0015 	mvn.w	r0, #21
 80050e4:	e7fb      	b.n	80050de <usb_dc_ep_set_stall+0x1a>
		return -EIO;
 80050e6:	f06f 0004 	mvn.w	r0, #4
 80050ea:	e7f8      	b.n	80050de <usb_dc_ep_set_stall+0x1a>
 80050ec:	20000850 	.word	0x20000850

080050f0 <usb_dc_ep_clear_stall>:

int usb_dc_ep_clear_stall(const uint8_t ep)
{
 80050f0:	b538      	push	{r3, r4, r5, lr}
 80050f2:	4605      	mov	r5, r0
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 80050f4:	f7ff fecc 	bl	8004e90 <usb_dc_stm32_get_ep_state>
	HAL_StatusTypeDef status;

	LOG_DBG("ep 0x%02x", ep);

	if (!ep_state) {
 80050f8:	4604      	mov	r4, r0
 80050fa:	b138      	cbz	r0, 800510c <usb_dc_ep_clear_stall+0x1c>
		return -EINVAL;
	}

	status = HAL_PCD_EP_ClrStall(&usb_dc_stm32_state.pcd, ep);
 80050fc:	4806      	ldr	r0, [pc, #24]	; (8005118 <usb_dc_ep_clear_stall+0x28>)
 80050fe:	4629      	mov	r1, r5
 8005100:	f004 fab7 	bl	8009672 <HAL_PCD_EP_ClrStall>
	if (status != HAL_OK) {
 8005104:	b928      	cbnz	r0, 8005112 <usb_dc_ep_clear_stall+0x22>
		LOG_ERR("HAL_PCD_EP_ClrStall failed(0x%02x), %d", ep,
			(int)status);
		return -EIO;
	}

	ep_state->ep_stalled = 0U;
 8005106:	7160      	strb	r0, [r4, #5]
	ep_state->read_count = 0U;
 8005108:	60e0      	str	r0, [r4, #12]

	return 0;
}
 800510a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 800510c:	f06f 0015 	mvn.w	r0, #21
 8005110:	e7fb      	b.n	800510a <usb_dc_ep_clear_stall+0x1a>
		return -EIO;
 8005112:	f06f 0004 	mvn.w	r0, #4
 8005116:	e7f8      	b.n	800510a <usb_dc_ep_clear_stall+0x1a>
 8005118:	20000850 	.word	0x20000850

0800511c <usb_dc_ep_enable>:

	return 0;
}

int usb_dc_ep_enable(const uint8_t ep)
{
 800511c:	b538      	push	{r3, r4, r5, lr}
 800511e:	4604      	mov	r4, r0
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 8005120:	f7ff feb6 	bl	8004e90 <usb_dc_stm32_get_ep_state>
	HAL_StatusTypeDef status;

	LOG_DBG("ep 0x%02x", ep);

	if (!ep_state) {
 8005124:	b1a0      	cbz	r0, 8005150 <usb_dc_ep_enable+0x34>
	}

	LOG_DBG("HAL_PCD_EP_Open(0x%02x, %u, %u)", ep, ep_state->ep_mps,
		ep_state->ep_type);

	status = HAL_PCD_EP_Open(&usb_dc_stm32_state.pcd, ep,
 8005126:	4d0d      	ldr	r5, [pc, #52]	; (800515c <usb_dc_ep_enable+0x40>)
 8005128:	7903      	ldrb	r3, [r0, #4]
 800512a:	8802      	ldrh	r2, [r0, #0]
 800512c:	4621      	mov	r1, r4
 800512e:	4628      	mov	r0, r5
 8005130:	f004 f9c0 	bl	80094b4 <HAL_PCD_EP_Open>
				 ep_state->ep_mps, ep_state->ep_type);
	if (status != HAL_OK) {
 8005134:	b978      	cbnz	r0, 8005156 <usb_dc_ep_enable+0x3a>
		LOG_ERR("HAL_PCD_EP_Open failed(0x%02x), %d", ep,
			(int)status);
		return -EIO;
	}

	if (USB_EP_DIR_IS_OUT(ep) && ep != EP0_OUT) {
 8005136:	b263      	sxtb	r3, r4
 8005138:	2b00      	cmp	r3, #0
 800513a:	dd0b      	ble.n	8005154 <usb_dc_ep_enable+0x38>
		return usb_dc_ep_start_read(ep,
					  usb_dc_stm32_state.ep_buf[USB_EP_GET_IDX(ep)],
 800513c:	2240      	movs	r2, #64	; 0x40
 800513e:	fb02 5104 	mla	r1, r2, r4, r5
		return usb_dc_ep_start_read(ep,
 8005142:	4620      	mov	r0, r4
 8005144:	f201 51bc 	addw	r1, r1, #1468	; 0x5bc
					  EP_MPS);
	}

	return 0;
}
 8005148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return usb_dc_ep_start_read(ep,
 800514c:	f7ff bf88 	b.w	8005060 <usb_dc_ep_start_read>
		return -EINVAL;
 8005150:	f06f 0015 	mvn.w	r0, #21
}
 8005154:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
 8005156:	f06f 0004 	mvn.w	r0, #4
 800515a:	e7fb      	b.n	8005154 <usb_dc_ep_enable+0x38>
 800515c:	20000850 	.word	0x20000850

08005160 <usb_dc_ep_disable>:

int usb_dc_ep_disable(const uint8_t ep)
{
 8005160:	b510      	push	{r4, lr}
 8005162:	4604      	mov	r4, r0
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 8005164:	f7ff fe94 	bl	8004e90 <usb_dc_stm32_get_ep_state>
	HAL_StatusTypeDef status;

	LOG_DBG("ep 0x%02x", ep);

	if (!ep_state) {
 8005168:	b148      	cbz	r0, 800517e <usb_dc_ep_disable+0x1e>
		return -EINVAL;
	}

	status = HAL_PCD_EP_Close(&usb_dc_stm32_state.pcd, ep);
 800516a:	4806      	ldr	r0, [pc, #24]	; (8005184 <usb_dc_ep_disable+0x24>)
 800516c:	4621      	mov	r1, r4
 800516e:	f004 f9d9 	bl	8009524 <HAL_PCD_EP_Close>
	if (status != HAL_OK) {
		LOG_ERR("HAL_PCD_EP_Close failed(0x%02x), %d", ep,
			(int)status);
		return -EIO;
 8005172:	2800      	cmp	r0, #0
 8005174:	bf0c      	ite	eq
 8005176:	2000      	moveq	r0, #0
 8005178:	f06f 0004 	mvnne.w	r0, #4
	}

	return 0;
}
 800517c:	bd10      	pop	{r4, pc}
		return -EINVAL;
 800517e:	f06f 0015 	mvn.w	r0, #21
 8005182:	e7fb      	b.n	800517c <usb_dc_ep_disable+0x1c>
 8005184:	20000850 	.word	0x20000850

08005188 <usb_dc_ep_write>:

int usb_dc_ep_write(const uint8_t ep, const uint8_t *const data,
		    const uint32_t data_len, uint32_t * const ret_bytes)
{
 8005188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800518c:	4606      	mov	r6, r0
 800518e:	4689      	mov	r9, r1
 8005190:	4615      	mov	r5, r2
 8005192:	4698      	mov	r8, r3
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 8005194:	f7ff fe7c 	bl	8004e90 <usb_dc_stm32_get_ep_state>
	uint32_t len = data_len;
	int ret = 0;

	LOG_DBG("ep 0x%02x, len %u", ep, data_len);

	if (!ep_state || !USB_EP_DIR_IS_IN(ep)) {
 8005198:	2800      	cmp	r0, #0
 800519a:	d03a      	beq.n	8005212 <usb_dc_ep_write+0x8a>
 800519c:	0633      	lsls	r3, r6, #24
 800519e:	d538      	bpl.n	8005212 <usb_dc_ep_write+0x8a>
		LOG_ERR("invalid ep 0x%02x", ep);
		return -EINVAL;
	}

	ret = k_sem_take(&ep_state->write_sem, K_NO_WAIT);
 80051a0:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_sem_take(sem, timeout);
 80051a4:	2200      	movs	r2, #0
 80051a6:	2300      	movs	r3, #0
 80051a8:	4638      	mov	r0, r7
 80051aa:	f002 f857 	bl	800725c <z_impl_k_sem_take>
	if (ret) {
 80051ae:	4604      	mov	r4, r0
 80051b0:	bb90      	cbnz	r0, 8005218 <usb_dc_ep_write+0x90>
		LOG_ERR("Unable to get write lock (%d)", ret);
		return -EAGAIN;
	}

	if (!k_is_in_isr()) {
 80051b2:	f004 fc64 	bl	8009a7e <k_is_in_isr>
 80051b6:	b910      	cbnz	r0, 80051be <usb_dc_ep_write+0x36>
		irq_disable(USB_IRQ);
 80051b8:	2043      	movs	r0, #67	; 0x43
 80051ba:	f7ff fa8f 	bl	80046dc <arch_irq_disable>
	}

	if (ep == EP0_IN && len > USB_MAX_CTRL_MPS) {
 80051be:	2e80      	cmp	r6, #128	; 0x80
 80051c0:	d102      	bne.n	80051c8 <usb_dc_ep_write+0x40>
 80051c2:	2d40      	cmp	r5, #64	; 0x40
 80051c4:	bf28      	it	cs
 80051c6:	2540      	movcs	r5, #64	; 0x40
		len = USB_MAX_CTRL_MPS;
	}

	status = HAL_PCD_EP_Transmit(&usb_dc_stm32_state.pcd, ep,
 80051c8:	464a      	mov	r2, r9
 80051ca:	4815      	ldr	r0, [pc, #84]	; (8005220 <usb_dc_ep_write+0x98>)
 80051cc:	462b      	mov	r3, r5
 80051ce:	4631      	mov	r1, r6
 80051d0:	f004 f9fd 	bl	80095ce <HAL_PCD_EP_Transmit>
				     (void *)data, len);
	if (status != HAL_OK) {
 80051d4:	4602      	mov	r2, r0
 80051d6:	b198      	cbz	r0, 8005200 <usb_dc_ep_write+0x78>
	z_impl_k_sem_give(sem);
 80051d8:	4638      	mov	r0, r7
 80051da:	f002 f81f 	bl	800721c <z_impl_k_sem_give>
		LOG_ERR("HAL_PCD_EP_Transmit failed(0x%02x), %d", ep,
			(int)status);
		k_sem_give(&ep_state->write_sem);
		ret = -EIO;
 80051de:	f06f 0404 	mvn.w	r4, #4
		 * This also flushes the TX FIFO to the host.
		 */
		usb_dc_ep_start_read(ep, NULL, 0);
	}

	if (!k_is_in_isr()) {
 80051e2:	f004 fc4c 	bl	8009a7e <k_is_in_isr>
 80051e6:	b910      	cbnz	r0, 80051ee <usb_dc_ep_write+0x66>
		irq_enable(USB_IRQ);
 80051e8:	2043      	movs	r0, #67	; 0x43
 80051ea:	f7ff fa67 	bl	80046bc <arch_irq_enable>
	}

	if (!ret && ret_bytes) {
 80051ee:	b924      	cbnz	r4, 80051fa <usb_dc_ep_write+0x72>
 80051f0:	f1b8 0f00 	cmp.w	r8, #0
 80051f4:	d001      	beq.n	80051fa <usb_dc_ep_write+0x72>
		*ret_bytes = len;
 80051f6:	f8c8 5000 	str.w	r5, [r8]
	}

	return ret;
}
 80051fa:	4620      	mov	r0, r4
 80051fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!ret && ep == EP0_IN && len > 0) {
 8005200:	2e80      	cmp	r6, #128	; 0x80
 8005202:	d1ee      	bne.n	80051e2 <usb_dc_ep_write+0x5a>
 8005204:	2d00      	cmp	r5, #0
 8005206:	d0ec      	beq.n	80051e2 <usb_dc_ep_write+0x5a>
		usb_dc_ep_start_read(ep, NULL, 0);
 8005208:	4601      	mov	r1, r0
 800520a:	4630      	mov	r0, r6
 800520c:	f7ff ff28 	bl	8005060 <usb_dc_ep_start_read>
 8005210:	e7e7      	b.n	80051e2 <usb_dc_ep_write+0x5a>
		return -EINVAL;
 8005212:	f06f 0415 	mvn.w	r4, #21
 8005216:	e7f0      	b.n	80051fa <usb_dc_ep_write+0x72>
		return -EAGAIN;
 8005218:	f06f 040a 	mvn.w	r4, #10
 800521c:	e7ed      	b.n	80051fa <usb_dc_ep_write+0x72>
 800521e:	bf00      	nop
 8005220:	20000850 	.word	0x20000850

08005224 <usb_dc_ep_read_wait>:

int usb_dc_ep_read_wait(uint8_t ep, uint8_t *data, uint32_t max_data_len,
			uint32_t *read_bytes)
{
 8005224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005228:	4680      	mov	r8, r0
 800522a:	460f      	mov	r7, r1
 800522c:	4691      	mov	r9, r2
 800522e:	461c      	mov	r4, r3
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 8005230:	f7ff fe2e 	bl	8004e90 <usb_dc_stm32_get_ep_state>
	uint32_t read_count;

	if (!ep_state) {
 8005234:	4605      	mov	r5, r0
 8005236:	b1f0      	cbz	r0, 8005276 <usb_dc_ep_read_wait+0x52>
	read_count = ep_state->read_count;

	LOG_DBG("ep 0x%02x, %u bytes, %u+%u, %p", ep, max_data_len,
		ep_state->read_offset, read_count, data);

	if (!USB_EP_DIR_IS_OUT(ep)) { /* check if OUT ep */
 8005238:	f018 0f80 	tst.w	r8, #128	; 0x80
	read_count = ep_state->read_count;
 800523c:	68c6      	ldr	r6, [r0, #12]
	if (!USB_EP_DIR_IS_OUT(ep)) { /* check if OUT ep */
 800523e:	d11a      	bne.n	8005276 <usb_dc_ep_read_wait+0x52>

	/* When both buffer and max data to read are zero, just ignore reading
	 * and return available data in buffer. Otherwise, return data
	 * previously stored in the buffer.
	 */
	if (data) {
 8005240:	b1a7      	cbz	r7, 800526c <usb_dc_ep_read_wait+0x48>
		read_count = MIN(read_count, max_data_len);
		memcpy(data, usb_dc_stm32_state.ep_buf[USB_EP_GET_IDX(ep)] +
 8005242:	6901      	ldr	r1, [r0, #16]
 8005244:	f240 53bc 	movw	r3, #1468	; 0x5bc
 8005248:	eb03 1388 	add.w	r3, r3, r8, lsl #6
 800524c:	440b      	add	r3, r1
		read_count = MIN(read_count, max_data_len);
 800524e:	454e      	cmp	r6, r9
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8005250:	490b      	ldr	r1, [pc, #44]	; (8005280 <usb_dc_ep_read_wait+0x5c>)
 8005252:	bf28      	it	cs
 8005254:	464e      	movcs	r6, r9
 8005256:	4419      	add	r1, r3
 8005258:	4632      	mov	r2, r6
 800525a:	4638      	mov	r0, r7
 800525c:	f004 fd68 	bl	8009d30 <memcpy>
		       ep_state->read_offset, read_count);
		ep_state->read_count -= read_count;
 8005260:	68eb      	ldr	r3, [r5, #12]
 8005262:	1b9b      	subs	r3, r3, r6
 8005264:	60eb      	str	r3, [r5, #12]
		ep_state->read_offset += read_count;
 8005266:	692b      	ldr	r3, [r5, #16]
 8005268:	4433      	add	r3, r6
 800526a:	612b      	str	r3, [r5, #16]
	} else if (max_data_len) {
		LOG_ERR("Wrong arguments");
	}

	if (read_bytes) {
 800526c:	b134      	cbz	r4, 800527c <usb_dc_ep_read_wait+0x58>
		*read_bytes = read_count;
 800526e:	6026      	str	r6, [r4, #0]
	}

	return 0;
 8005270:	2000      	movs	r0, #0
}
 8005272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
 8005276:	f06f 0015 	mvn.w	r0, #21
 800527a:	e7fa      	b.n	8005272 <usb_dc_ep_read_wait+0x4e>
	return 0;
 800527c:	4620      	mov	r0, r4
 800527e:	e7f8      	b.n	8005272 <usb_dc_ep_read_wait+0x4e>
 8005280:	20000850 	.word	0x20000850

08005284 <usb_dc_ep_read_continue>:

int usb_dc_ep_read_continue(uint8_t ep)
{
 8005284:	b538      	push	{r3, r4, r5, lr}
 8005286:	4605      	mov	r5, r0
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 8005288:	f7ff fe02 	bl	8004e90 <usb_dc_stm32_get_ep_state>

	if (!ep_state || !USB_EP_DIR_IS_OUT(ep)) { /* Check if OUT ep */
 800528c:	b170      	cbz	r0, 80052ac <usb_dc_ep_read_continue+0x28>
 800528e:	062b      	lsls	r3, r5, #24
 8005290:	d40c      	bmi.n	80052ac <usb_dc_ep_read_continue+0x28>
	}

	/* If no more data in the buffer, start a new read transaction.
	 * DataOutStageCallback will called on transaction complete.
	 */
	if (!ep_state->read_count) {
 8005292:	68c4      	ldr	r4, [r0, #12]
 8005294:	b944      	cbnz	r4, 80052a8 <usb_dc_ep_read_continue+0x24>
		usb_dc_ep_start_read(ep, usb_dc_stm32_state.ep_buf[USB_EP_GET_IDX(ep)],
 8005296:	4907      	ldr	r1, [pc, #28]	; (80052b4 <usb_dc_ep_read_continue+0x30>)
 8005298:	2240      	movs	r2, #64	; 0x40
 800529a:	fb02 1105 	mla	r1, r2, r5, r1
 800529e:	f201 51bc 	addw	r1, r1, #1468	; 0x5bc
 80052a2:	4628      	mov	r0, r5
 80052a4:	f7ff fedc 	bl	8005060 <usb_dc_ep_start_read>
				     EP_MPS);
	}

	return 0;
 80052a8:	2000      	movs	r0, #0
 80052aa:	e001      	b.n	80052b0 <usb_dc_ep_read_continue+0x2c>
		return -EINVAL;
 80052ac:	f06f 0015 	mvn.w	r0, #21
}
 80052b0:	bd38      	pop	{r3, r4, r5, pc}
 80052b2:	bf00      	nop
 80052b4:	20000850 	.word	0x20000850

080052b8 <HAL_PCD_ResetCallback>:
}

/* Callbacks from the STM32 Cube HAL code */

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80052b8:	b570      	push	{r4, r5, r6, lr}
	int i;

	LOG_DBG("");

	HAL_PCD_EP_Open(&usb_dc_stm32_state.pcd, EP0_IN, EP0_MPS, EP_TYPE_CTRL);
 80052ba:	2300      	movs	r3, #0
 80052bc:	2240      	movs	r2, #64	; 0x40
 80052be:	2180      	movs	r1, #128	; 0x80
 80052c0:	480d      	ldr	r0, [pc, #52]	; (80052f8 <HAL_PCD_ResetCallback+0x40>)
 80052c2:	4d0d      	ldr	r5, [pc, #52]	; (80052f8 <HAL_PCD_ResetCallback+0x40>)
 80052c4:	f004 f8f6 	bl	80094b4 <HAL_PCD_EP_Open>
	HAL_PCD_EP_Open(&usb_dc_stm32_state.pcd, EP0_OUT, EP0_MPS,
 80052c8:	2300      	movs	r3, #0
 80052ca:	480b      	ldr	r0, [pc, #44]	; (80052f8 <HAL_PCD_ResetCallback+0x40>)
 80052cc:	2240      	movs	r2, #64	; 0x40
 80052ce:	4619      	mov	r1, r3
 80052d0:	f004 f8f0 	bl	80094b4 <HAL_PCD_EP_Open>
 80052d4:	2400      	movs	r4, #0
 80052d6:	f505 669f 	add.w	r6, r5, #1272	; 0x4f8
 80052da:	1930      	adds	r0, r6, r4
			EP_TYPE_CTRL);

	/* The DataInCallback will never be called at this point for any pending
	 * transactions. Reset the IN semaphores to prevent perpetual locked state.
	 * */
	for (i = 0; i < USB_NUM_BIDIR_ENDPOINTS; i++) {
 80052dc:	3424      	adds	r4, #36	; 0x24
 80052de:	f001 ff9d 	bl	800721c <z_impl_k_sem_give>
 80052e2:	2cd8      	cmp	r4, #216	; 0xd8
 80052e4:	d1f9      	bne.n	80052da <HAL_PCD_ResetCallback+0x22>
		k_sem_give(&usb_dc_stm32_state.in_ep_state[i].write_sem);
	}

	if (usb_dc_stm32_state.status_cb) {
 80052e6:	f8d5 3408 	ldr.w	r3, [r5, #1032]	; 0x408
 80052ea:	b123      	cbz	r3, 80052f6 <HAL_PCD_ResetCallback+0x3e>
		usb_dc_stm32_state.status_cb(USB_DC_RESET, NULL);
	}
}
 80052ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_dc_stm32_state.status_cb(USB_DC_RESET, NULL);
 80052f0:	2100      	movs	r1, #0
 80052f2:	2001      	movs	r0, #1
 80052f4:	4718      	bx	r3
}
 80052f6:	bd70      	pop	{r4, r5, r6, pc}
 80052f8:	20000850 	.word	0x20000850

080052fc <HAL_PCD_ConnectCallback>:

void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
	LOG_DBG("");

	if (usb_dc_stm32_state.status_cb) {
 80052fc:	4b03      	ldr	r3, [pc, #12]	; (800530c <HAL_PCD_ConnectCallback+0x10>)
 80052fe:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8005302:	b113      	cbz	r3, 800530a <HAL_PCD_ConnectCallback+0xe>
		usb_dc_stm32_state.status_cb(USB_DC_CONNECTED, NULL);
 8005304:	2100      	movs	r1, #0
 8005306:	2002      	movs	r0, #2
 8005308:	4718      	bx	r3
	}
}
 800530a:	4770      	bx	lr
 800530c:	20000850 	.word	0x20000850

08005310 <HAL_PCD_DisconnectCallback>:

void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
	LOG_DBG("");

	if (usb_dc_stm32_state.status_cb) {
 8005310:	4b03      	ldr	r3, [pc, #12]	; (8005320 <HAL_PCD_DisconnectCallback+0x10>)
 8005312:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8005316:	b113      	cbz	r3, 800531e <HAL_PCD_DisconnectCallback+0xe>
		usb_dc_stm32_state.status_cb(USB_DC_DISCONNECTED, NULL);
 8005318:	2100      	movs	r1, #0
 800531a:	2004      	movs	r0, #4
 800531c:	4718      	bx	r3
	}
}
 800531e:	4770      	bx	lr
 8005320:	20000850 	.word	0x20000850

08005324 <HAL_PCD_SuspendCallback>:

void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
	LOG_DBG("");

	if (usb_dc_stm32_state.status_cb) {
 8005324:	4b03      	ldr	r3, [pc, #12]	; (8005334 <HAL_PCD_SuspendCallback+0x10>)
 8005326:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800532a:	b113      	cbz	r3, 8005332 <HAL_PCD_SuspendCallback+0xe>
		usb_dc_stm32_state.status_cb(USB_DC_SUSPEND, NULL);
 800532c:	2100      	movs	r1, #0
 800532e:	2005      	movs	r0, #5
 8005330:	4718      	bx	r3
	}
}
 8005332:	4770      	bx	lr
 8005334:	20000850 	.word	0x20000850

08005338 <HAL_PCD_ResumeCallback>:

void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
	LOG_DBG("");

	if (usb_dc_stm32_state.status_cb) {
 8005338:	4b03      	ldr	r3, [pc, #12]	; (8005348 <HAL_PCD_ResumeCallback+0x10>)
 800533a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800533e:	b113      	cbz	r3, 8005346 <HAL_PCD_ResumeCallback+0xe>
		usb_dc_stm32_state.status_cb(USB_DC_RESUME, NULL);
 8005340:	2100      	movs	r1, #0
 8005342:	2006      	movs	r0, #6
 8005344:	4718      	bx	r3
	}
}
 8005346:	4770      	bx	lr
 8005348:	20000850 	.word	0x20000850

0800534c <HAL_PCD_SetupStageCallback>:

void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800534c:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("");

	ep_state = usb_dc_stm32_get_ep_state(EP0_OUT); /* can't fail for ep0 */
	__ASSERT(ep_state, "No corresponding ep_state for EP0");

	ep_state->read_count = SETUP_SIZE;
 800534e:	4c10      	ldr	r4, [pc, #64]	; (8005390 <HAL_PCD_SetupStageCallback+0x44>)
 8005350:	2308      	movs	r3, #8
	ep_state->read_offset = 0U;
	memcpy(&usb_dc_stm32_state.ep_buf[EP0_IDX],
 8005352:	e9d4 01f1 	ldrd	r0, r1, [r4, #964]	; 0x3c4
	ep_state->read_count = SETUP_SIZE;
 8005356:	f8c4 3418 	str.w	r3, [r4, #1048]	; 0x418
	       usb_dc_stm32_state.pcd.Setup, ep_state->read_count);

	if (ep_state->cb) {
 800535a:	f8d4 3414 	ldr.w	r3, [r4, #1044]	; 0x414
	ep_state->read_offset = 0U;
 800535e:	2500      	movs	r5, #0
	memcpy(&usb_dc_stm32_state.ep_buf[EP0_IDX],
 8005360:	f204 56bc 	addw	r6, r4, #1468	; 0x5bc
 8005364:	e886 0003 	stmia.w	r6, {r0, r1}
	ep_state->read_offset = 0U;
 8005368:	f8c4 541c 	str.w	r5, [r4, #1052]	; 0x41c
	if (ep_state->cb) {
 800536c:	b17b      	cbz	r3, 800538e <HAL_PCD_SetupStageCallback+0x42>
		ep_state->cb(EP0_OUT, USB_DC_EP_SETUP);
 800536e:	4629      	mov	r1, r5
 8005370:	4628      	mov	r0, r5
 8005372:	4798      	blx	r3

		if (!(setup->wLength == 0U) &&
 8005374:	f8b4 23ca 	ldrh.w	r2, [r4, #970]	; 0x3ca
 8005378:	b14a      	cbz	r2, 800538e <HAL_PCD_SetupStageCallback+0x42>
 800537a:	f994 33c4 	ldrsb.w	r3, [r4, #964]	; 0x3c4
 800537e:	42ab      	cmp	r3, r5
 8005380:	db05      	blt.n	800538e <HAL_PCD_SetupStageCallback+0x42>
		    usb_reqtype_is_to_device(setup)) {
			usb_dc_ep_start_read(EP0_OUT,
 8005382:	4631      	mov	r1, r6
 8005384:	4628      	mov	r0, r5
					     usb_dc_stm32_state.ep_buf[EP0_IDX],
					     setup->wLength);
		}
	}
}
 8005386:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			usb_dc_ep_start_read(EP0_OUT,
 800538a:	f7ff be69 	b.w	8005060 <usb_dc_ep_start_read>
}
 800538e:	bd70      	pop	{r4, r5, r6, pc}
 8005390:	20000850 	.word	0x20000850

08005394 <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8005394:	680b      	ldr	r3, [r1, #0]
{
 8005396:	b086      	sub	sp, #24
	switch (pclken->bus) {
 8005398:	2b06      	cmp	r3, #6
 800539a:	d843      	bhi.n	8005424 <stm32_clock_control_on+0x90>
 800539c:	e8df f003 	tbb	[pc, r3]
 80053a0:	38241004 	.word	0x38241004
 80053a4:	422e      	.short	0x422e
 80053a6:	1a          	.byte	0x1a
 80053a7:	00          	.byte	0x00
  SET_BIT(RCC->AHB1ENR, Periphs);
 80053a8:	4a20      	ldr	r2, [pc, #128]	; (800542c <stm32_clock_control_on+0x98>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 80053aa:	684b      	ldr	r3, [r1, #4]
 80053ac:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80053ae:	4319      	orrs	r1, r3
 80053b0:	6491      	str	r1, [r2, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80053b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80053b4:	4013      	ands	r3, r2
 80053b6:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80053b8:	9b00      	ldr	r3, [sp, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 80053ba:	2000      	movs	r0, #0
}
 80053bc:	b006      	add	sp, #24
 80053be:	4770      	bx	lr
  SET_BIT(RCC->AHB2ENR, Periphs);
 80053c0:	4a1a      	ldr	r2, [pc, #104]	; (800542c <stm32_clock_control_on+0x98>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 80053c2:	684b      	ldr	r3, [r1, #4]
 80053c4:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80053c6:	4319      	orrs	r1, r3
 80053c8:	64d1      	str	r1, [r2, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80053ca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80053cc:	4013      	ands	r3, r2
 80053ce:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80053d0:	9b01      	ldr	r3, [sp, #4]
 80053d2:	e7f2      	b.n	80053ba <stm32_clock_control_on+0x26>
  SET_BIT(RCC->AHB3ENR, Periphs);
 80053d4:	4a15      	ldr	r2, [pc, #84]	; (800542c <stm32_clock_control_on+0x98>)
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 80053d6:	684b      	ldr	r3, [r1, #4]
 80053d8:	6d11      	ldr	r1, [r2, #80]	; 0x50
 80053da:	4319      	orrs	r1, r3
 80053dc:	6511      	str	r1, [r2, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80053de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80053e0:	4013      	ands	r3, r2
 80053e2:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80053e4:	9b02      	ldr	r3, [sp, #8]
 80053e6:	e7e8      	b.n	80053ba <stm32_clock_control_on+0x26>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80053e8:	4a10      	ldr	r2, [pc, #64]	; (800542c <stm32_clock_control_on+0x98>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 80053ea:	684b      	ldr	r3, [r1, #4]
 80053ec:	6d91      	ldr	r1, [r2, #88]	; 0x58
 80053ee:	4319      	orrs	r1, r3
 80053f0:	6591      	str	r1, [r2, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80053f2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80053f4:	4013      	ands	r3, r2
 80053f6:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80053f8:	9b03      	ldr	r3, [sp, #12]
 80053fa:	e7de      	b.n	80053ba <stm32_clock_control_on+0x26>
  SET_BIT(RCC->APB1ENR2, Periphs);
 80053fc:	4a0b      	ldr	r2, [pc, #44]	; (800542c <stm32_clock_control_on+0x98>)
		LL_APB1_GRP2_EnableClock(pclken->enr);
 80053fe:	684b      	ldr	r3, [r1, #4]
 8005400:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8005402:	4319      	orrs	r1, r3
 8005404:	65d1      	str	r1, [r2, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8005406:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005408:	4013      	ands	r3, r2
 800540a:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 800540c:	9b04      	ldr	r3, [sp, #16]
 800540e:	e7d4      	b.n	80053ba <stm32_clock_control_on+0x26>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005410:	4a06      	ldr	r2, [pc, #24]	; (800542c <stm32_clock_control_on+0x98>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8005412:	684b      	ldr	r3, [r1, #4]
 8005414:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8005416:	4319      	orrs	r1, r3
 8005418:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800541a:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800541c:	4013      	ands	r3, r2
 800541e:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8005420:	9b05      	ldr	r3, [sp, #20]
 8005422:	e7ca      	b.n	80053ba <stm32_clock_control_on+0x26>
	switch (pclken->bus) {
 8005424:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005428:	e7c8      	b.n	80053bc <stm32_clock_control_on+0x28>
 800542a:	bf00      	nop
 800542c:	40021000 	.word	0x40021000

08005430 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8005430:	680b      	ldr	r3, [r1, #0]
 8005432:	2b06      	cmp	r3, #6
 8005434:	d830      	bhi.n	8005498 <stm32_clock_control_off+0x68>
 8005436:	e8df f003 	tbb	[pc, r3]
 800543a:	0c04      	.short	0x0c04
 800543c:	2f21281a 	.word	0x2f21281a
 8005440:	13          	.byte	0x13
 8005441:	00          	.byte	0x00
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8005442:	4a17      	ldr	r2, [pc, #92]	; (80054a0 <stm32_clock_control_off+0x70>)
 8005444:	6849      	ldr	r1, [r1, #4]
 8005446:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8005448:	ea23 0301 	bic.w	r3, r3, r1
 800544c:	6493      	str	r3, [r2, #72]	; 0x48
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 800544e:	2000      	movs	r0, #0
}
 8005450:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8005452:	4a13      	ldr	r2, [pc, #76]	; (80054a0 <stm32_clock_control_off+0x70>)
 8005454:	6849      	ldr	r1, [r1, #4]
 8005456:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005458:	ea23 0301 	bic.w	r3, r3, r1
 800545c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800545e:	e7f6      	b.n	800544e <stm32_clock_control_off+0x1e>
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 8005460:	4a0f      	ldr	r2, [pc, #60]	; (80054a0 <stm32_clock_control_off+0x70>)
 8005462:	6849      	ldr	r1, [r1, #4]
 8005464:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005466:	ea23 0301 	bic.w	r3, r3, r1
 800546a:	6513      	str	r3, [r2, #80]	; 0x50
 800546c:	e7ef      	b.n	800544e <stm32_clock_control_off+0x1e>
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800546e:	4a0c      	ldr	r2, [pc, #48]	; (80054a0 <stm32_clock_control_off+0x70>)
 8005470:	6849      	ldr	r1, [r1, #4]
 8005472:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005474:	ea23 0301 	bic.w	r3, r3, r1
 8005478:	6593      	str	r3, [r2, #88]	; 0x58
 800547a:	e7e8      	b.n	800544e <stm32_clock_control_off+0x1e>
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 800547c:	4a08      	ldr	r2, [pc, #32]	; (80054a0 <stm32_clock_control_off+0x70>)
 800547e:	6849      	ldr	r1, [r1, #4]
 8005480:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8005482:	ea23 0301 	bic.w	r3, r3, r1
 8005486:	65d3      	str	r3, [r2, #92]	; 0x5c
 8005488:	e7e1      	b.n	800544e <stm32_clock_control_off+0x1e>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800548a:	4a05      	ldr	r2, [pc, #20]	; (80054a0 <stm32_clock_control_off+0x70>)
 800548c:	6849      	ldr	r1, [r1, #4]
 800548e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8005490:	ea23 0301 	bic.w	r3, r3, r1
 8005494:	6613      	str	r3, [r2, #96]	; 0x60
 8005496:	e7da      	b.n	800544e <stm32_clock_control_off+0x1e>
	switch (pclken->bus) {
 8005498:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	40021000 	.word	0x40021000

080054a4 <stm32_clock_control_get_subsys_rate>:
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 80054a4:	680b      	ldr	r3, [r1, #0]
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d901      	bls.n	80054ae <stm32_clock_control_get_subsys_rate+0xa>
 80054aa:	2b06      	cmp	r3, #6
 80054ac:	d104      	bne.n	80054b8 <stm32_clock_control_get_subsys_rate+0x14>
	uint32_t ahb_clock = SystemCoreClock;
 80054ae:	4b04      	ldr	r3, [pc, #16]	; (80054c0 <stm32_clock_control_get_subsys_rate+0x1c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
		*rate = apb1_clock;
		break;
#if !defined (CONFIG_SOC_SERIES_STM32F0X) && \
	!defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 80054b2:	6013      	str	r3, [r2, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 80054b4:	2000      	movs	r0, #0
		break;
 80054b6:	4770      	bx	lr
	switch (pclken->bus) {
 80054b8:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	20000168 	.word	0x20000168

080054c4 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 80054c4:	b510      	push	{r4, lr}
 80054c6:	b086      	sub	sp, #24
	clk_init->AHBCLKDivider = ahb_prescaler(STM32_AHB_PRESCALER);
 80054c8:	2300      	movs	r3, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80054ca:	4c1d      	ldr	r4, [pc, #116]	; (8005540 <stm32_clock_control_init+0x7c>)
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 80054cc:	9302      	str	r3, [sp, #8]
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 80054ce:	e9cd 3300 	strd	r3, r3, [sp]
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 80054d2:	f000 f847 	bl	8005564 <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 80054d6:	a803      	add	r0, sp, #12
 80054d8:	f000 f834 	bl	8005544 <config_pll_init>
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	055a      	lsls	r2, r3, #21
 80054e0:	d406      	bmi.n	80054f0 <stm32_clock_control_init+0x2c>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054e8:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	055b      	lsls	r3, r3, #21
 80054ee:	d5fc      	bpl.n	80054ea <stm32_clock_control_init+0x26>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80054f0:	68a3      	ldr	r3, [r4, #8]
 80054f2:	f023 0303 	bic.w	r3, r3, #3
 80054f6:	f043 0301 	orr.w	r3, r3, #1
 80054fa:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80054fc:	68a3      	ldr	r3, [r4, #8]
 80054fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005502:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005504:	68a3      	ldr	r3, [r4, #8]
 8005506:	f003 030c 	and.w	r3, r3, #12
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 800550a:	2b04      	cmp	r3, #4
 800550c:	d1fa      	bne.n	8005504 <stm32_clock_control_init+0x40>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005514:	6023      	str	r3, [r4, #0]
		 }
	 }
#endif

#if STM32_PLL_Q_DIVISOR
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8005516:	68e3      	ldr	r3, [r4, #12]
 8005518:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800551c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005520:	60e3      	str	r3, [r4, #12]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 8005522:	4669      	mov	r1, sp
 8005524:	a803      	add	r0, sp, #12
 8005526:	f001 fbe3 	bl	8006cf0 <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005530:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005532:	6823      	ldr	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8005534:	2000      	movs	r0, #0
 8005536:	f023 0301 	bic.w	r3, r3, #1
 800553a:	6023      	str	r3, [r4, #0]
 800553c:	b006      	add	sp, #24
 800553e:	bd10      	pop	{r4, pc}
 8005540:	40021000 	.word	0x40021000

08005544 <config_pll_init>:
 * @brief fill in pll configuration structure
 */
void config_pll_init(LL_UTILS_PLLInitTypeDef *pllinit)
{
	pllinit->PLLM = pllm(STM32_PLL_M_DIVISOR);
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
 8005544:	2230      	movs	r2, #48	; 0x30
 8005546:	2328      	movs	r3, #40	; 0x28
 8005548:	e9c0 2300 	strd	r2, r3, [r0]
  CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800554c:	4a04      	ldr	r2, [pc, #16]	; (8005560 <config_pll_init+0x1c>)
	pllinit->PLLR = pllr(STM32_PLL_R_DIVISOR);
 800554e:	2300      	movs	r3, #0
 8005550:	6083      	str	r3, [r0, #8]
 8005552:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8005556:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800555a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	/* set power boost mode for sys clock greater than 80MHz */
	if (sys_clock_hw_cycles_per_sec() >= MHZ(80)) {
		LL_PWR_EnableRange1BoostMode();
	}
#endif /* PWR_CR5_R1MODE */
}
 800555e:	4770      	bx	lr
 8005560:	40007000 	.word	0x40007000

08005564 <config_enable_default_clocks>:
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005564:	4b06      	ldr	r3, [pc, #24]	; (8005580 <config_enable_default_clocks+0x1c>)
 8005566:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005568:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800556c:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800556e:	6d9b      	ldr	r3, [r3, #88]	; 0x58

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8005570:	b082      	sub	sp, #8
 8005572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005576:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8005578:	9b01      	ldr	r3, [sp, #4]
	LL_PWR_DisableBkUpAccess();

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#endif
}
 800557a:	b002      	add	sp, #8
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40021000 	.word	0x40021000

08005584 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8005584:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 8005586:	4b08      	ldr	r3, [pc, #32]	; (80055a8 <uart_console_init+0x24>)
 8005588:	4808      	ldr	r0, [pc, #32]	; (80055ac <uart_console_init+0x28>)
 800558a:	6018      	str	r0, [r3, #0]
 800558c:	f004 fa42 	bl	8009a14 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
 8005590:	b138      	cbz	r0, 80055a2 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
 8005592:	4807      	ldr	r0, [pc, #28]	; (80055b0 <uart_console_init+0x2c>)
 8005594:	f7ff fbae 	bl	8004cf4 <__stdout_hook_install>
	__printk_hook_install(console_out);
 8005598:	4805      	ldr	r0, [pc, #20]	; (80055b0 <uart_console_init+0x2c>)
 800559a:	f7fd fbc3 	bl	8002d24 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 800559e:	2000      	movs	r0, #0
}
 80055a0:	bd08      	pop	{r3, pc}
		return -ENODEV;
 80055a2:	f06f 0012 	mvn.w	r0, #18
 80055a6:	e7fb      	b.n	80055a0 <uart_console_init+0x1c>
 80055a8:	20000f8c 	.word	0x20000f8c
 80055ac:	08009f7c 	.word	0x08009f7c
 80055b0:	080055b5 	.word	0x080055b5

080055b4 <console_out>:
	if ('\n' == c) {
 80055b4:	280a      	cmp	r0, #10
{
 80055b6:	b538      	push	{r3, r4, r5, lr}
 80055b8:	4d07      	ldr	r5, [pc, #28]	; (80055d8 <console_out+0x24>)
 80055ba:	4604      	mov	r4, r0
	if ('\n' == c) {
 80055bc:	d104      	bne.n	80055c8 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
 80055be:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
 80055c0:	6883      	ldr	r3, [r0, #8]
 80055c2:	210d      	movs	r1, #13
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
 80055c8:	6828      	ldr	r0, [r5, #0]
 80055ca:	6883      	ldr	r3, [r0, #8]
 80055cc:	b2e1      	uxtb	r1, r4
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	4798      	blx	r3
}
 80055d2:	4620      	mov	r0, r4
 80055d4:	bd38      	pop	{r3, r4, r5, pc}
 80055d6:	bf00      	nop
 80055d8:	20000f8c 	.word	0x20000f8c

080055dc <clock_control_on.constprop.0>:
static inline int clock_control_on(const struct device *dev,
 80055dc:	b570      	push	{r4, r5, r6, lr}
 80055de:	4605      	mov	r5, r0
 80055e0:	4c07      	ldr	r4, [pc, #28]	; (8005600 <clock_control_on.constprop.0+0x24>)
 80055e2:	4620      	mov	r0, r4
 80055e4:	f004 fa16 	bl	8009a14 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 80055e8:	b130      	cbz	r0, 80055f8 <clock_control_on.constprop.0+0x1c>
	return api->on(dev, sys);
 80055ea:	68a3      	ldr	r3, [r4, #8]
 80055ec:	4629      	mov	r1, r5
 80055ee:	4620      	mov	r0, r4
 80055f0:	681b      	ldr	r3, [r3, #0]
}
 80055f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->on(dev, sys);
 80055f6:	4718      	bx	r3
}
 80055f8:	f06f 0012 	mvn.w	r0, #18
 80055fc:	bd70      	pop	{r4, r5, r6, pc}
 80055fe:	bf00      	nop
 8005600:	08009e8c 	.word	0x08009e8c

08005604 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 8005604:	b508      	push	{r3, lr}
  * @rmtoll CR2          IOSV          LL_PWR_EnableVddIO2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005606:	4a07      	ldr	r2, [pc, #28]	; (8005624 <gpio_stm32_init+0x20>)
	struct gpio_stm32_data *data = dev->data;
	int ret;

	data->dev = dev;
 8005608:	6903      	ldr	r3, [r0, #16]
 800560a:	6058      	str	r0, [r3, #4]
 800560c:	6853      	ldr	r3, [r2, #4]
					(clock_control_subsys_t *)&cfg->pclken);
 800560e:	6840      	ldr	r0, [r0, #4]
 8005610:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005614:	6053      	str	r3, [r2, #4]
		ret = clock_control_on(clk,
 8005616:	300c      	adds	r0, #12
 8005618:	f7ff ffe0 	bl	80055dc <clock_control_on.constprop.0>

	pm_device_runtime_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 800561c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 8005620:	bd08      	pop	{r3, pc}
 8005622:	bf00      	nop
 8005624:	40007000 	.word	0x40007000

08005628 <gpio_stm32_pin_interrupt_configure>:
{
 8005628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800562a:	460c      	mov	r4, r1
 800562c:	4611      	mov	r1, r2
	if (mode == GPIO_INT_MODE_DISABLED) {
 800562e:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
	const struct gpio_stm32_config *cfg = dev->config;
 8005632:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8005634:	6902      	ldr	r2, [r0, #16]
{
 8005636:	461e      	mov	r6, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 8005638:	d123      	bne.n	8005682 <gpio_stm32_pin_interrupt_configure+0x5a>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800563a:	f004 0303 	and.w	r3, r4, #3
 800563e:	3304      	adds	r3, #4
 8005640:	009a      	lsls	r2, r3, #2
 8005642:	230f      	movs	r3, #15
 8005644:	4093      	lsls	r3, r2
 8005646:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 800564a:	b2da      	uxtb	r2, r3
 800564c:	4933      	ldr	r1, [pc, #204]	; (800571c <gpio_stm32_pin_interrupt_configure+0xf4>)
 800564e:	3202      	adds	r2, #2
 8005650:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005654:	0c19      	lsrs	r1, r3, #16
 8005656:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565a:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 800565e:	fab2 f282 	clz	r2, r2
 8005662:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	429a      	cmp	r2, r3
 8005668:	d109      	bne.n	800567e <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 800566a:	4620      	mov	r0, r4
 800566c:	f7ff fbb2 	bl	8004dd4 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8005670:	4620      	mov	r0, r4
 8005672:	f7ff fc03 	bl	8004e7c <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8005676:	2100      	movs	r1, #0
 8005678:	4620      	mov	r0, r4
 800567a:	f7ff fbb9 	bl	8004df0 <stm32_exti_trigger>
	int err = 0;
 800567e:	2500      	movs	r5, #0
 8005680:	e03e      	b.n	8005700 <gpio_stm32_pin_interrupt_configure+0xd8>
	if (mode == GPIO_INT_MODE_LEVEL) {
 8005682:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8005686:	d042      	beq.n	800570e <gpio_stm32_pin_interrupt_configure+0xe6>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8005688:	4925      	ldr	r1, [pc, #148]	; (8005720 <gpio_stm32_pin_interrupt_configure+0xf8>)
 800568a:	4620      	mov	r0, r4
 800568c:	f7ff fbe4 	bl	8004e58 <stm32_exti_set_callback>
 8005690:	4605      	mov	r5, r0
 8005692:	2800      	cmp	r0, #0
 8005694:	d13e      	bne.n	8005714 <gpio_stm32_pin_interrupt_configure+0xec>
	struct stm32_pclken pclken = {
 8005696:	4a23      	ldr	r2, [pc, #140]	; (8005724 <gpio_stm32_pin_interrupt_configure+0xfc>)
	gpio_stm32_enable_int(cfg->port, pin);
 8005698:	68bf      	ldr	r7, [r7, #8]
	struct stm32_pclken pclken = {
 800569a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800569e:	466b      	mov	r3, sp
 80056a0:	e883 0003 	stmia.w	r3, {r0, r1}
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7ff ff99 	bl	80055dc <clock_control_on.constprop.0>
	if (ret != 0) {
 80056aa:	b9c0      	cbnz	r0, 80056de <gpio_stm32_pin_interrupt_configure+0xb6>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80056ac:	f004 0103 	and.w	r1, r4, #3
 80056b0:	3104      	adds	r1, #4
 80056b2:	008b      	lsls	r3, r1, #2
 80056b4:	210f      	movs	r1, #15
 80056b6:	4099      	lsls	r1, r3
 80056b8:	ea41 0194 	orr.w	r1, r1, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80056bc:	b2ca      	uxtb	r2, r1
 80056be:	0092      	lsls	r2, r2, #2
 80056c0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80056c4:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80056c8:	0c0b      	lsrs	r3, r1, #16
 80056ca:	6890      	ldr	r0, [r2, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056cc:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80056d0:	fab3 f383 	clz	r3, r3
 80056d4:	ea20 4111 	bic.w	r1, r0, r1, lsr #16
 80056d8:	409f      	lsls	r7, r3
 80056da:	430f      	orrs	r7, r1
 80056dc:	6097      	str	r7, [r2, #8]
	switch (trig) {
 80056de:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
 80056e2:	d010      	beq.n	8005706 <gpio_stm32_pin_interrupt_configure+0xde>
 80056e4:	f1b6 6fc0 	cmp.w	r6, #100663296	; 0x6000000
 80056e8:	d00f      	beq.n	800570a <gpio_stm32_pin_interrupt_configure+0xe2>
 80056ea:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 80056ee:	bf14      	ite	ne
 80056f0:	2100      	movne	r1, #0
 80056f2:	2102      	moveq	r1, #2
	stm32_exti_trigger(pin, edge);
 80056f4:	4620      	mov	r0, r4
 80056f6:	f7ff fb7b 	bl	8004df0 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 80056fa:	4620      	mov	r0, r4
 80056fc:	f7ff fb5c 	bl	8004db8 <stm32_exti_enable>
}
 8005700:	4628      	mov	r0, r5
 8005702:	b003      	add	sp, #12
 8005704:	bdf0      	pop	{r4, r5, r6, r7, pc}
		edge = STM32_EXTI_TRIG_RISING;
 8005706:	2101      	movs	r1, #1
 8005708:	e7f4      	b.n	80056f4 <gpio_stm32_pin_interrupt_configure+0xcc>
		edge = STM32_EXTI_TRIG_BOTH;
 800570a:	2103      	movs	r1, #3
 800570c:	e7f2      	b.n	80056f4 <gpio_stm32_pin_interrupt_configure+0xcc>
		err = -ENOTSUP;
 800570e:	f06f 0585 	mvn.w	r5, #133	; 0x85
 8005712:	e7f5      	b.n	8005700 <gpio_stm32_pin_interrupt_configure+0xd8>
		err = -EBUSY;
 8005714:	f06f 050f 	mvn.w	r5, #15
	return err;
 8005718:	e7f2      	b.n	8005700 <gpio_stm32_pin_interrupt_configure+0xd8>
 800571a:	bf00      	nop
 800571c:	40010000 	.word	0x40010000
 8005720:	08008c6b 	.word	0x08008c6b
 8005724:	0800a3f8 	.word	0x0800a3f8

08005728 <msg_init>:
#define STM32_I2C_TRANSFER_TIMEOUT_MSEC  500

static inline void msg_init(const struct device *dev, struct i2c_msg *msg,
			    uint8_t *next_msg_flags, uint16_t slave,
			    uint32_t transfer)
{
 8005728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800572a:	4606      	mov	r6, r0
	const struct i2c_stm32_config *cfg = dev->config;
	struct i2c_stm32_data *data = dev->data;
	I2C_TypeDef *i2c = cfg->i2c;
 800572c:	6840      	ldr	r0, [r0, #4]
  * @param  TransferSize This parameter must be a value between Min_Data=0x00 and Max_Data=0xFF.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTransferSize(I2C_TypeDef *I2Cx, uint32_t TransferSize)
{
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 800572e:	684d      	ldr	r5, [r1, #4]
 8005730:	68c4      	ldr	r4, [r0, #12]
  return ((READ_BIT(I2Cx->CR2, I2C_CR2_RELOAD) == (I2C_CR2_RELOAD)) ? 1UL : 0UL);
 8005732:	6860      	ldr	r0, [r4, #4]
 8005734:	01c0      	lsls	r0, r0, #7
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 8005736:	ea4f 4505 	mov.w	r5, r5, lsl #16
  return ((READ_BIT(I2Cx->CR2, I2C_CR2_RELOAD) == (I2C_CR2_RELOAD)) ? 1UL : 0UL);
 800573a:	d505      	bpl.n	8005748 <msg_init+0x20>
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 800573c:	6863      	ldr	r3, [r4, #4]
 800573e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8005742:	432b      	orrs	r3, r5
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
  SET_BIT(I2Cx->CR2, I2C_CR2_START);
 8005744:	6063      	str	r3, [r4, #4]
#endif
		LL_I2C_Enable(i2c);

		LL_I2C_GenerateStartCondition(i2c);
	}
}
 8005746:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (I2C_ADDR_10_BITS & data->dev_config) {
 8005748:	6930      	ldr	r0, [r6, #16]
 800574a:	4f1d      	ldr	r7, [pc, #116]	; (80057c0 <msg_init+0x98>)
 800574c:	6a00      	ldr	r0, [r0, #32]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_ADD10, AddressingMode);
 800574e:	6866      	ldr	r6, [r4, #4]
 8005750:	f010 0f01 	tst.w	r0, #1
 8005754:	d028      	beq.n	80057a8 <msg_init+0x80>
 8005756:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
 800575a:	6066      	str	r6, [r4, #4]
  * @param  SlaveAddr This parameter must be a value between Min_Data=0x00 and Max_Data=0x3F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetSlaveAddr(I2C_TypeDef *I2Cx, uint32_t SlaveAddr)
{
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 800575c:	6860      	ldr	r0, [r4, #4]
 800575e:	4038      	ands	r0, r7
 8005760:	4318      	orrs	r0, r3
 8005762:	6060      	str	r0, [r4, #4]
		if (!(msg->flags & I2C_MSG_STOP) && next_msg_flags &&
 8005764:	7a0b      	ldrb	r3, [r1, #8]
 8005766:	0799      	lsls	r1, r3, #30
 8005768:	d426      	bmi.n	80057b8 <msg_init+0x90>
 800576a:	b32a      	cbz	r2, 80057b8 <msg_init+0x90>
 800576c:	7813      	ldrb	r3, [r2, #0]
 800576e:	075b      	lsls	r3, r3, #29
 8005770:	d422      	bmi.n	80057b8 <msg_init+0x90>
  SET_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 8005772:	6863      	ldr	r3, [r4, #4]
 8005774:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 8005778:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800577a:	6863      	ldr	r3, [r4, #4]
 800577c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005780:	6063      	str	r3, [r4, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_RD_WRN, TransferRequest);
 8005782:	6862      	ldr	r2, [r4, #4]
 8005784:	9b05      	ldr	r3, [sp, #20]
 8005786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800578a:	431a      	orrs	r2, r3
 800578c:	6062      	str	r2, [r4, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 800578e:	6863      	ldr	r3, [r4, #4]
 8005790:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8005794:	432b      	orrs	r3, r5
 8005796:	6063      	str	r3, [r4, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	f043 0301 	orr.w	r3, r3, #1
 800579e:	6023      	str	r3, [r4, #0]
  SET_BIT(I2Cx->CR2, I2C_CR2_START);
 80057a0:	6863      	ldr	r3, [r4, #4]
 80057a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80057a6:	e7cd      	b.n	8005744 <msg_init+0x1c>
  MODIFY_REG(I2Cx->CR2, I2C_CR2_ADD10, AddressingMode);
 80057a8:	f426 6600 	bic.w	r6, r6, #2048	; 0x800
 80057ac:	6066      	str	r6, [r4, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 80057ae:	6860      	ldr	r0, [r4, #4]
 80057b0:	4038      	ands	r0, r7
 80057b2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80057b6:	e7d4      	b.n	8005762 <msg_init+0x3a>
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 80057b8:	6863      	ldr	r3, [r4, #4]
 80057ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057be:	e7db      	b.n	8005778 <msg_init+0x50>
 80057c0:	fffffc00 	.word	0xfffffc00

080057c4 <stm32_i2c_configure_timing>:
	return msg_done(dev, msg->flags);
}
#endif

int stm32_i2c_configure_timing(const struct device *dev, uint32_t clock)
{
 80057c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct i2c_stm32_config *cfg = dev->config;
 80057c8:	6844      	ldr	r4, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 80057ca:	6903      	ldr	r3, [r0, #16]
 80057cc:	9301      	str	r3, [sp, #4]
	I2C_TypeDef *i2c = cfg->i2c;
 80057ce:	68e5      	ldr	r5, [r4, #12]
	uint32_t i2c_h_min_time, i2c_l_min_time;
	uint32_t presc = 1U;
	uint32_t timing = 0U;

	/*  Look for an adequate preset timing value */
	for (uint32_t i = 0; i < cfg->n_timings; i++) {
 80057d0:	69e3      	ldr	r3, [r4, #28]
extern "C" {
#endif

static inline uint32_t i2c_map_dt_bitrate(uint32_t bitrate)
{
	switch (bitrate) {
 80057d2:	f8df 8110 	ldr.w	r8, [pc, #272]	; 80058e4 <stm32_i2c_configure_timing+0x120>
 80057d6:	f8df 9110 	ldr.w	r9, [pc, #272]	; 80058e8 <stm32_i2c_configure_timing+0x124>
 80057da:	f8df a110 	ldr.w	sl, [pc, #272]	; 80058ec <stm32_i2c_configure_timing+0x128>
 80057de:	f8df b110 	ldr.w	fp, [pc, #272]	; 80058f0 <stm32_i2c_configure_timing+0x12c>
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	2200      	movs	r2, #0
 80057e6:	9b00      	ldr	r3, [sp, #0]
 80057e8:	4293      	cmp	r3, r2
 80057ea:	9b01      	ldr	r3, [sp, #4]
 80057ec:	6a18      	ldr	r0, [r3, #32]
 80057ee:	d139      	bne.n	8005864 <stm32_i2c_configure_timing+0xa0>
			return 0;
		}
	}

	/* No preset timing was provided, let's dynamically configure */
	switch (I2C_SPEED_GET(data->dev_config)) {
 80057f0:	f3c0 0042 	ubfx	r0, r0, #1, #3
 80057f4:	2801      	cmp	r0, #1
 80057f6:	d065      	beq.n	80058c4 <stm32_i2c_configure_timing+0x100>
 80057f8:	2802      	cmp	r0, #2
 80057fa:	d16f      	bne.n	80058dc <stm32_i2c_configure_timing+0x118>
 80057fc:	f240 5614 	movw	r6, #1300	; 0x514
 8005800:	f44f 7416 	mov.w	r4, #600	; 0x258
 8005804:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 8005808:	f240 1c77 	movw	ip, #375	; 0x177
	}

	/* Calculate period until prescaler matches */
	do {
		uint32_t t_presc = clock / presc;
		uint32_t ns_presc = NSEC_PER_SEC / t_presc;
 800580c:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 80058f4 <stm32_i2c_configure_timing+0x130>
	switch (I2C_SPEED_GET(data->dev_config)) {
 8005810:	2002      	movs	r0, #2
		uint32_t t_presc = clock / presc;
 8005812:	1e43      	subs	r3, r0, #1
 8005814:	fbb1 f3f3 	udiv	r3, r1, r3
		uint32_t ns_presc = NSEC_PER_SEC / t_presc;
 8005818:	fbbe f3f3 	udiv	r3, lr, r3
		uint32_t sclh = i2c_h_min_time / ns_presc;
 800581c:	fbb4 f8f3 	udiv	r8, r4, r3
		uint32_t scll = i2c_l_min_time / ns_presc;
		uint32_t sdadel = i2c_hold_time_min / ns_presc;
		uint32_t scldel = i2c_setup_time_min / ns_presc;

		if ((sclh - 1) > 255 ||  (scll - 1) > 255) {
 8005820:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005824:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8005828:	d855      	bhi.n	80058d6 <stm32_i2c_configure_timing+0x112>
		uint32_t scll = i2c_l_min_time / ns_presc;
 800582a:	fbb6 f9f3 	udiv	r9, r6, r3
		if ((sclh - 1) > 255 ||  (scll - 1) > 255) {
 800582e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005832:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8005836:	d84e      	bhi.n	80058d6 <stm32_i2c_configure_timing+0x112>
		uint32_t sdadel = i2c_hold_time_min / ns_presc;
 8005838:	fbbc f2f3 	udiv	r2, ip, r3
			++presc;
			continue;
		}

		if (sdadel > 15 || (scldel - 1) > 15) {
 800583c:	2a0f      	cmp	r2, #15
 800583e:	d84a      	bhi.n	80058d6 <stm32_i2c_configure_timing+0x112>
		uint32_t scldel = i2c_setup_time_min / ns_presc;
 8005840:	fbb7 f3f3 	udiv	r3, r7, r3
		if (sdadel > 15 || (scldel - 1) > 15) {
 8005844:	3b01      	subs	r3, #1
 8005846:	2b0f      	cmp	r3, #15
 8005848:	d845      	bhi.n	80058d6 <stm32_i2c_configure_timing+0x112>
			++presc;
			continue;
		}

		timing = __LL_I2C_CONVERT_TIMINGS(presc - 1,
 800584a:	0412      	lsls	r2, r2, #16
 800584c:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 8005850:	ea43 0309 	orr.w	r3, r3, r9
 8005854:	3802      	subs	r0, #2
 8005856:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
 800585a:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800585e:	612b      	str	r3, [r5, #16]
		return -EINVAL;
	}

	LL_I2C_SetTiming(i2c, timing);

	return 0;
 8005860:	2000      	movs	r0, #0
 8005862:	e01d      	b.n	80058a0 <stm32_i2c_configure_timing+0xdc>
		const struct i2c_config_timing *preset = &cfg->timings[i];
 8005864:	230c      	movs	r3, #12
 8005866:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800586a:	f8df e08c 	ldr.w	lr, [pc, #140]	; 80058f8 <stm32_i2c_configure_timing+0x134>
 800586e:	fb03 f702 	mul.w	r7, r3, r2
 8005872:	eb0c 0607 	add.w	r6, ip, r7
		uint32_t speed = i2c_map_dt_bitrate(preset->i2c_speed);
 8005876:	6873      	ldr	r3, [r6, #4]
 8005878:	4573      	cmp	r3, lr
 800587a:	d01b      	beq.n	80058b4 <stm32_i2c_configure_timing+0xf0>
 800587c:	d813      	bhi.n	80058a6 <stm32_i2c_configure_timing+0xe2>
 800587e:	4553      	cmp	r3, sl
 8005880:	d01a      	beq.n	80058b8 <stm32_i2c_configure_timing+0xf4>
 8005882:	455b      	cmp	r3, fp
 8005884:	bf0c      	ite	eq
 8005886:	2304      	moveq	r3, #4
 8005888:	2300      	movne	r3, #0
		if ((I2C_SPEED_GET(speed) == I2C_SPEED_GET(data->dev_config))
 800588a:	f3c0 0042 	ubfx	r0, r0, #1, #3
 800588e:	ea90 0053 	eors.w	r0, r0, r3, lsr #1
 8005892:	d115      	bne.n	80058c0 <stm32_i2c_configure_timing+0xfc>
		   && (preset->periph_clock == clock)) {
 8005894:	f85c 3007 	ldr.w	r3, [ip, r7]
 8005898:	428b      	cmp	r3, r1
 800589a:	d111      	bne.n	80058c0 <stm32_i2c_configure_timing+0xfc>
			LL_I2C_SetTiming(i2c, preset->timing_setting);
 800589c:	68b3      	ldr	r3, [r6, #8]
 800589e:	612b      	str	r3, [r5, #16]
}
 80058a0:	b003      	add	sp, #12
 80058a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058a6:	4543      	cmp	r3, r8
 80058a8:	d008      	beq.n	80058bc <stm32_i2c_configure_timing+0xf8>
	case I2C_BITRATE_FAST_PLUS:
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
	case I2C_BITRATE_HIGH:
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
	case I2C_BITRATE_ULTRA:
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
 80058aa:	454b      	cmp	r3, r9
 80058ac:	bf0c      	ite	eq
 80058ae:	230a      	moveq	r3, #10
 80058b0:	2300      	movne	r3, #0
 80058b2:	e7ea      	b.n	800588a <stm32_i2c_configure_timing+0xc6>
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
 80058b4:	2306      	movs	r3, #6
 80058b6:	e7e8      	b.n	800588a <stm32_i2c_configure_timing+0xc6>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
 80058b8:	2302      	movs	r3, #2
 80058ba:	e7e6      	b.n	800588a <stm32_i2c_configure_timing+0xc6>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
 80058bc:	2308      	movs	r3, #8
 80058be:	e7e4      	b.n	800588a <stm32_i2c_configure_timing+0xc6>
	for (uint32_t i = 0; i < cfg->n_timings; i++) {
 80058c0:	3201      	adds	r2, #1
 80058c2:	e790      	b.n	80057e6 <stm32_i2c_configure_timing+0x22>
		i2c_l_min_time = 4700U;
 80058c4:	f241 265c 	movw	r6, #4700	; 0x125c
		i2c_h_min_time = 4000U;
 80058c8:	f44f 647a 	mov.w	r4, #4000	; 0xfa0
		i2c_setup_time_min = 1250U;
 80058cc:	f240 47e2 	movw	r7, #1250	; 0x4e2
		i2c_hold_time_min = 500U;
 80058d0:	f44f 7cfa 	mov.w	ip, #500	; 0x1f4
 80058d4:	e79a      	b.n	800580c <stm32_i2c_configure_timing+0x48>
	} while (presc < 16);
 80058d6:	3001      	adds	r0, #1
 80058d8:	2811      	cmp	r0, #17
 80058da:	d19a      	bne.n	8005812 <stm32_i2c_configure_timing+0x4e>
	switch (I2C_SPEED_GET(data->dev_config)) {
 80058dc:	f06f 0015 	mvn.w	r0, #21
 80058e0:	e7de      	b.n	80058a0 <stm32_i2c_configure_timing+0xdc>
 80058e2:	bf00      	nop
 80058e4:	0033e140 	.word	0x0033e140
 80058e8:	004c4b40 	.word	0x004c4b40
 80058ec:	000186a0 	.word	0x000186a0
 80058f0:	00061a80 	.word	0x00061a80
 80058f4:	3b9aca00 	.word	0x3b9aca00
 80058f8:	000f4240 	.word	0x000f4240

080058fc <i2c_stm32_runtime_configure>:
LOG_MODULE_REGISTER(i2c_ll_stm32);

#include "i2c-priv.h"

int i2c_stm32_runtime_configure(const struct device *dev, uint32_t config)
{
 80058fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct i2c_stm32_config *cfg = dev->config;
 8005900:	6847      	ldr	r7, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 8005902:	f8d0 9010 	ldr.w	r9, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8005906:	68fe      	ldr	r6, [r7, #12]
	uint32_t clock = 0U;
 8005908:	2200      	movs	r2, #0
{
 800590a:	4605      	mov	r5, r0
 800590c:	460c      	mov	r4, r1
	uint32_t clock = 0U;
 800590e:	9201      	str	r2, [sp, #4]
	 */
	LL_RCC_GetSystemClocksFreq(&rcc_clocks);
	clock = rcc_clocks.SYSCLK_Frequency;
#else
	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
			(clock_control_subsys_t *) &cfg->pclken, &clock) < 0) {
 8005910:	3704      	adds	r7, #4
 8005912:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8005978 <i2c_stm32_runtime_configure+0x7c>
 8005916:	4640      	mov	r0, r8
 8005918:	f004 f87c 	bl	8009a14 <z_device_is_ready>
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	if (!device_is_ready(dev)) {
 800591c:	b928      	cbnz	r0, 800592a <i2c_stm32_runtime_configure+0x2e>
		LOG_ERR("Failed call clock_control_get_rate");
		return -EIO;
 800591e:	f06f 0504 	mvn.w	r5, #4
	LL_I2C_SetMode(i2c, LL_I2C_MODE_I2C);
	ret = stm32_i2c_configure_timing(dev, clock);
	k_sem_give(&data->bus_mutex);

	return ret;
}
 8005922:	4628      	mov	r0, r5
 8005924:	b003      	add	sp, #12
 8005926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 800592a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0f4      	beq.n	800591e <i2c_stm32_runtime_configure+0x22>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 8005934:	aa01      	add	r2, sp, #4
 8005936:	4639      	mov	r1, r7
 8005938:	4640      	mov	r0, r8
 800593a:	4798      	blx	r3
	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 800593c:	2800      	cmp	r0, #0
 800593e:	dbee      	blt.n	800591e <i2c_stm32_runtime_configure+0x22>
	data->dev_config = config;
 8005940:	f8c9 4020 	str.w	r4, [r9, #32]
	k_sem_take(&data->bus_mutex, K_FOREVER);
 8005944:	f109 0910 	add.w	r9, r9, #16
	return z_impl_k_sem_take(sem, timeout);
 8005948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800594c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005950:	4648      	mov	r0, r9
 8005952:	f001 fc83 	bl	800725c <z_impl_k_sem_take>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8005956:	6833      	ldr	r3, [r6, #0]
	ret = stm32_i2c_configure_timing(dev, clock);
 8005958:	9901      	ldr	r1, [sp, #4]
 800595a:	f023 0301 	bic.w	r3, r3, #1
 800595e:	6033      	str	r3, [r6, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8005960:	6833      	ldr	r3, [r6, #0]
 8005962:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005966:	6033      	str	r3, [r6, #0]
 8005968:	4628      	mov	r0, r5
 800596a:	f7ff ff2b 	bl	80057c4 <stm32_i2c_configure_timing>
 800596e:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
 8005970:	4648      	mov	r0, r9
 8005972:	f001 fc53 	bl	800721c <z_impl_k_sem_give>
}
 8005976:	e7d4      	b.n	8005922 <i2c_stm32_runtime_configure+0x26>
 8005978:	08009e8c 	.word	0x08009e8c

0800597c <i2c_stm32_init>:
	.slave_unregister = i2c_stm32_slave_unregister,
#endif
};

static int i2c_stm32_init(const struct device *dev)
{
 800597c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct device *clock = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	const struct i2c_stm32_config *cfg = dev->config;
 800597e:	6845      	ldr	r5, [r0, #4]
	uint32_t bitrate_cfg;
	int ret;
	struct i2c_stm32_data *data = dev->data;
 8005980:	6906      	ldr	r6, [r0, #16]
{
 8005982:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
 8005984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005988:	2100      	movs	r1, #0
 800598a:	4630      	mov	r0, r6
 800598c:	f004 f896 	bl	8009abc <z_impl_k_sem_init>
#ifdef CONFIG_I2C_STM32_INTERRUPT
	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	cfg->irq_config_func(dev);
 8005990:	682b      	ldr	r3, [r5, #0]
 8005992:	4620      	mov	r0, r4
 8005994:	4798      	blx	r3
	ret = pinctrl_lookup_state(config, id, &state);
 8005996:	6968      	ldr	r0, [r5, #20]
 8005998:	aa01      	add	r2, sp, #4
 800599a:	2100      	movs	r1, #0
 800599c:	f003 fcb3 	bl	8009306 <pinctrl_lookup_state>
	if (ret < 0) {
 80059a0:	2800      	cmp	r0, #0
 80059a2:	db15      	blt.n	80059d0 <i2c_stm32_init+0x54>
	return pinctrl_apply_state_direct(config, state);
 80059a4:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 80059a6:	2200      	movs	r2, #0
 80059a8:	7919      	ldrb	r1, [r3, #4]
 80059aa:	6818      	ldr	r0, [r3, #0]
 80059ac:	f000 fb3e 	bl	800602c <pinctrl_configure_pins>
#endif

	/* Configure dt provided device signals when available */
	ret = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (ret < 0) {
 80059b0:	2800      	cmp	r0, #0
 80059b2:	db0d      	blt.n	80059d0 <i2c_stm32_init+0x54>
 80059b4:	2201      	movs	r2, #1
 80059b6:	4611      	mov	r1, r2
 80059b8:	f106 0010 	add.w	r0, r6, #16
 80059bc:	f004 f87e 	bl	8009abc <z_impl_k_sem_init>
	 * atomic and has exclusive access to the I2C bus.
	 */
	k_sem_init(&data->bus_mutex, 1, 1);

	if (clock_control_on(clock,
		(clock_control_subsys_t *) &cfg->pclken) != 0) {
 80059c0:	1d2f      	adds	r7, r5, #4
 80059c2:	4e1b      	ldr	r6, [pc, #108]	; (8005a30 <i2c_stm32_init+0xb4>)
 80059c4:	4630      	mov	r0, r6
 80059c6:	f004 f825 	bl	8009a14 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 80059ca:	b918      	cbnz	r0, 80059d4 <i2c_stm32_init+0x58>
		LOG_ERR("i2c: failure enabling clock");
		return -EIO;
 80059cc:	f06f 0004 	mvn.w	r0, #4
		LOG_ERR("i2c: failure initializing");
		return ret;
	}

	return 0;
}
 80059d0:	b003      	add	sp, #12
 80059d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return api->on(dev, sys);
 80059d4:	68b3      	ldr	r3, [r6, #8]
 80059d6:	4639      	mov	r1, r7
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4630      	mov	r0, r6
 80059dc:	4798      	blx	r3
	if (clock_control_on(clock,
 80059de:	2800      	cmp	r0, #0
 80059e0:	d1f4      	bne.n	80059cc <i2c_stm32_init+0x50>
	bitrate_cfg = i2c_map_dt_bitrate(cfg->bitrate);
 80059e2:	6929      	ldr	r1, [r5, #16]
	switch (bitrate) {
 80059e4:	4b13      	ldr	r3, [pc, #76]	; (8005a34 <i2c_stm32_init+0xb8>)
 80059e6:	4299      	cmp	r1, r3
 80059e8:	d01c      	beq.n	8005a24 <i2c_stm32_init+0xa8>
 80059ea:	d80f      	bhi.n	8005a0c <i2c_stm32_init+0x90>
 80059ec:	4b12      	ldr	r3, [pc, #72]	; (8005a38 <i2c_stm32_init+0xbc>)
 80059ee:	4299      	cmp	r1, r3
 80059f0:	d01a      	beq.n	8005a28 <i2c_stm32_init+0xac>
 80059f2:	4b12      	ldr	r3, [pc, #72]	; (8005a3c <i2c_stm32_init+0xc0>)
 80059f4:	4299      	cmp	r1, r3
 80059f6:	bf0c      	ite	eq
 80059f8:	2104      	moveq	r1, #4
 80059fa:	2100      	movne	r1, #0
	ret = i2c_stm32_runtime_configure(dev, I2C_MODE_MASTER | bitrate_cfg);
 80059fc:	f041 0110 	orr.w	r1, r1, #16
 8005a00:	4620      	mov	r0, r4
 8005a02:	f7ff ff7b 	bl	80058fc <i2c_stm32_runtime_configure>
	if (ret < 0) {
 8005a06:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 8005a0a:	e7e1      	b.n	80059d0 <i2c_stm32_init+0x54>
 8005a0c:	4b0c      	ldr	r3, [pc, #48]	; (8005a40 <i2c_stm32_init+0xc4>)
 8005a0e:	4299      	cmp	r1, r3
 8005a10:	d00c      	beq.n	8005a2c <i2c_stm32_init+0xb0>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
 8005a12:	f503 13c3 	add.w	r3, r3, #1597440	; 0x186000
 8005a16:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 8005a1a:	4299      	cmp	r1, r3
 8005a1c:	bf0c      	ite	eq
 8005a1e:	210a      	moveq	r1, #10
 8005a20:	2100      	movne	r1, #0
 8005a22:	e7eb      	b.n	80059fc <i2c_stm32_init+0x80>
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
 8005a24:	2106      	movs	r1, #6
 8005a26:	e7e9      	b.n	80059fc <i2c_stm32_init+0x80>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
 8005a28:	2102      	movs	r1, #2
 8005a2a:	e7e7      	b.n	80059fc <i2c_stm32_init+0x80>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
 8005a2c:	2108      	movs	r1, #8
 8005a2e:	e7e5      	b.n	80059fc <i2c_stm32_init+0x80>
 8005a30:	08009e8c 	.word	0x08009e8c
 8005a34:	000f4240 	.word	0x000f4240
 8005a38:	000186a0 	.word	0x000186a0
 8005a3c:	00061a80 	.word	0x00061a80
 8005a40:	0033e140 	.word	0x0033e140

08005a44 <z_impl_hwinfo_get_device_id>:
struct stm32_uid {
	uint32_t id[3];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
 8005a44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a46:	4b0c      	ldr	r3, [pc, #48]	; (8005a78 <z_impl_hwinfo_get_device_id+0x34>)
 8005a48:	f8d3 2598 	ldr.w	r2, [r3, #1432]	; 0x598
 8005a4c:	ba12      	rev	r2, r2
	struct stm32_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(LL_GetUID_Word2());
 8005a4e:	9201      	str	r2, [sp, #4]
  * @brief  Get Word1 of the unique device identifier (UID based on 96 bits)
  * @retval UID[63:32]: Wafer number (UID[39:32]) & LOT_NUM[23:0] (UID[63:40])
  */
__STATIC_INLINE uint32_t LL_GetUID_Word1(void)
{
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 4U))));
 8005a50:	f8d3 2594 	ldr.w	r2, [r3, #1428]	; 0x594
 8005a54:	ba12      	rev	r2, r2
	dev_id.id[1] = sys_cpu_to_be32(LL_GetUID_Word1());
 8005a56:	9202      	str	r2, [sp, #8]
  return (uint32_t)(READ_REG(*((uint32_t *)UID_BASE_ADDRESS)));
 8005a58:	290c      	cmp	r1, #12
 8005a5a:	f8d3 3590 	ldr.w	r3, [r3, #1424]	; 0x590
 8005a5e:	bf28      	it	cs
 8005a60:	210c      	movcs	r1, #12
 8005a62:	ba1b      	rev	r3, r3
 8005a64:	460c      	mov	r4, r1
 8005a66:	460a      	mov	r2, r1
 8005a68:	a901      	add	r1, sp, #4
	dev_id.id[2] = sys_cpu_to_be32(LL_GetUID_Word0());
 8005a6a:	9303      	str	r3, [sp, #12]
 8005a6c:	f004 f960 	bl	8009d30 <memcpy>
	}

	memcpy(buffer, dev_id.id, length);

	return length;
}
 8005a70:	4620      	mov	r0, r4
 8005a72:	b004      	add	sp, #16
 8005a74:	bd10      	pop	{r4, pc}
 8005a76:	bf00      	nop
 8005a78:	1fff7000 	.word	0x1fff7000

08005a7c <uart_stm32_irq_err_enable>:
static void uart_stm32_irq_err_enable(const struct device *dev)
{
	const struct uart_stm32_config *config = dev->config;

	/* Enable FE, ORE interruptions */
	LL_USART_EnableIT_ERROR(config->usart);
 8005a7c:	6843      	ldr	r3, [r0, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8005a80:	689a      	ldr	r2, [r3, #8]
 8005a82:	f042 0201 	orr.w	r2, r2, #1
 8005a86:	609a      	str	r2, [r3, #8]
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Enable Line break detection */
	if (IS_UART_LIN_INSTANCE(config->usart)) {
 8005a88:	4a0d      	ldr	r2, [pc, #52]	; (8005ac0 <uart_stm32_irq_err_enable+0x44>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d00f      	beq.n	8005aae <uart_stm32_irq_err_enable+0x32>
 8005a8e:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d00b      	beq.n	8005aae <uart_stm32_irq_err_enable+0x32>
 8005a96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d007      	beq.n	8005aae <uart_stm32_irq_err_enable+0x32>
 8005a9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d003      	beq.n	8005aae <uart_stm32_irq_err_enable+0x32>
 8005aa6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d103      	bne.n	8005ab6 <uart_stm32_irq_err_enable+0x3a>
  SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ab4:	605a      	str	r2, [r3, #4]
  SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005abc:	601a      	str	r2, [r3, #0]
		LL_USART_EnableIT_LBD(config->usart);
	}
#endif
	/* Enable parity error interruption */
	LL_USART_EnableIT_PE(config->usart);
}
 8005abe:	4770      	bx	lr
 8005ac0:	40013800 	.word	0x40013800

08005ac4 <uart_stm32_irq_err_disable>:
static void uart_stm32_irq_err_disable(const struct device *dev)
{
	const struct uart_stm32_config *config = dev->config;

	/* Disable FE, ORE interruptions */
	LL_USART_DisableIT_ERROR(config->usart);
 8005ac4:	6843      	ldr	r3, [r0, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8005ac8:	689a      	ldr	r2, [r3, #8]
 8005aca:	f022 0201 	bic.w	r2, r2, #1
 8005ace:	609a      	str	r2, [r3, #8]
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Disable Line break detection */
	if (IS_UART_LIN_INSTANCE(config->usart)) {
 8005ad0:	4a0d      	ldr	r2, [pc, #52]	; (8005b08 <uart_stm32_irq_err_disable+0x44>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d00f      	beq.n	8005af6 <uart_stm32_irq_err_disable+0x32>
 8005ad6:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d00b      	beq.n	8005af6 <uart_stm32_irq_err_disable+0x32>
 8005ade:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d007      	beq.n	8005af6 <uart_stm32_irq_err_disable+0x32>
 8005ae6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d003      	beq.n	8005af6 <uart_stm32_irq_err_disable+0x32>
 8005aee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d103      	bne.n	8005afe <uart_stm32_irq_err_disable+0x3a>
  CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005afc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b04:	601a      	str	r2, [r3, #0]
		LL_USART_DisableIT_LBD(config->usart);
	}
#endif
	/* Disable parity error interruption */
	LL_USART_DisableIT_PE(config->usart);
}
 8005b06:	4770      	bx	lr
 8005b08:	40013800 	.word	0x40013800

08005b0c <lpuartdiv_calc>:
{
 8005b0c:	b570      	push	{r4, r5, r6, lr}
 8005b0e:	461d      	mov	r5, r3
	lpuartdiv = clock_rate / LPUART_PRESCALER_TAB[presc_idx];
 8005b10:	4b09      	ldr	r3, [pc, #36]	; (8005b38 <lpuartdiv_calc+0x2c>)
 8005b12:	2600      	movs	r6, #0
 8005b14:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005b18:	4633      	mov	r3, r6
 8005b1a:	f7fa ffe5 	bl	8000ae8 <__aeabi_uldivmod>
	lpuartdiv *= LPUART_LPUARTDIV_FREQ_MUL;
 8005b1e:	0209      	lsls	r1, r1, #8
 8005b20:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
	lpuartdiv += baud_rate / 2;
 8005b24:	086c      	lsrs	r4, r5, #1
	lpuartdiv *= LPUART_LPUARTDIV_FREQ_MUL;
 8005b26:	0200      	lsls	r0, r0, #8
	lpuartdiv += baud_rate / 2;
 8005b28:	1820      	adds	r0, r4, r0
	lpuartdiv /= baud_rate;
 8005b2a:	462a      	mov	r2, r5
 8005b2c:	4633      	mov	r3, r6
 8005b2e:	f141 0100 	adc.w	r1, r1, #0
 8005b32:	f7fa ffd9 	bl	8000ae8 <__aeabi_uldivmod>
}
 8005b36:	bd70      	pop	{r4, r5, r6, pc}
 8005b38:	0800a83a 	.word	0x0800a83a

08005b3c <uart_stm32_set_baudrate>:
{
 8005b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (clock_control_get_rate(data->clock,
 8005b3e:	6903      	ldr	r3, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 8005b40:	6846      	ldr	r6, [r0, #4]
	if (clock_control_get_rate(data->clock,
 8005b42:	685c      	ldr	r4, [r3, #4]
{
 8005b44:	460d      	mov	r5, r1
			       (clock_control_subsys_t *)&config->pclken,
 8005b46:	1d37      	adds	r7, r6, #4
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f003 ff63 	bl	8009a14 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8005b4e:	b1e0      	cbz	r0, 8005b8a <uart_stm32_set_baudrate+0x4e>
	if (api->get_rate == NULL) {
 8005b50:	68a3      	ldr	r3, [r4, #8]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	b1cb      	cbz	r3, 8005b8a <uart_stm32_set_baudrate+0x4e>
	return api->get_rate(dev, sys, rate);
 8005b56:	aa01      	add	r2, sp, #4
 8005b58:	4639      	mov	r1, r7
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	4798      	blx	r3
	if (clock_control_get_rate(data->clock,
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	db13      	blt.n	8005b8a <uart_stm32_set_baudrate+0x4e>
	if (IS_LPUART_INSTANCE(config->usart)) {
 8005b62:	6833      	ldr	r3, [r6, #0]
 8005b64:	4a20      	ldr	r2, [pc, #128]	; (8005be8 <uart_stm32_set_baudrate+0xac>)
		LL_USART_SetBaudRate(config->usart,
 8005b66:	9c01      	ldr	r4, [sp, #4]
	if (IS_LPUART_INSTANCE(config->usart)) {
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d110      	bne.n	8005b8e <uart_stm32_set_baudrate+0x52>
			if (lpuartdiv >= LPUART_BRR_MIN_VALUE && lpuartdiv <= LPUART_BRR_MASK) {
 8005b6c:	4f1f      	ldr	r7, [pc, #124]	; (8005bec <uart_stm32_set_baudrate+0xb0>)
			lpuartdiv = lpuartdiv_calc(clock_rate, presc_idx, baud_rate);
 8005b6e:	2600      	movs	r6, #0
 8005b70:	462b      	mov	r3, r5
 8005b72:	b2b2      	uxth	r2, r6
 8005b74:	4620      	mov	r0, r4
 8005b76:	2100      	movs	r1, #0
 8005b78:	f7ff ffc8 	bl	8005b0c <lpuartdiv_calc>
			if (lpuartdiv >= LPUART_BRR_MIN_VALUE && lpuartdiv <= LPUART_BRR_MASK) {
 8005b7c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
 8005b80:	42b8      	cmp	r0, r7
 8005b82:	d90f      	bls.n	8005ba4 <uart_stm32_set_baudrate+0x68>
		for (presc_idx = 0; presc_idx < ARRAY_SIZE(LPUART_PRESCALER_TAB); presc_idx++) {
 8005b84:	3601      	adds	r6, #1
 8005b86:	2e0c      	cmp	r6, #12
 8005b88:	d1f2      	bne.n	8005b70 <uart_stm32_set_baudrate+0x34>
}
 8005b8a:	b003      	add	sp, #12
 8005b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8005b8e:	681a      	ldr	r2, [r3, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8005b90:	eb04 0455 	add.w	r4, r4, r5, lsr #1
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8005b94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8005b98:	fbb4 f5f5 	udiv	r5, r4, r5
 8005b9c:	b2ad      	uxth	r5, r5
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8005b9e:	601a      	str	r2, [r3, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8005ba0:	60dd      	str	r5, [r3, #12]
 8005ba2:	e7f2      	b.n	8005b8a <uart_stm32_set_baudrate+0x4e>
  *         @arg @ref LL_LPUART_PRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetPrescaler(USART_TypeDef *LPUARTx, uint32_t PrescalerValue)
{
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8005ba4:	4f10      	ldr	r7, [pc, #64]	; (8005be8 <uart_stm32_set_baudrate+0xac>)
 8005ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba8:	f023 030f 	bic.w	r3, r3, #15
 8005bac:	4333      	orrs	r3, r6
 8005bae:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
__STATIC_INLINE void LL_LPUART_SetBaudRate(USART_TypeDef *LPUARTx, uint32_t PeriphClk, uint32_t BaudRate)
#endif /* USART_PRESC_PRESCALER */
{
#if defined(USART_PRESC_PRESCALER)
  if (BaudRate != 0U)
 8005bb0:	2d00      	cmp	r5, #0
 8005bb2:	d0ea      	beq.n	8005b8a <uart_stm32_set_baudrate+0x4e>
  {
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 8005bb4:	4b0e      	ldr	r3, [pc, #56]	; (8005bf0 <uart_stm32_set_baudrate+0xb4>)
 8005bb6:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
 8005bba:	2300      	movs	r3, #0
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	f7fa ff92 	bl	8000ae8 <__aeabi_uldivmod>
 8005bc4:	0209      	lsls	r1, r1, #8
 8005bc6:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8005bca:	086b      	lsrs	r3, r5, #1
 8005bcc:	0200      	lsls	r0, r0, #8
 8005bce:	18c0      	adds	r0, r0, r3
 8005bd0:	462a      	mov	r2, r5
 8005bd2:	f04f 0300 	mov.w	r3, #0
 8005bd6:	f141 0100 	adc.w	r1, r1, #0
 8005bda:	f7fa ff85 	bl	8000ae8 <__aeabi_uldivmod>
 8005bde:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	e7d1      	b.n	8005b8a <uart_stm32_set_baudrate+0x4e>
 8005be6:	bf00      	nop
 8005be8:	40008000 	.word	0x40008000
 8005bec:	000ffcff 	.word	0x000ffcff
 8005bf0:	0800a83a 	.word	0x0800a83a

08005bf4 <uart_stm32_configure>:
{
 8005bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8005bf8:	790b      	ldrb	r3, [r1, #4]
	const struct uart_stm32_config *config = dev->config;
 8005bfa:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 8005bfc:	6906      	ldr	r6, [r0, #16]
	switch (parity) {
 8005bfe:	2b01      	cmp	r3, #1
{
 8005c00:	460c      	mov	r4, r1
	switch (parity) {
 8005c02:	d01c      	beq.n	8005c3e <uart_stm32_configure+0x4a>
		return LL_USART_PARITY_NONE;
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	bf0c      	ite	eq
 8005c08:	f44f 6880 	moveq.w	r8, #1024	; 0x400
 8005c0c:	f04f 0800 	movne.w	r8, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8005c10:	f894 9005 	ldrb.w	r9, [r4, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8005c14:	79a7      	ldrb	r7, [r4, #6]
 8005c16:	f1b9 0f02 	cmp.w	r9, #2
 8005c1a:	bf96      	itet	ls
 8005c1c:	4a49      	ldrls	r2, [pc, #292]	; (8005d44 <uart_stm32_configure+0x150>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8005c1e:	f44f 5100 	movhi.w	r1, #8192	; 0x2000
 8005c22:	f832 1019 	ldrhls.w	r1, [r2, r9, lsl #1]
	switch (db) {
 8005c26:	2f02      	cmp	r7, #2
 8005c28:	d00c      	beq.n	8005c44 <uart_stm32_configure+0x50>
 8005c2a:	2f04      	cmp	r7, #4
 8005c2c:	f000 8084 	beq.w	8005d38 <uart_stm32_configure+0x144>
			return LL_USART_DATAWIDTH_8B;
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	bf14      	ite	ne
 8005c34:	f44f 5e80 	movne.w	lr, #4096	; 0x1000
 8005c38:	f04f 0e00 	moveq.w	lr, #0
 8005c3c:	e008      	b.n	8005c50 <uart_stm32_configure+0x5c>
	switch (parity) {
 8005c3e:	f44f 68c0 	mov.w	r8, #1536	; 0x600
 8005c42:	e7e5      	b.n	8005c10 <uart_stm32_configure+0x1c>
			return LL_USART_DATAWIDTH_8B;
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	bf0c      	ite	eq
 8005c48:	f04f 5e80 	moveq.w	lr, #268435456	; 0x10000000
 8005c4c:	f04f 0e00 	movne.w	lr, #0
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8005c50:	79e2      	ldrb	r2, [r4, #7]
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8005c52:	f1a3 0a03 	sub.w	sl, r3, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 8005c56:	2a01      	cmp	r2, #1
 8005c58:	bf14      	ite	ne
 8005c5a:	f04f 0c00 	movne.w	ip, #0
 8005c5e:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8005c62:	f1ba 0f01 	cmp.w	sl, #1
 8005c66:	d96a      	bls.n	8005d3e <uart_stm32_configure+0x14a>
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 8005c68:	b10b      	cbz	r3, 8005c6e <uart_stm32_configure+0x7a>
 8005c6a:	2f04      	cmp	r7, #4
 8005c6c:	d067      	beq.n	8005d3e <uart_stm32_configure+0x14a>
	if (IS_LPUART_INSTANCE(config->usart) &&
 8005c6e:	682b      	ldr	r3, [r5, #0]
 8005c70:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005d48 <uart_stm32_configure+0x154>
 8005c74:	4553      	cmp	r3, sl
 8005c76:	d102      	bne.n	8005c7e <uart_stm32_configure+0x8a>
 8005c78:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 8005c7c:	d05f      	beq.n	8005d3e <uart_stm32_configure+0x14a>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8005c7e:	2f01      	cmp	r7, #1
 8005c80:	d95d      	bls.n	8005d3e <uart_stm32_configure+0x14a>
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 8005c82:	2f04      	cmp	r7, #4
 8005c84:	d05b      	beq.n	8005d3e <uart_stm32_configure+0x14a>
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 8005c86:	b1c2      	cbz	r2, 8005cba <uart_stm32_configure+0xc6>
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 8005c88:	4f30      	ldr	r7, [pc, #192]	; (8005d4c <uart_stm32_configure+0x158>)
 8005c8a:	42bb      	cmp	r3, r7
 8005c8c:	d013      	beq.n	8005cb6 <uart_stm32_configure+0xc2>
 8005c8e:	f5a7 4774 	sub.w	r7, r7, #62464	; 0xf400
 8005c92:	42bb      	cmp	r3, r7
 8005c94:	d00f      	beq.n	8005cb6 <uart_stm32_configure+0xc2>
 8005c96:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8005c9a:	42bb      	cmp	r3, r7
 8005c9c:	d00b      	beq.n	8005cb6 <uart_stm32_configure+0xc2>
 8005c9e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8005ca2:	42bb      	cmp	r3, r7
 8005ca4:	d007      	beq.n	8005cb6 <uart_stm32_configure+0xc2>
 8005ca6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8005caa:	42bb      	cmp	r3, r7
 8005cac:	d003      	beq.n	8005cb6 <uart_stm32_configure+0xc2>
 8005cae:	f507 5740 	add.w	r7, r7, #12288	; 0x3000
 8005cb2:	42bb      	cmp	r3, r7
 8005cb4:	d143      	bne.n	8005d3e <uart_stm32_configure+0x14a>
 8005cb6:	2a01      	cmp	r2, #1
 8005cb8:	d141      	bne.n	8005d3e <uart_stm32_configure+0x14a>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	f022 0201 	bic.w	r2, r2, #1
 8005cc0:	601a      	str	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 8005cc8:	4590      	cmp	r8, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8005cca:	bf1f      	itttt	ne
 8005ccc:	681a      	ldrne	r2, [r3, #0]
 8005cce:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8005cd2:	ea42 0208 	orrne.w	r2, r2, r8
 8005cd6:	601a      	strne	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8005cde:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005ce0:	bf1f      	itttt	ne
 8005ce2:	685f      	ldrne	r7, [r3, #4]
 8005ce4:	f427 5740 	bicne.w	r7, r7, #12288	; 0x3000
 8005ce8:	430f      	orrne	r7, r1
 8005cea:	605f      	strne	r7, [r3, #4]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
	if (databits != uart_stm32_get_databits(dev)) {
 8005cf2:	4596      	cmp	lr, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8005cf4:	bf1f      	itttt	ne
 8005cf6:	6819      	ldrne	r1, [r3, #0]
 8005cf8:	f021 2110 	bicne.w	r1, r1, #268439552	; 0x10001000
 8005cfc:	ea41 010e 	orrne.w	r1, r1, lr
 8005d00:	6019      	strne	r1, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8005d02:	689a      	ldr	r2, [r3, #8]
	if (cfg->baudrate != data->baud_rate) {
 8005d04:	6821      	ldr	r1, [r4, #0]
 8005d06:	f402 7240 	and.w	r2, r2, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8005d0a:	4594      	cmp	ip, r2
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005d0c:	bf1f      	itttt	ne
 8005d0e:	689a      	ldrne	r2, [r3, #8]
 8005d10:	f422 7240 	bicne.w	r2, r2, #768	; 0x300
 8005d14:	ea42 020c 	orrne.w	r2, r2, ip
 8005d18:	609a      	strne	r2, [r3, #8]
	if (cfg->baudrate != data->baud_rate) {
 8005d1a:	6833      	ldr	r3, [r6, #0]
 8005d1c:	4299      	cmp	r1, r3
 8005d1e:	d003      	beq.n	8005d28 <uart_stm32_configure+0x134>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8005d20:	f7ff ff0c 	bl	8005b3c <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8005d24:	6823      	ldr	r3, [r4, #0]
 8005d26:	6033      	str	r3, [r6, #0]
	LL_USART_Enable(config->usart);
 8005d28:	682a      	ldr	r2, [r5, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8005d2a:	6813      	ldr	r3, [r2, #0]
 8005d2c:	f043 0301 	orr.w	r3, r3, #1
 8005d30:	6013      	str	r3, [r2, #0]
	return 0;
 8005d32:	2000      	movs	r0, #0
};
 8005d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (db) {
 8005d38:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
 8005d3c:	e788      	b.n	8005c50 <uart_stm32_configure+0x5c>
		return -ENOTSUP;
 8005d3e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005d42:	e7f7      	b.n	8005d34 <uart_stm32_configure+0x140>
 8005d44:	0800a834 	.word	0x0800a834
 8005d48:	40008000 	.word	0x40008000
 8005d4c:	40013800 	.word	0x40013800

08005d50 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8005d50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = dev->config;
 8005d54:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 8005d56:	6907      	ldr	r7, [r0, #16]
	data->clock = clk;
 8005d58:	4c35      	ldr	r4, [pc, #212]	; (8005e30 <uart_stm32_init+0xe0>)
 8005d5a:	607c      	str	r4, [r7, #4]
{
 8005d5c:	4606      	mov	r6, r0
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
			(clock_control_subsys_t *)&config->pclken) != 0) {
 8005d5e:	f105 0804 	add.w	r8, r5, #4
 8005d62:	4620      	mov	r0, r4
 8005d64:	f003 fe56 	bl	8009a14 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8005d68:	b920      	cbnz	r0, 8005d74 <uart_stm32_init+0x24>
		return -EIO;
 8005d6a:	f06f 0004 	mvn.w	r0, #4
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 8005d6e:	b002      	add	sp, #8
 8005d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return api->on(dev, sys);
 8005d74:	68a3      	ldr	r3, [r4, #8]
 8005d76:	4620      	mov	r0, r4
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4641      	mov	r1, r8
 8005d7c:	4798      	blx	r3
	if (clock_control_on(data->clock,
 8005d7e:	4604      	mov	r4, r0
 8005d80:	2800      	cmp	r0, #0
 8005d82:	d1f2      	bne.n	8005d6a <uart_stm32_init+0x1a>
	ret = pinctrl_lookup_state(config, id, &state);
 8005d84:	4601      	mov	r1, r0
 8005d86:	aa01      	add	r2, sp, #4
 8005d88:	69a8      	ldr	r0, [r5, #24]
 8005d8a:	f003 fabc 	bl	8009306 <pinctrl_lookup_state>
	if (ret < 0) {
 8005d8e:	2800      	cmp	r0, #0
 8005d90:	dbed      	blt.n	8005d6e <uart_stm32_init+0x1e>
	return pinctrl_apply_state_direct(config, state);
 8005d92:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8005d94:	4622      	mov	r2, r4
 8005d96:	7919      	ldrb	r1, [r3, #4]
 8005d98:	6818      	ldr	r0, [r3, #0]
 8005d9a:	f000 f947 	bl	800602c <pinctrl_configure_pins>
	if (err < 0) {
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	dbe5      	blt.n	8005d6e <uart_stm32_init+0x1e>
	LL_USART_Disable(config->usart);
 8005da2:	682b      	ldr	r3, [r5, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	f022 0201 	bic.w	r2, r2, #1
 8005daa:	601a      	str	r2, [r3, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	f042 020c 	orr.w	r2, r2, #12
 8005db2:	601a      	str	r2, [r3, #0]
	if (config->parity == 2) {
 8005db4:	692a      	ldr	r2, [r5, #16]
 8005db6:	2a02      	cmp	r2, #2
 8005db8:	d030      	beq.n	8005e1c <uart_stm32_init+0xcc>
	} else if (config->parity == 1) {
 8005dba:	2a01      	cmp	r2, #1
 8005dbc:	d033      	beq.n	8005e26 <uart_stm32_init+0xd6>
		ll_parity = LL_USART_PARITY_NONE;
 8005dbe:	4620      	mov	r0, r4
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005dc6:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8005dca:	4304      	orrs	r4, r0
 8005dcc:	4314      	orrs	r4, r2
 8005dce:	601c      	str	r4, [r3, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005dd6:	605a      	str	r2, [r3, #4]
	if (config->hw_flow_control) {
 8005dd8:	7b2b      	ldrb	r3, [r5, #12]
 8005dda:	b12b      	cbz	r3, 8005de8 <uart_stm32_init+0x98>
	LL_USART_SetHWFlowCtrl(config->usart, hwctrl);
 8005ddc:	6873      	ldr	r3, [r6, #4]
 8005dde:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005de0:	6893      	ldr	r3, [r2, #8]
 8005de2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005de6:	6093      	str	r3, [r2, #8]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8005de8:	6839      	ldr	r1, [r7, #0]
 8005dea:	4630      	mov	r0, r6
 8005dec:	f7ff fea6 	bl	8005b3c <uart_stm32_set_baudrate>
	if (config->single_wire) {
 8005df0:	7d2a      	ldrb	r2, [r5, #20]
 8005df2:	682b      	ldr	r3, [r5, #0]
 8005df4:	b11a      	cbz	r2, 8005dfe <uart_stm32_init+0xae>
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8005df6:	689a      	ldr	r2, [r3, #8]
 8005df8:	f042 0208 	orr.w	r2, r2, #8
 8005dfc:	609a      	str	r2, [r3, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	f042 0201 	orr.w	r2, r2, #1
 8005e04:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8005e06:	69da      	ldr	r2, [r3, #28]
 8005e08:	0291      	lsls	r1, r2, #10
 8005e0a:	d5fc      	bpl.n	8005e06 <uart_stm32_init+0xb6>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8005e0c:	69da      	ldr	r2, [r3, #28]
 8005e0e:	0252      	lsls	r2, r2, #9
 8005e10:	d5fc      	bpl.n	8005e0c <uart_stm32_init+0xbc>
	config->irq_config_func(dev);
 8005e12:	4630      	mov	r0, r6
 8005e14:	69eb      	ldr	r3, [r5, #28]
 8005e16:	4798      	blx	r3
	return 0;
 8005e18:	2000      	movs	r0, #0
 8005e1a:	e7a8      	b.n	8005d6e <uart_stm32_init+0x1e>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8005e1c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 8005e20:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005e24:	e7cc      	b.n	8005dc0 <uart_stm32_init+0x70>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8005e26:	f44f 5480 	mov.w	r4, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 8005e2a:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8005e2e:	e7c7      	b.n	8005dc0 <uart_stm32_init+0x70>
 8005e30:	08009e8c 	.word	0x08009e8c

08005e34 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8005e34:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8005e38:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 8005e3a:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8005e3c:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8005e3e:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8005e40:	4b09      	ldr	r3, [pc, #36]	; (8005e68 <elapsed+0x34>)
 8005e42:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8005e46:	4909      	ldr	r1, [pc, #36]	; (8005e6c <elapsed+0x38>)
 8005e48:	d101      	bne.n	8005e4e <elapsed+0x1a>
	    || (val1 < val2)) {
 8005e4a:	4282      	cmp	r2, r0
 8005e4c:	d206      	bcs.n	8005e5c <elapsed+0x28>
		overflow_cyc += last_load;
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	680c      	ldr	r4, [r1, #0]
 8005e52:	4422      	add	r2, r4
 8005e54:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8005e56:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8005e5a:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	680a      	ldr	r2, [r1, #0]
 8005e60:	4413      	add	r3, r2
}
 8005e62:	1a18      	subs	r0, r3, r0
 8005e64:	bd10      	pop	{r4, pc}
 8005e66:	bf00      	nop
 8005e68:	200010dc 	.word	0x200010dc
 8005e6c:	200010d8 	.word	0x200010d8

08005e70 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e70:	4b09      	ldr	r3, [pc, #36]	; (8005e98 <sys_clock_driver_init+0x28>)
 8005e72:	2210      	movs	r2, #16
 8005e74:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8005e78:	4b08      	ldr	r3, [pc, #32]	; (8005e9c <sys_clock_driver_init+0x2c>)
 8005e7a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8005e7e:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8005e80:	4b07      	ldr	r3, [pc, #28]	; (8005ea0 <sys_clock_driver_init+0x30>)
 8005e82:	2000      	movs	r0, #0
 8005e84:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8005e86:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005e8a:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8005e8c:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8005e8e:	691a      	ldr	r2, [r3, #16]
 8005e90:	f042 0207 	orr.w	r2, r2, #7
 8005e94:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8005e96:	4770      	bx	lr
 8005e98:	e000ed00 	.word	0xe000ed00
 8005e9c:	200010d8 	.word	0x200010d8
 8005ea0:	200010dc 	.word	0x200010dc

08005ea4 <sys_clock_isr>:
{
 8005ea4:	b508      	push	{r3, lr}
	elapsed();
 8005ea6:	f7ff ffc5 	bl	8005e34 <elapsed>
	cycle_count += overflow_cyc;
 8005eaa:	4b0c      	ldr	r3, [pc, #48]	; (8005edc <sys_clock_isr+0x38>)
 8005eac:	4a0c      	ldr	r2, [pc, #48]	; (8005ee0 <sys_clock_isr+0x3c>)
 8005eae:	6818      	ldr	r0, [r3, #0]
 8005eb0:	6811      	ldr	r1, [r2, #0]
 8005eb2:	4408      	add	r0, r1
 8005eb4:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8005eba:	4a0a      	ldr	r2, [pc, #40]	; (8005ee4 <sys_clock_isr+0x40>)
 8005ebc:	6813      	ldr	r3, [r2, #0]
 8005ebe:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8005ec2:	1ac0      	subs	r0, r0, r3
 8005ec4:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 8005ec8:	fb01 3300 	mla	r3, r1, r0, r3
 8005ecc:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8005ece:	f001 ff49 	bl	8007d64 <sys_clock_announce>
}
 8005ed2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8005ed6:	f7fe bd05 	b.w	80048e4 <z_arm_exc_exit>
 8005eda:	bf00      	nop
 8005edc:	200010dc 	.word	0x200010dc
 8005ee0:	200010d4 	.word	0x200010d4
 8005ee4:	200010d0 	.word	0x200010d0

08005ee8 <sys_clock_set_timeout>:
{
 8005ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eea:	4c31      	ldr	r4, [pc, #196]	; (8005fb0 <sys_clock_set_timeout+0xc8>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8005eec:	b159      	cbz	r1, 8005f06 <sys_clock_set_timeout+0x1e>
 8005eee:	1c42      	adds	r2, r0, #1
 8005ef0:	d109      	bne.n	8005f06 <sys_clock_set_timeout+0x1e>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8005ef2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8005ef6:	6913      	ldr	r3, [r2, #16]
 8005ef8:	f023 0301 	bic.w	r3, r3, #1
 8005efc:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8005efe:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8005f02:	6023      	str	r3, [r4, #0]
}
 8005f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8005f06:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 8005f08:	6825      	ldr	r5, [r4, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8005f0a:	d022      	beq.n	8005f52 <sys_clock_set_timeout+0x6a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8005f0c:	2801      	cmp	r0, #1
 8005f0e:	dd23      	ble.n	8005f58 <sys_clock_set_timeout+0x70>
 8005f10:	f5b0 6f03 	cmp.w	r0, #2096	; 0x830
 8005f14:	dc22      	bgt.n	8005f5c <sys_clock_set_timeout+0x74>
 8005f16:	1e47      	subs	r7, r0, #1
	__asm__ volatile(
 8005f18:	f04f 0310 	mov.w	r3, #16
 8005f1c:	f3ef 8611 	mrs	r6, BASEPRI
 8005f20:	f383 8812 	msr	BASEPRI_MAX, r3
 8005f24:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8005f28:	f7ff ff84 	bl	8005e34 <elapsed>
	cycle_count += pending;
 8005f2c:	4921      	ldr	r1, [pc, #132]	; (8005fb4 <sys_clock_set_timeout+0xcc>)
	val1 = SysTick->VAL;
 8005f2e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
 8005f32:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
 8005f34:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 8005f38:	680b      	ldr	r3, [r1, #0]
 8005f3a:	4418      	add	r0, r3
	overflow_cyc = 0U;
 8005f3c:	4b1e      	ldr	r3, [pc, #120]	; (8005fb8 <sys_clock_set_timeout+0xd0>)
	cycle_count += pending;
 8005f3e:	6008      	str	r0, [r1, #0]
	overflow_cyc = 0U;
 8005f40:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8005f42:	4b1e      	ldr	r3, [pc, #120]	; (8005fbc <sys_clock_set_timeout+0xd4>)
 8005f44:	681a      	ldr	r2, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8005f46:	1a83      	subs	r3, r0, r2
 8005f48:	d50b      	bpl.n	8005f62 <sys_clock_set_timeout+0x7a>
		delay = MAX(delay, MIN_DELAY);
 8005f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = delay;
 8005f4e:	6023      	str	r3, [r4, #0]
 8005f50:	e01a      	b.n	8005f88 <sys_clock_set_timeout+0xa0>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8005f52:	f44f 6003 	mov.w	r0, #2096	; 0x830
 8005f56:	e7de      	b.n	8005f16 <sys_clock_set_timeout+0x2e>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8005f58:	2700      	movs	r7, #0
 8005f5a:	e7dd      	b.n	8005f18 <sys_clock_set_timeout+0x30>
 8005f5c:	f44f 6703 	mov.w	r7, #2096	; 0x830
 8005f60:	e7da      	b.n	8005f18 <sys_clock_set_timeout+0x30>
		delay = ticks * CYC_PER_TICK;
 8005f62:	f44f 5efa 	mov.w	lr, #8000	; 0x1f40
		delay += unannounced;
 8005f66:	fb0e 3307 	mla	r3, lr, r7, r3
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8005f6a:	f503 53f9 	add.w	r3, r3, #7968	; 0x1f20
		delay -= unannounced;
 8005f6e:	1a12      	subs	r2, r2, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8005f70:	331f      	adds	r3, #31
 8005f72:	fbb3 f3fe 	udiv	r3, r3, lr
		delay -= unannounced;
 8005f76:	fb0e 2303 	mla	r3, lr, r3, r2
		delay = MAX(delay, MIN_DELAY);
 8005f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f7e:	d9e4      	bls.n	8005f4a <sys_clock_set_timeout+0x62>
		if (delay > MAX_CYCLES) {
 8005f80:	4a0f      	ldr	r2, [pc, #60]	; (8005fc0 <sys_clock_set_timeout+0xd8>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d9e3      	bls.n	8005f4e <sys_clock_set_timeout+0x66>
			last_load = MAX_CYCLES;
 8005f86:	6022      	str	r2, [r4, #0]
	val2 = SysTick->VAL;
 8005f88:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
	SysTick->LOAD = last_load - 1;
 8005f8c:	6824      	ldr	r4, [r4, #0]
	val2 = SysTick->VAL;
 8005f8e:	6993      	ldr	r3, [r2, #24]
	if (val1 < val2) {
 8005f90:	459c      	cmp	ip, r3
		cycle_count += (val1 + (last_load_ - val2));
 8005f92:	bf38      	it	cc
 8005f94:	44ac      	addcc	ip, r5
	SysTick->LOAD = last_load - 1;
 8005f96:	3c01      	subs	r4, #1
		cycle_count += (val1 - val2);
 8005f98:	ebac 0c03 	sub.w	ip, ip, r3
	SysTick->LOAD = last_load - 1;
 8005f9c:	6154      	str	r4, [r2, #20]
		cycle_count += (val1 - val2);
 8005f9e:	4460      	add	r0, ip
	SysTick->VAL = 0; /* resets timer to last_load */
 8005fa0:	2400      	movs	r4, #0
 8005fa2:	6194      	str	r4, [r2, #24]
		cycle_count += (val1 - val2);
 8005fa4:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
 8005fa6:	f386 8811 	msr	BASEPRI, r6
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	e7a9      	b.n	8005f04 <sys_clock_set_timeout+0x1c>
 8005fb0:	200010d8 	.word	0x200010d8
 8005fb4:	200010d4 	.word	0x200010d4
 8005fb8:	200010dc 	.word	0x200010dc
 8005fbc:	200010d0 	.word	0x200010d0
 8005fc0:	00ffdc00 	.word	0x00ffdc00

08005fc4 <sys_clock_elapsed>:
{
 8005fc4:	b510      	push	{r4, lr}
	__asm__ volatile(
 8005fc6:	f04f 0310 	mov.w	r3, #16
 8005fca:	f3ef 8411 	mrs	r4, BASEPRI
 8005fce:	f383 8812 	msr	BASEPRI_MAX, r3
 8005fd2:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8005fd6:	f7ff ff2d 	bl	8005e34 <elapsed>
 8005fda:	4b07      	ldr	r3, [pc, #28]	; (8005ff8 <sys_clock_elapsed+0x34>)
 8005fdc:	4a07      	ldr	r2, [pc, #28]	; (8005ffc <sys_clock_elapsed+0x38>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6812      	ldr	r2, [r2, #0]
 8005fe2:	1a9b      	subs	r3, r3, r2
 8005fe4:	4403      	add	r3, r0
	__asm__ volatile(
 8005fe6:	f384 8811 	msr	BASEPRI, r4
 8005fea:	f3bf 8f6f 	isb	sy
}
 8005fee:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005ff2:	fbb3 f0f0 	udiv	r0, r3, r0
 8005ff6:	bd10      	pop	{r4, pc}
 8005ff8:	200010d4 	.word	0x200010d4
 8005ffc:	200010d0 	.word	0x200010d0

08006000 <sys_clock_cycle_get_32>:
{
 8006000:	b510      	push	{r4, lr}
	__asm__ volatile(
 8006002:	f04f 0310 	mov.w	r3, #16
 8006006:	f3ef 8411 	mrs	r4, BASEPRI
 800600a:	f383 8812 	msr	BASEPRI_MAX, r3
 800600e:	f3bf 8f6f 	isb	sy
	uint32_t ret = elapsed() + cycle_count;
 8006012:	f7ff ff0f 	bl	8005e34 <elapsed>
 8006016:	4b04      	ldr	r3, [pc, #16]	; (8006028 <sys_clock_cycle_get_32+0x28>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4418      	add	r0, r3
	__asm__ volatile(
 800601c:	f384 8811 	msr	BASEPRI, r4
 8006020:	f3bf 8f6f 	isb	sy
}
 8006024:	bd10      	pop	{r4, pc}
 8006026:	bf00      	nop
 8006028:	200010d4 	.word	0x200010d4

0800602c <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 800602c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	port_device = gpio_ports[STM32_PORT(pin)];
 8006030:	4f1c      	ldr	r7, [pc, #112]	; (80060a4 <pinctrl_configure_pins+0x78>)
 8006032:	4604      	mov	r4, r0
 8006034:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	uint32_t pin, mux;
	uint32_t func = 0;
 8006038:	2500      	movs	r5, #0
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 800603a:	42b4      	cmp	r4, r6
 800603c:	d101      	bne.n	8006042 <pinctrl_configure_pins+0x16>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 800603e:	2000      	movs	r0, #0
 8006040:	e014      	b.n	800606c <pinctrl_configure_pins+0x40>
		mux = pins[i].pinmux;
 8006042:	6820      	ldr	r0, [r4, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8006044:	06c3      	lsls	r3, r0, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8006046:	f000 091f 	and.w	r9, r0, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 800604a:	d411      	bmi.n	8006070 <pinctrl_configure_pins+0x44>
			func = pins[i].pincfg | STM32_MODER_ALT_MODE;
 800604c:	6865      	ldr	r5, [r4, #4]
 800604e:	f045 0520 	orr.w	r5, r5, #32
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8006052:	f3c0 1a47 	ubfx	sl, r0, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 8006056:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800605a:	280a      	cmp	r0, #10
 800605c:	d81e      	bhi.n	800609c <pinctrl_configure_pins+0x70>
	port_device = gpio_ports[STM32_PORT(pin)];
 800605e:	f857 8020 	ldr.w	r8, [r7, r0, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8006062:	f1b8 0f00 	cmp.w	r8, #0
 8006066:	d108      	bne.n	800607a <pinctrl_configure_pins+0x4e>
		return -ENODEV;
 8006068:	f06f 0012 	mvn.w	r0, #18
}
 800606c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			func = STM32_MODER_ANALOG_MODE;
 8006070:	f1b9 0f10 	cmp.w	r9, #16
 8006074:	bf08      	it	eq
 8006076:	2530      	moveq	r5, #48	; 0x30
 8006078:	e7eb      	b.n	8006052 <pinctrl_configure_pins+0x26>
 800607a:	4640      	mov	r0, r8
 800607c:	f003 fcca 	bl	8009a14 <z_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8006080:	2800      	cmp	r0, #0
 8006082:	d0f1      	beq.n	8006068 <pinctrl_configure_pins+0x3c>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 8006084:	464b      	mov	r3, r9
 8006086:	462a      	mov	r2, r5
 8006088:	f00a 010f 	and.w	r1, sl, #15
 800608c:	4640      	mov	r0, r8
 800608e:	f002 fdff 	bl	8008c90 <gpio_stm32_configure>
		if (ret < 0) {
 8006092:	2800      	cmp	r0, #0
 8006094:	f104 0408 	add.w	r4, r4, #8
 8006098:	dacf      	bge.n	800603a <pinctrl_configure_pins+0xe>
 800609a:	e7e7      	b.n	800606c <pinctrl_configure_pins+0x40>
		return -EINVAL;
 800609c:	f06f 0015 	mvn.w	r0, #21
 80060a0:	e7e4      	b.n	800606c <pinctrl_configure_pins+0x40>
 80060a2:	bf00      	nop
 80060a4:	0800a7f0 	.word	0x0800a7f0

080060a8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80060a8:	4b01      	ldr	r3, [pc, #4]	; (80060b0 <HAL_RCC_GetHCLKFreq+0x8>)
 80060aa:	6818      	ldr	r0, [r3, #0]
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	20000168 	.word	0x20000168

080060b4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80060b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060b8:	6805      	ldr	r5, [r0, #0]
{
 80060ba:	b085      	sub	sp, #20
 80060bc:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80060be:	4628      	mov	r0, r5
 80060c0:	f003 fc83 	bl	80099ca <USB_GetMode>
 80060c4:	9000      	str	r0, [sp, #0]
 80060c6:	2800      	cmp	r0, #0
 80060c8:	f040 813d 	bne.w	8006346 <HAL_PCD_IRQHandler+0x292>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80060cc:	6820      	ldr	r0, [r4, #0]
 80060ce:	f003 fc4d 	bl	800996c <USB_ReadInterrupts>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	f000 8137 	beq.w	8006346 <HAL_PCD_IRQHandler+0x292>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80060d8:	6820      	ldr	r0, [r4, #0]
 80060da:	f003 fc47 	bl	800996c <USB_ReadInterrupts>
 80060de:	0786      	lsls	r6, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80060e0:	bf48      	it	mi
 80060e2:	6822      	ldrmi	r2, [r4, #0]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80060e4:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80060e6:	bf42      	ittt	mi
 80060e8:	6953      	ldrmi	r3, [r2, #20]
 80060ea:	f003 0302 	andmi.w	r3, r3, #2
 80060ee:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80060f0:	f003 fc3c 	bl	800996c <USB_ReadInterrupts>
 80060f4:	06c0      	lsls	r0, r0, #27
 80060f6:	d52a      	bpl.n	800614e <HAL_PCD_IRQHandler+0x9a>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80060f8:	6822      	ldr	r2, [r4, #0]
 80060fa:	6993      	ldr	r3, [r2, #24]
 80060fc:	f023 0310 	bic.w	r3, r3, #16
 8006100:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8006102:	6a2f      	ldr	r7, [r5, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006104:	f3c7 4343 	ubfx	r3, r7, #17, #4
 8006108:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800610a:	f007 060f 	and.w	r6, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800610e:	f040 811d 	bne.w	800634c <HAL_PCD_IRQHandler+0x298>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006112:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006116:	421f      	tst	r7, r3
 8006118:	d014      	beq.n	8006144 <HAL_PCD_IRQHandler+0x90>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800611a:	231c      	movs	r3, #28
 800611c:	fb03 4606 	mla	r6, r3, r6, r4
 8006120:	f3c7 180a 	ubfx	r8, r7, #4, #11
 8006124:	4642      	mov	r2, r8
 8006126:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 800612a:	4628      	mov	r0, r5
 800612c:	f003 fb90 	bl	8009850 <USB_ReadPacket>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006130:	f8d6 2208 	ldr.w	r2, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006134:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006138:	4442      	add	r2, r8
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800613a:	4443      	add	r3, r8
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800613c:	f8c6 2208 	str.w	r2, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006140:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006144:	6822      	ldr	r2, [r4, #0]
 8006146:	6993      	ldr	r3, [r2, #24]
 8006148:	f043 0310 	orr.w	r3, r3, #16
 800614c:	6193      	str	r3, [r2, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800614e:	6820      	ldr	r0, [r4, #0]
 8006150:	f003 fc0c 	bl	800996c <USB_ReadInterrupts>
 8006154:	0301      	lsls	r1, r0, #12
 8006156:	f100 810d 	bmi.w	8006374 <HAL_PCD_IRQHandler+0x2c0>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800615a:	6820      	ldr	r0, [r4, #0]
 800615c:	f003 fc06 	bl	800996c <USB_ReadInterrupts>
 8006160:	0342      	lsls	r2, r0, #13
 8006162:	d50c      	bpl.n	800617e <HAL_PCD_IRQHandler+0xca>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006164:	6820      	ldr	r0, [r4, #0]
 8006166:	f003 fc0d 	bl	8009984 <USB_ReadDevAllInEpInterrupt>
 800616a:	4626      	mov	r6, r4
 800616c:	4681      	mov	r9, r0

      epnum = 0U;

      while (ep_intr != 0U)
 800616e:	f505 6810 	add.w	r8, r5, #2304	; 0x900
      epnum = 0U;
 8006172:	f04f 0a00 	mov.w	sl, #0
      while (ep_intr != 0U)
 8006176:	f1b9 0f00 	cmp.w	r9, #0
 800617a:	f040 815d 	bne.w	8006438 <HAL_PCD_IRQHandler+0x384>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800617e:	6820      	ldr	r0, [r4, #0]
 8006180:	f003 fbf4 	bl	800996c <USB_ReadInterrupts>
 8006184:	2800      	cmp	r0, #0
 8006186:	da15      	bge.n	80061b4 <HAL_PCD_IRQHandler+0x100>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006188:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 800618c:	f023 0301 	bic.w	r3, r3, #1
 8006190:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 8006194:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8006198:	2b01      	cmp	r3, #1
 800619a:	f040 81cb 	bne.w	8006534 <HAL_PCD_IRQHandler+0x480>
      {
        hpcd->LPM_State = LPM_L0;
 800619e:	2100      	movs	r1, #0
 80061a0:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80061a4:	4620      	mov	r0, r4
 80061a6:	f003 fad1 	bl	800974c <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80061aa:	6822      	ldr	r2, [r4, #0]
 80061ac:	6953      	ldr	r3, [r2, #20]
 80061ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061b2:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80061b4:	6820      	ldr	r0, [r4, #0]
 80061b6:	f003 fbd9 	bl	800996c <USB_ReadInterrupts>
 80061ba:	0500      	lsls	r0, r0, #20
 80061bc:	d50b      	bpl.n	80061d6 <HAL_PCD_IRQHandler+0x122>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80061be:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 80061c2:	07d9      	lsls	r1, r3, #31
 80061c4:	d502      	bpl.n	80061cc <HAL_PCD_IRQHandler+0x118>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80061c6:	4620      	mov	r0, r4
 80061c8:	f7ff f8ac 	bl	8005324 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80061cc:	6822      	ldr	r2, [r4, #0]
 80061ce:	6953      	ldr	r3, [r2, #20]
 80061d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061d4:	6153      	str	r3, [r2, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80061d6:	6820      	ldr	r0, [r4, #0]
 80061d8:	f003 fbc8 	bl	800996c <USB_ReadInterrupts>
 80061dc:	0102      	lsls	r2, r0, #4
 80061de:	d514      	bpl.n	800620a <HAL_PCD_IRQHandler+0x156>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	695a      	ldr	r2, [r3, #20]
 80061e4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80061e8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80061ea:	f894 23f4 	ldrb.w	r2, [r4, #1012]	; 0x3f4
 80061ee:	2a00      	cmp	r2, #0
 80061f0:	f040 81a4 	bne.w	800653c <HAL_PCD_IRQHandler+0x488>
      {
        hpcd->LPM_State = LPM_L1;
 80061f4:	2101      	movs	r1, #1
 80061f6:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80061fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fc:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8006200:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006204:	4620      	mov	r0, r4
 8006206:	f003 faa1 	bl	800974c <HAL_PCDEx_LPM_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800620a:	6820      	ldr	r0, [r4, #0]
 800620c:	f003 fbae 	bl	800996c <USB_ReadInterrupts>
 8006210:	04c3      	lsls	r3, r0, #19
 8006212:	d536      	bpl.n	8006282 <HAL_PCD_IRQHandler+0x1ce>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006214:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006218:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800621a:	f023 0301 	bic.w	r3, r3, #1
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800621e:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006220:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006224:	f000 fa58 	bl	80066d8 <USB_FlushTxFifo>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006228:	f505 6600 	add.w	r6, r5, #2048	; 0x800
 800622c:	f505 6310 	add.w	r3, r5, #2304	; 0x900

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006230:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006234:	6862      	ldr	r2, [r4, #4]
 8006236:	9800      	ldr	r0, [sp, #0]
 8006238:	4282      	cmp	r2, r0
 800623a:	f200 8183 	bhi.w	8006544 <HAL_PCD_IRQHandler+0x490>
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800623e:	69f3      	ldr	r3, [r6, #28]
 8006240:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006244:	61f3      	str	r3, [r6, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006246:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 8197 	beq.w	800657c <HAL_PCD_IRQHandler+0x4c8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800624e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8006252:	f043 030b 	orr.w	r3, r3, #11
 8006256:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800625a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800625c:	f043 030b 	orr.w	r3, r3, #11
 8006260:	6473      	str	r3, [r6, #68]	; 0x44
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006262:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006266:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006268:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800626c:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006270:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8006274:	f000 fc66 	bl	8006b44 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006278:	6822      	ldr	r2, [r4, #0]
 800627a:	6953      	ldr	r3, [r2, #20]
 800627c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006280:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006282:	6820      	ldr	r0, [r4, #0]
 8006284:	f003 fb72 	bl	800996c <USB_ReadInterrupts>
 8006288:	0487      	lsls	r7, r0, #18
 800628a:	d516      	bpl.n	80062ba <HAL_PCD_IRQHandler+0x206>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800628c:	6820      	ldr	r0, [r4, #0]
 800628e:	f003 fba0 	bl	80099d2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006292:	6820      	ldr	r0, [r4, #0]
 8006294:	f003 fa85 	bl	80097a2 <USB_GetDevSpeed>
 8006298:	60e0      	str	r0, [r4, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800629a:	6825      	ldr	r5, [r4, #0]
 800629c:	f7ff ff04 	bl	80060a8 <HAL_RCC_GetHCLKFreq>
 80062a0:	7b22      	ldrb	r2, [r4, #12]
 80062a2:	4601      	mov	r1, r0
 80062a4:	4628      	mov	r0, r5
 80062a6:	f000 f9a7 	bl	80065f8 <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80062aa:	4620      	mov	r0, r4
 80062ac:	f7ff f804 	bl	80052b8 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80062b0:	6822      	ldr	r2, [r4, #0]
 80062b2:	6953      	ldr	r3, [r2, #20]
 80062b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062b8:	6153      	str	r3, [r2, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80062ba:	6820      	ldr	r0, [r4, #0]
 80062bc:	f003 fb56 	bl	800996c <USB_ReadInterrupts>
 80062c0:	0706      	lsls	r6, r0, #28
 80062c2:	d507      	bpl.n	80062d4 <HAL_PCD_IRQHandler+0x220>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80062c4:	4620      	mov	r0, r4
 80062c6:	f003 f8de 	bl	8009486 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80062ca:	6822      	ldr	r2, [r4, #0]
 80062cc:	6953      	ldr	r3, [r2, #20]
 80062ce:	f003 0308 	and.w	r3, r3, #8
 80062d2:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80062d4:	6820      	ldr	r0, [r4, #0]
 80062d6:	f003 fb49 	bl	800996c <USB_ReadInterrupts>
 80062da:	02c5      	lsls	r5, r0, #11
 80062dc:	d508      	bpl.n	80062f0 <HAL_PCD_IRQHandler+0x23c>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80062de:	2100      	movs	r1, #0
 80062e0:	4620      	mov	r0, r4
 80062e2:	f003 f8d2 	bl	800948a <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80062e6:	6822      	ldr	r2, [r4, #0]
 80062e8:	6953      	ldr	r3, [r2, #20]
 80062ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062ee:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80062f0:	6820      	ldr	r0, [r4, #0]
 80062f2:	f003 fb3b 	bl	800996c <USB_ReadInterrupts>
 80062f6:	0280      	lsls	r0, r0, #10
 80062f8:	d508      	bpl.n	800630c <HAL_PCD_IRQHandler+0x258>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80062fa:	2100      	movs	r1, #0
 80062fc:	4620      	mov	r0, r4
 80062fe:	f003 f8c3 	bl	8009488 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006302:	6822      	ldr	r2, [r4, #0]
 8006304:	6953      	ldr	r3, [r2, #20]
 8006306:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800630a:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800630c:	6820      	ldr	r0, [r4, #0]
 800630e:	f003 fb2d 	bl	800996c <USB_ReadInterrupts>
 8006312:	0041      	lsls	r1, r0, #1
 8006314:	d507      	bpl.n	8006326 <HAL_PCD_IRQHandler+0x272>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006316:	4620      	mov	r0, r4
 8006318:	f7fe fff0 	bl	80052fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800631c:	6822      	ldr	r2, [r4, #0]
 800631e:	6953      	ldr	r3, [r2, #20]
 8006320:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006324:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006326:	6820      	ldr	r0, [r4, #0]
 8006328:	f003 fb20 	bl	800996c <USB_ReadInterrupts>
 800632c:	0742      	lsls	r2, r0, #29
 800632e:	d50a      	bpl.n	8006346 <HAL_PCD_IRQHandler+0x292>
    {
      temp = hpcd->Instance->GOTGINT;
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006334:	076b      	lsls	r3, r5, #29
 8006336:	d502      	bpl.n	800633e <HAL_PCD_IRQHandler+0x28a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006338:	4620      	mov	r0, r4
 800633a:	f7fe ffe9 	bl	8005310 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800633e:	6822      	ldr	r2, [r4, #0]
 8006340:	6853      	ldr	r3, [r2, #4]
 8006342:	432b      	orrs	r3, r5
 8006344:	6053      	str	r3, [r2, #4]
    }
  }
}
 8006346:	b005      	add	sp, #20
 8006348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800634c:	2b06      	cmp	r3, #6
 800634e:	f47f aef9 	bne.w	8006144 <HAL_PCD_IRQHandler+0x90>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006352:	2208      	movs	r2, #8
 8006354:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8006358:	4628      	mov	r0, r5
 800635a:	f003 fa79 	bl	8009850 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800635e:	231c      	movs	r3, #28
 8006360:	fb03 4606 	mla	r6, r3, r6, r4
 8006364:	f3c7 170a 	ubfx	r7, r7, #4, #11
 8006368:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 800636c:	441f      	add	r7, r3
 800636e:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
 8006372:	e6e7      	b.n	8006144 <HAL_PCD_IRQHandler+0x90>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006374:	6820      	ldr	r0, [r4, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006376:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8006594 <HAL_PCD_IRQHandler+0x4e0>
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800637a:	f8df a21c 	ldr.w	sl, [pc, #540]	; 8006598 <HAL_PCD_IRQHandler+0x4e4>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800637e:	f003 faf9 	bl	8009974 <USB_ReadDevAllOutEpInterrupt>
 8006382:	f505 6b30 	add.w	fp, r5, #2816	; 0xb00
 8006386:	4606      	mov	r6, r0
      epnum = 0U;
 8006388:	2700      	movs	r7, #0
      while (ep_intr != 0U)
 800638a:	2e00      	cmp	r6, #0
 800638c:	f43f aee5 	beq.w	800615a <HAL_PCD_IRQHandler+0xa6>
        if ((ep_intr & 0x1U) != 0U)
 8006390:	07f3      	lsls	r3, r6, #31
 8006392:	d544      	bpl.n	800641e <HAL_PCD_IRQHandler+0x36a>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006394:	b2f9      	uxtb	r1, r7
 8006396:	6820      	ldr	r0, [r4, #0]
 8006398:	9101      	str	r1, [sp, #4]
 800639a:	f003 fafb 	bl	8009994 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800639e:	f010 0f01 	tst.w	r0, #1
 80063a2:	9901      	ldr	r1, [sp, #4]
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80063a4:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80063a6:	d010      	beq.n	80063ca <HAL_PCD_IRQHandler+0x316>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80063a8:	2201      	movs	r2, #1
 80063aa:	f8cb 2008 	str.w	r2, [fp, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063ae:	6822      	ldr	r2, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80063b0:	6c10      	ldr	r0, [r2, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80063b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063b6:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80063ba:	4550      	cmp	r0, sl
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80063bc:	6893      	ldr	r3, [r2, #8]
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80063be:	d137      	bne.n	8006430 <HAL_PCD_IRQHandler+0x37c>
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80063c0:	0418      	lsls	r0, r3, #16
 80063c2:	d531      	bpl.n	8006428 <HAL_PCD_IRQHandler+0x374>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063c8:	6091      	str	r1, [r2, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80063ca:	f018 0f08 	tst.w	r8, #8
 80063ce:	d013      	beq.n	80063f8 <HAL_PCD_IRQHandler+0x344>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063d0:	6822      	ldr	r2, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80063d2:	2108      	movs	r1, #8
 80063d4:	f8cb 1008 	str.w	r1, [fp, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80063d8:	6c11      	ldr	r1, [r2, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80063da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063de:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063e2:	4549      	cmp	r1, r9
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80063e4:	6890      	ldr	r0, [r2, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063e6:	d904      	bls.n	80063f2 <HAL_PCD_IRQHandler+0x33e>
 80063e8:	0401      	lsls	r1, r0, #16
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063ea:	bf44      	itt	mi
 80063ec:	f44f 4100 	movmi.w	r1, #32768	; 0x8000
 80063f0:	6091      	strmi	r1, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80063f2:	4620      	mov	r0, r4
 80063f4:	f7fe ffaa 	bl	800534c <HAL_PCD_SetupStageCallback>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80063f8:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80063fc:	bf1c      	itt	ne
 80063fe:	2210      	movne	r2, #16
 8006400:	f8cb 2008 	strne.w	r2, [fp, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006404:	f018 0f20 	tst.w	r8, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006408:	bf1c      	itt	ne
 800640a:	2220      	movne	r2, #32
 800640c:	f8cb 2008 	strne.w	r2, [fp, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006410:	f418 5f00 	tst.w	r8, #8192	; 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006414:	bf1c      	itt	ne
 8006416:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 800641a:	f8cb 3008 	strne.w	r3, [fp, #8]
        epnum++;
 800641e:	3701      	adds	r7, #1
        ep_intr >>= 1U;
 8006420:	0876      	lsrs	r6, r6, #1
 8006422:	f10b 0b20 	add.w	fp, fp, #32
 8006426:	e7b0      	b.n	800638a <HAL_PCD_IRQHandler+0x2d6>
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006428:	0698      	lsls	r0, r3, #26
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800642a:	bf44      	itt	mi
 800642c:	2020      	movmi	r0, #32
 800642e:	6090      	strmi	r0, [r2, #8]
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006430:	4620      	mov	r0, r4
 8006432:	f002 faeb 	bl	8008a0c <HAL_PCD_DataOutStageCallback>
 8006436:	e7c8      	b.n	80063ca <HAL_PCD_IRQHandler+0x316>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006438:	f019 0f01 	tst.w	r9, #1
 800643c:	d072      	beq.n	8006524 <HAL_PCD_IRQHandler+0x470>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800643e:	fa5f fb8a 	uxtb.w	fp, sl
 8006442:	6820      	ldr	r0, [r4, #0]
 8006444:	4659      	mov	r1, fp
 8006446:	f003 faae 	bl	80099a6 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800644a:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800644c:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800644e:	d510      	bpl.n	8006472 <HAL_PCD_IRQHandler+0x3be>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006450:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006454:	2201      	movs	r2, #1
 8006456:	f00a 010f 	and.w	r1, sl, #15
 800645a:	fa02 f101 	lsl.w	r1, r2, r1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800645e:	ea23 0301 	bic.w	r3, r3, r1
 8006462:	f8c5 3834 	str.w	r3, [r5, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006466:	4659      	mov	r1, fp
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006468:	f8c8 2008 	str.w	r2, [r8, #8]
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800646c:	4620      	mov	r0, r4
 800646e:	f002 fae3 	bl	8008a38 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006472:	0738      	lsls	r0, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006474:	bf44      	itt	mi
 8006476:	2308      	movmi	r3, #8
 8006478:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800647c:	06f9      	lsls	r1, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800647e:	bf44      	itt	mi
 8006480:	2310      	movmi	r3, #16
 8006482:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006486:	067a      	lsls	r2, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006488:	bf44      	itt	mi
 800648a:	2340      	movmi	r3, #64	; 0x40
 800648c:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006490:	07bb      	lsls	r3, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006492:	bf44      	itt	mi
 8006494:	2302      	movmi	r3, #2
 8006496:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800649a:	063f      	lsls	r7, r7, #24
 800649c:	d542      	bpl.n	8006524 <HAL_PCD_IRQHandler+0x470>
  if (ep->xfer_count > ep->xfer_len)
 800649e:	e9d6 3114 	ldrd	r3, r1, [r6, #80]	; 0x50
 80064a2:	4299      	cmp	r1, r3
 80064a4:	d83e      	bhi.n	8006524 <HAL_PCD_IRQHandler+0x470>
  len = ep->xfer_len - ep->xfer_count;
 80064a6:	1a5b      	subs	r3, r3, r1
  len32b = (len + 3U) / 4U;
 80064a8:	6c71      	ldr	r1, [r6, #68]	; 0x44
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064aa:	6822      	ldr	r2, [r4, #0]
 80064ac:	9201      	str	r2, [sp, #4]
  len32b = (len + 3U) / 4U;
 80064ae:	428b      	cmp	r3, r1
 80064b0:	bf28      	it	cs
 80064b2:	460b      	movcs	r3, r1
 80064b4:	3303      	adds	r3, #3
 80064b6:	089b      	lsrs	r3, r3, #2
 80064b8:	9302      	str	r3, [sp, #8]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80064ba:	f502 6310 	add.w	r3, r2, #2304	; 0x900
 80064be:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 80064c2:	9303      	str	r3, [sp, #12]
 80064c4:	9b03      	ldr	r3, [sp, #12]
 80064c6:	9a02      	ldr	r2, [sp, #8]
 80064c8:	6999      	ldr	r1, [r3, #24]
 80064ca:	b289      	uxth	r1, r1
 80064cc:	4291      	cmp	r1, r2
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80064ce:	e9d6 7314 	ldrd	r7, r3, [r6, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80064d2:	d325      	bcc.n	8006520 <HAL_PCD_IRQHandler+0x46c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80064d4:	429f      	cmp	r7, r3
 80064d6:	d80e      	bhi.n	80064f6 <HAL_PCD_IRQHandler+0x442>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80064d8:	9b01      	ldr	r3, [sp, #4]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80064da:	f00a 020f 	and.w	r2, sl, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80064de:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80064e2:	2101      	movs	r1, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80064e4:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80064e8:	fa01 f202 	lsl.w	r2, r1, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80064ec:	ea23 0302 	bic.w	r3, r3, r2
 80064f0:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 80064f4:	e016      	b.n	8006524 <HAL_PCD_IRQHandler+0x470>
    len = ep->xfer_len - ep->xfer_count;
 80064f6:	1aff      	subs	r7, r7, r3
    if (len > ep->maxpacket)
 80064f8:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80064fa:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 80064fc:	9801      	ldr	r0, [sp, #4]
 80064fe:	429f      	cmp	r7, r3
 8006500:	bf28      	it	cs
 8006502:	461f      	movcs	r7, r3
    len32b = (len + 3U) / 4U;
 8006504:	1cfb      	adds	r3, r7, #3
 8006506:	089b      	lsrs	r3, r3, #2
 8006508:	9302      	str	r3, [sp, #8]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800650a:	465a      	mov	r2, fp
 800650c:	b2bb      	uxth	r3, r7
 800650e:	f003 f990 	bl	8009832 <USB_WritePacket>
    ep->xfer_buff  += len;
 8006512:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8006514:	443b      	add	r3, r7
 8006516:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 8006518:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800651a:	443b      	add	r3, r7
 800651c:	6573      	str	r3, [r6, #84]	; 0x54
 800651e:	e7d1      	b.n	80064c4 <HAL_PCD_IRQHandler+0x410>
  if (ep->xfer_len <= ep->xfer_count)
 8006520:	429f      	cmp	r7, r3
 8006522:	d9d9      	bls.n	80064d8 <HAL_PCD_IRQHandler+0x424>
        epnum++;
 8006524:	f10a 0a01 	add.w	sl, sl, #1
        ep_intr >>= 1U;
 8006528:	ea4f 0959 	mov.w	r9, r9, lsr #1
 800652c:	361c      	adds	r6, #28
 800652e:	f108 0820 	add.w	r8, r8, #32
 8006532:	e620      	b.n	8006176 <HAL_PCD_IRQHandler+0xc2>
        HAL_PCD_ResumeCallback(hpcd);
 8006534:	4620      	mov	r0, r4
 8006536:	f7fe feff 	bl	8005338 <HAL_PCD_ResumeCallback>
 800653a:	e636      	b.n	80061aa <HAL_PCD_IRQHandler+0xf6>
        HAL_PCD_SuspendCallback(hpcd);
 800653c:	4620      	mov	r0, r4
 800653e:	f7fe fef1 	bl	8005324 <HAL_PCD_SuspendCallback>
 8006542:	e662      	b.n	800620a <HAL_PCD_IRQHandler+0x156>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006544:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800654c:	601a      	str	r2, [r3, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8006554:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006556:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800655a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800655e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8006562:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006566:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800656a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800656e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006572:	9a00      	ldr	r2, [sp, #0]
 8006574:	3201      	adds	r2, #1
 8006576:	9200      	str	r2, [sp, #0]
 8006578:	3320      	adds	r3, #32
 800657a:	e65b      	b.n	8006234 <HAL_PCD_IRQHandler+0x180>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800657c:	6973      	ldr	r3, [r6, #20]
 800657e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006582:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006586:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006588:	6933      	ldr	r3, [r6, #16]
 800658a:	f043 030b 	orr.w	r3, r3, #11
 800658e:	6133      	str	r3, [r6, #16]
 8006590:	e667      	b.n	8006262 <HAL_PCD_IRQHandler+0x1ae>
 8006592:	bf00      	nop
 8006594:	4f54300a 	.word	0x4f54300a
 8006598:	4f54310a 	.word	0x4f54310a

0800659c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800659c:	b084      	sub	sp, #16
 800659e:	b510      	push	{r4, lr}
 80065a0:	4604      	mov	r4, r0
 80065a2:	a803      	add	r0, sp, #12
 80065a4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065a8:	68e3      	ldr	r3, [r4, #12]
 80065aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065ae:	60e3      	str	r3, [r4, #12]
 80065b0:	4b10      	ldr	r3, [pc, #64]	; (80065f4 <USB_CoreInit+0x58>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80065b2:	3b01      	subs	r3, #1
 80065b4:	d017      	beq.n	80065e6 <USB_CoreInit+0x4a>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065b6:	6922      	ldr	r2, [r4, #16]
 80065b8:	2a00      	cmp	r2, #0
 80065ba:	dafa      	bge.n	80065b2 <USB_CoreInit+0x16>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065bc:	6923      	ldr	r3, [r4, #16]
 80065be:	f043 0301 	orr.w	r3, r3, #1
 80065c2:	6123      	str	r3, [r4, #16]
 80065c4:	4b0b      	ldr	r3, [pc, #44]	; (80065f4 <USB_CoreInit+0x58>)

  do
  {
    if (++count > 200000U)
 80065c6:	3b01      	subs	r3, #1
 80065c8:	d00d      	beq.n	80065e6 <USB_CoreInit+0x4a>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065ca:	6920      	ldr	r0, [r4, #16]
 80065cc:	f010 0001 	ands.w	r0, r0, #1
 80065d0:	d1f9      	bne.n	80065c6 <USB_CoreInit+0x2a>
  if (cfg.battery_charging_enable == 0U)
 80065d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065d4:	b94b      	cbnz	r3, 80065ea <USB_CoreInit+0x4e>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80065d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80065d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065dc:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80065de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065e2:	b004      	add	sp, #16
 80065e4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80065e6:	2003      	movs	r0, #3
 80065e8:	e7f3      	b.n	80065d2 <USB_CoreInit+0x36>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80065ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065f0:	e7f4      	b.n	80065dc <USB_CoreInit+0x40>
 80065f2:	bf00      	nop
 80065f4:	00030d41 	.word	0x00030d41

080065f8 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80065f8:	2a02      	cmp	r2, #2
 80065fa:	d14a      	bne.n	8006692 <USB_SetTurnaroundTime+0x9a>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80065fc:	4b27      	ldr	r3, [pc, #156]	; (800669c <USB_SetTurnaroundTime+0xa4>)
 80065fe:	4a28      	ldr	r2, [pc, #160]	; (80066a0 <USB_SetTurnaroundTime+0xa8>)
 8006600:	440b      	add	r3, r1
 8006602:	4293      	cmp	r3, r2
 8006604:	d939      	bls.n	800667a <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006606:	4b27      	ldr	r3, [pc, #156]	; (80066a4 <USB_SetTurnaroundTime+0xac>)
 8006608:	4a27      	ldr	r2, [pc, #156]	; (80066a8 <USB_SetTurnaroundTime+0xb0>)
 800660a:	440b      	add	r3, r1
 800660c:	4293      	cmp	r3, r2
 800660e:	d936      	bls.n	800667e <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006610:	4a26      	ldr	r2, [pc, #152]	; (80066ac <USB_SetTurnaroundTime+0xb4>)
 8006612:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8006616:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 800661a:	4293      	cmp	r3, r2
 800661c:	d931      	bls.n	8006682 <USB_SetTurnaroundTime+0x8a>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800661e:	4a24      	ldr	r2, [pc, #144]	; (80066b0 <USB_SetTurnaroundTime+0xb8>)
 8006620:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8006624:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8006628:	4293      	cmp	r3, r2
 800662a:	d32c      	bcc.n	8006686 <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800662c:	4b21      	ldr	r3, [pc, #132]	; (80066b4 <USB_SetTurnaroundTime+0xbc>)
 800662e:	4a22      	ldr	r2, [pc, #136]	; (80066b8 <USB_SetTurnaroundTime+0xc0>)
 8006630:	440b      	add	r3, r1
 8006632:	4293      	cmp	r3, r2
 8006634:	d929      	bls.n	800668a <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006636:	4b21      	ldr	r3, [pc, #132]	; (80066bc <USB_SetTurnaroundTime+0xc4>)
 8006638:	4a21      	ldr	r2, [pc, #132]	; (80066c0 <USB_SetTurnaroundTime+0xc8>)
 800663a:	440b      	add	r3, r1
 800663c:	4293      	cmp	r3, r2
 800663e:	d326      	bcc.n	800668e <USB_SetTurnaroundTime+0x96>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006640:	4b20      	ldr	r3, [pc, #128]	; (80066c4 <USB_SetTurnaroundTime+0xcc>)
 8006642:	4a21      	ldr	r2, [pc, #132]	; (80066c8 <USB_SetTurnaroundTime+0xd0>)
 8006644:	440b      	add	r3, r1
 8006646:	4293      	cmp	r3, r2
 8006648:	d323      	bcc.n	8006692 <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800664a:	4a20      	ldr	r2, [pc, #128]	; (80066cc <USB_SetTurnaroundTime+0xd4>)
 800664c:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8006650:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8006654:	4293      	cmp	r3, r2
 8006656:	d31e      	bcc.n	8006696 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006658:	4b1d      	ldr	r3, [pc, #116]	; (80066d0 <USB_SetTurnaroundTime+0xd8>)
      UsbTrd = 0x6U;
 800665a:	4a1e      	ldr	r2, [pc, #120]	; (80066d4 <USB_SetTurnaroundTime+0xdc>)
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800665c:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 800665e:	4293      	cmp	r3, r2
 8006660:	bf34      	ite	cc
 8006662:	2307      	movcc	r3, #7
 8006664:	2306      	movcs	r3, #6
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006666:	68c2      	ldr	r2, [r0, #12]
 8006668:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800666c:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800666e:	68c2      	ldr	r2, [r0, #12]
 8006670:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 8006674:	60c3      	str	r3, [r0, #12]
}
 8006676:	2000      	movs	r0, #0
 8006678:	4770      	bx	lr
      UsbTrd = 0xFU;
 800667a:	230f      	movs	r3, #15
 800667c:	e7f3      	b.n	8006666 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xEU;
 800667e:	230e      	movs	r3, #14
 8006680:	e7f1      	b.n	8006666 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xDU;
 8006682:	230d      	movs	r3, #13
 8006684:	e7ef      	b.n	8006666 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xCU;
 8006686:	230c      	movs	r3, #12
 8006688:	e7ed      	b.n	8006666 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xBU;
 800668a:	230b      	movs	r3, #11
 800668c:	e7eb      	b.n	8006666 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xAU;
 800668e:	230a      	movs	r3, #10
 8006690:	e7e9      	b.n	8006666 <USB_SetTurnaroundTime+0x6e>
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006692:	2309      	movs	r3, #9
 8006694:	e7e7      	b.n	8006666 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0x8U;
 8006696:	2308      	movs	r3, #8
 8006698:	e7e5      	b.n	8006666 <USB_SetTurnaroundTime+0x6e>
 800669a:	bf00      	nop
 800669c:	ff275340 	.word	0xff275340
 80066a0:	000c34ff 	.word	0x000c34ff
 80066a4:	ff1b1e40 	.word	0xff1b1e40
 80066a8:	000f423f 	.word	0x000f423f
 80066ac:	00124f7f 	.word	0x00124f7f
 80066b0:	0013d620 	.word	0x0013d620
 80066b4:	fee5b660 	.word	0xfee5b660
 80066b8:	0016e35f 	.word	0x0016e35f
 80066bc:	feced300 	.word	0xfeced300
 80066c0:	001b7740 	.word	0x001b7740
 80066c4:	feb35bc0 	.word	0xfeb35bc0
 80066c8:	002191c0 	.word	0x002191c0
 80066cc:	00387520 	.word	0x00387520
 80066d0:	fe5954e0 	.word	0xfe5954e0
 80066d4:	00419ce0 	.word	0x00419ce0

080066d8 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066d8:	0189      	lsls	r1, r1, #6
 80066da:	f041 0120 	orr.w	r1, r1, #32
 80066de:	6101      	str	r1, [r0, #16]
 80066e0:	4905      	ldr	r1, [pc, #20]	; (80066f8 <USB_FlushTxFifo+0x20>)
{
 80066e2:	4602      	mov	r2, r0
    if (++count > 200000U)
 80066e4:	3901      	subs	r1, #1
 80066e6:	d004      	beq.n	80066f2 <USB_FlushTxFifo+0x1a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066e8:	6910      	ldr	r0, [r2, #16]
 80066ea:	f010 0020 	ands.w	r0, r0, #32
 80066ee:	d1f9      	bne.n	80066e4 <USB_FlushTxFifo+0xc>
 80066f0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80066f2:	2003      	movs	r0, #3
}
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	00030d41 	.word	0x00030d41

080066fc <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066fc:	2310      	movs	r3, #16
 80066fe:	4906      	ldr	r1, [pc, #24]	; (8006718 <USB_FlushRxFifo+0x1c>)
 8006700:	6103      	str	r3, [r0, #16]
{
 8006702:	4602      	mov	r2, r0
    if (++count > 200000U)
 8006704:	3901      	subs	r1, #1
 8006706:	d004      	beq.n	8006712 <USB_FlushRxFifo+0x16>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006708:	6910      	ldr	r0, [r2, #16]
 800670a:	f010 0010 	ands.w	r0, r0, #16
 800670e:	d1f9      	bne.n	8006704 <USB_FlushRxFifo+0x8>
 8006710:	4770      	bx	lr
      return HAL_TIMEOUT;
 8006712:	2003      	movs	r0, #3
}
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	00030d41 	.word	0x00030d41

0800671c <USB_DevInit>:
{
 800671c:	b084      	sub	sp, #16
 800671e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006722:	4604      	mov	r4, r0
 8006724:	a809      	add	r0, sp, #36	; 0x24
 8006726:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800672a:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
  for (i = 0U; i < 15U; i++)
 800672e:	2300      	movs	r3, #0
 8006730:	4689      	mov	r9, r1
    USBx->DIEPTXF[i] = 0U;
 8006732:	4619      	mov	r1, r3
 8006734:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006738:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 800673c:	3301      	adds	r3, #1
 800673e:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8006740:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8006742:	d1f7      	bne.n	8006734 <USB_DevInit+0x18>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006744:	f504 6700 	add.w	r7, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 8006748:	f1b8 0f00 	cmp.w	r8, #0
 800674c:	d165      	bne.n	800681a <USB_DevInit+0xfe>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f043 0302 	orr.w	r3, r3, #2
 8006754:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006756:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006758:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800675c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800675e:	6823      	ldr	r3, [r4, #0]
 8006760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006764:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800676c:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 800676e:	2500      	movs	r5, #0
 8006770:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006774:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8006778:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800677c:	2103      	movs	r1, #3
 800677e:	4620      	mov	r0, r4
 8006780:	f003 f808 	bl	8009794 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006784:	2110      	movs	r1, #16
 8006786:	4620      	mov	r0, r4
 8006788:	f7ff ffa6 	bl	80066d8 <USB_FlushTxFifo>
 800678c:	4606      	mov	r6, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800678e:	4620      	mov	r0, r4
 8006790:	f7ff ffb4 	bl	80066fc <USB_FlushRxFifo>
 8006794:	4330      	orrs	r0, r6
 8006796:	b2c0      	uxtb	r0, r0
    ret = HAL_ERROR;
 8006798:	1b40      	subs	r0, r0, r5
  USBx_DEVICE->DIEPMSK = 0U;
 800679a:	613d      	str	r5, [r7, #16]
    ret = HAL_ERROR;
 800679c:	bf18      	it	ne
 800679e:	2001      	movne	r0, #1
  USBx_DEVICE->DOEPMSK = 0U;
 80067a0:	617d      	str	r5, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80067a2:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 80067a6:	61fd      	str	r5, [r7, #28]
      USBx_INEP(i)->DIEPCTL = 0U;
 80067a8:	462a      	mov	r2, r5
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80067aa:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80067ae:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80067b2:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067b6:	454d      	cmp	r5, r9
 80067b8:	d134      	bne.n	8006824 <USB_DevInit+0x108>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067ba:	2200      	movs	r2, #0
 80067bc:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067c0:	4611      	mov	r1, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80067c2:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80067c6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067ca:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067ce:	454a      	cmp	r2, r9
 80067d0:	d139      	bne.n	8006846 <USB_DevInit+0x12a>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067d8:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 80067da:	2300      	movs	r3, #0
 80067dc:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80067de:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80067e2:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067e4:	69a3      	ldr	r3, [r4, #24]
 80067e6:	f043 0310 	orr.w	r3, r3, #16
 80067ea:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80067ec:	69a2      	ldr	r2, [r4, #24]
 80067ee:	4b1e      	ldr	r3, [pc, #120]	; (8006868 <USB_DevInit+0x14c>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80067f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067f6:	b11b      	cbz	r3, 8006800 <USB_DevInit+0xe4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80067f8:	69a3      	ldr	r3, [r4, #24]
 80067fa:	f043 0308 	orr.w	r3, r3, #8
 80067fe:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8006800:	f1b8 0f01 	cmp.w	r8, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006804:	bf01      	itttt	eq
 8006806:	69a3      	ldreq	r3, [r4, #24]
 8006808:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800680c:	f043 0304 	orreq.w	r3, r3, #4
 8006810:	61a3      	streq	r3, [r4, #24]
}
 8006812:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006816:	b004      	add	sp, #16
 8006818:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800681a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800681c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006820:	63a3      	str	r3, [r4, #56]	; 0x38
 8006822:	e7a4      	b.n	800676e <USB_DevInit+0x52>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006824:	f8d3 e000 	ldr.w	lr, [r3]
 8006828:	f1be 0f00 	cmp.w	lr, #0
 800682c:	da09      	bge.n	8006842 <USB_DevInit+0x126>
      if (i == 0U)
 800682e:	b935      	cbnz	r5, 800683e <USB_DevInit+0x122>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006830:	601e      	str	r6, [r3, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006832:	611a      	str	r2, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006834:	3501      	adds	r5, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006836:	f8c3 c008 	str.w	ip, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800683a:	3320      	adds	r3, #32
 800683c:	e7bb      	b.n	80067b6 <USB_DevInit+0x9a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800683e:	6019      	str	r1, [r3, #0]
 8006840:	e7f7      	b.n	8006832 <USB_DevInit+0x116>
      USBx_INEP(i)->DIEPCTL = 0U;
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	e7f5      	b.n	8006832 <USB_DevInit+0x116>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006846:	f8d3 e000 	ldr.w	lr, [r3]
 800684a:	f1be 0f00 	cmp.w	lr, #0
 800684e:	da09      	bge.n	8006864 <USB_DevInit+0x148>
      if (i == 0U)
 8006850:	b932      	cbnz	r2, 8006860 <USB_DevInit+0x144>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006852:	601e      	str	r6, [r3, #0]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006854:	6119      	str	r1, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006856:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006858:	f8c3 c008 	str.w	ip, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800685c:	3320      	adds	r3, #32
 800685e:	e7b6      	b.n	80067ce <USB_DevInit+0xb2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006860:	601d      	str	r5, [r3, #0]
 8006862:	e7f7      	b.n	8006854 <USB_DevInit+0x138>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006864:	6019      	str	r1, [r3, #0]
 8006866:	e7f5      	b.n	8006854 <USB_DevInit+0x138>
 8006868:	803c3800 	.word	0x803c3800

0800686c <USB_DeactivateEndpoint>:
{
 800686c:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800686e:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8006870:	7849      	ldrb	r1, [r1, #1]
 8006872:	2901      	cmp	r1, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006874:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 8006878:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800687c:	f002 020f 	and.w	r2, r2, #15
  if (ep->is_in == 1U)
 8006880:	d122      	bne.n	80068c8 <USB_DeactivateEndpoint+0x5c>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006882:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8006886:	2900      	cmp	r1, #0
 8006888:	da0b      	bge.n	80068a2 <USB_DeactivateEndpoint+0x36>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800688a:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 800688e:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8006892:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006896:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 800689a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800689e:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80068a2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80068a4:	2101      	movs	r1, #1
 80068a6:	fa01 f202 	lsl.w	r2, r1, r2
 80068aa:	ea24 0402 	bic.w	r4, r4, r2
 80068ae:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80068b0:	69c1      	ldr	r1, [r0, #28]
 80068b2:	ea21 0202 	bic.w	r2, r1, r2
 80068b6:	61c2      	str	r2, [r0, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80068b8:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 80068bc:	4a14      	ldr	r2, [pc, #80]	; (8006910 <USB_DeactivateEndpoint+0xa4>)
 80068be:	400a      	ands	r2, r1
 80068c0:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
}
 80068c4:	2000      	movs	r0, #0
 80068c6:	bd10      	pop	{r4, pc}
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068c8:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 80068cc:	2900      	cmp	r1, #0
 80068ce:	da0b      	bge.n	80068e8 <USB_DeactivateEndpoint+0x7c>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80068d0:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 80068d4:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 80068d8:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80068dc:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 80068e0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80068e4:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80068e8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80068ea:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80068ee:	fa01 f202 	lsl.w	r2, r1, r2
 80068f2:	ea24 0402 	bic.w	r4, r4, r2
 80068f6:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80068f8:	69c1      	ldr	r1, [r0, #28]
 80068fa:	ea21 0202 	bic.w	r2, r1, r2
 80068fe:	61c2      	str	r2, [r0, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006900:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8006904:	4a03      	ldr	r2, [pc, #12]	; (8006914 <USB_DeactivateEndpoint+0xa8>)
 8006906:	400a      	ands	r2, r1
 8006908:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800690c:	e7da      	b.n	80068c4 <USB_DeactivateEndpoint+0x58>
 800690e:	bf00      	nop
 8006910:	ec337800 	.word	0xec337800
 8006914:	eff37800 	.word	0xeff37800

08006918 <USB_EP0StartXfer>:
{
 8006918:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800691a:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800691c:	780d      	ldrb	r5, [r1, #0]
    if (ep->xfer_len == 0U)
 800691e:	694e      	ldr	r6, [r1, #20]
 8006920:	4f2d      	ldr	r7, [pc, #180]	; (80069d8 <USB_EP0StartXfer+0xc0>)
 8006922:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 80069dc <USB_EP0StartXfer+0xc4>
  if (ep->is_in == 1U)
 8006926:	2b01      	cmp	r3, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006928:	eb00 1445 	add.w	r4, r0, r5, lsl #5
  if (ep->is_in == 1U)
 800692c:	d134      	bne.n	8006998 <USB_EP0StartXfer+0x80>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800692e:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 8006932:	691a      	ldr	r2, [r3, #16]
    if (ep->xfer_len == 0U)
 8006934:	b9e6      	cbnz	r6, 8006970 <USB_EP0StartXfer+0x58>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006936:	403a      	ands	r2, r7
 8006938:	611a      	str	r2, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800693a:	691a      	ldr	r2, [r3, #16]
 800693c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006940:	611a      	str	r2, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006942:	691a      	ldr	r2, [r3, #16]
 8006944:	ea02 020c 	and.w	r2, r2, ip
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006948:	611a      	str	r2, [r3, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800694a:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800694e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006952:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
    if (ep->xfer_len > 0U)
 8006956:	694b      	ldr	r3, [r1, #20]
 8006958:	b143      	cbz	r3, 800696c <USB_EP0StartXfer+0x54>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800695a:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800695e:	f005 050f 	and.w	r5, r5, #15
 8006962:	2301      	movs	r3, #1
 8006964:	40ab      	lsls	r3, r5
 8006966:	4313      	orrs	r3, r2
 8006968:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 800696c:	2000      	movs	r0, #0
 800696e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006970:	ea02 020c 	and.w	r2, r2, ip
 8006974:	611a      	str	r2, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006976:	691a      	ldr	r2, [r3, #16]
 8006978:	403a      	ands	r2, r7
 800697a:	611a      	str	r2, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800697c:	688a      	ldr	r2, [r1, #8]
 800697e:	42b2      	cmp	r2, r6
        ep->xfer_len = ep->maxpacket;
 8006980:	bf38      	it	cc
 8006982:	614a      	strcc	r2, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006984:	691a      	ldr	r2, [r3, #16]
 8006986:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800698a:	611a      	str	r2, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800698c:	694a      	ldr	r2, [r1, #20]
 800698e:	691e      	ldr	r6, [r3, #16]
 8006990:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006994:	4332      	orrs	r2, r6
 8006996:	e7d7      	b.n	8006948 <USB_EP0StartXfer+0x30>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006998:	f8d4 2b10 	ldr.w	r2, [r4, #2832]	; 0xb10
 800699c:	ea02 020c 	and.w	r2, r2, ip
 80069a0:	f8c4 2b10 	str.w	r2, [r4, #2832]	; 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80069a4:	f8d4 2b10 	ldr.w	r2, [r4, #2832]	; 0xb10
 80069a8:	403a      	ands	r2, r7
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80069aa:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80069ae:	611a      	str	r2, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 80069b0:	688a      	ldr	r2, [r1, #8]
    if (ep->xfer_len > 0U)
 80069b2:	b106      	cbz	r6, 80069b6 <USB_EP0StartXfer+0x9e>
      ep->xfer_len = ep->maxpacket;
 80069b4:	614a      	str	r2, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069b6:	6919      	ldr	r1, [r3, #16]
 80069b8:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 80069bc:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80069be:	6919      	ldr	r1, [r3, #16]
 80069c0:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80069c4:	430a      	orrs	r2, r1
 80069c6:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80069c8:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 80069cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069d0:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 80069d4:	e7ca      	b.n	800696c <USB_EP0StartXfer+0x54>
 80069d6:	bf00      	nop
 80069d8:	e007ffff 	.word	0xe007ffff
 80069dc:	fff80000 	.word	0xfff80000

080069e0 <USB_EPStartXfer>:
{
 80069e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 80069e2:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80069e4:	780a      	ldrb	r2, [r1, #0]
    if (ep->xfer_len == 0U)
 80069e6:	694b      	ldr	r3, [r1, #20]
      if (ep->type == EP_TYPE_ISOC)
 80069e8:	78ce      	ldrb	r6, [r1, #3]
 80069ea:	4f53      	ldr	r7, [pc, #332]	; (8006b38 <USB_EPStartXfer+0x158>)
 80069ec:	f8df c14c 	ldr.w	ip, [pc, #332]	; 8006b3c <USB_EPStartXfer+0x15c>
  if (ep->is_in == 1U)
 80069f0:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069f2:	eb00 1542 	add.w	r5, r0, r2, lsl #5
  if (ep->is_in == 1U)
 80069f6:	d15e      	bne.n	8006ab6 <USB_EPStartXfer+0xd6>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069f8:	f505 6410 	add.w	r4, r5, #2304	; 0x900
 80069fc:	f8d4 e010 	ldr.w	lr, [r4, #16]
    if (ep->xfer_len == 0U)
 8006a00:	b9f3      	cbnz	r3, 8006a40 <USB_EPStartXfer+0x60>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a02:	ea0e 0707 	and.w	r7, lr, r7
 8006a06:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a08:	6927      	ldr	r7, [r4, #16]
 8006a0a:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 8006a0e:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a10:	6927      	ldr	r7, [r4, #16]
 8006a12:	ea07 070c 	and.w	r7, r7, ip
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006a16:	6127      	str	r7, [r4, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a18:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
    if (ep->type != EP_TYPE_ISOC)
 8006a1c:	2e01      	cmp	r6, #1
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a1e:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8006a22:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
    if (ep->type != EP_TYPE_ISOC)
 8006a26:	d034      	beq.n	8006a92 <USB_EPStartXfer+0xb2>
      if (ep->xfer_len > 0U)
 8006a28:	b143      	cbz	r3, 8006a3c <USB_EPStartXfer+0x5c>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006a2a:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8006a2e:	f002 010f 	and.w	r1, r2, #15
 8006a32:	2201      	movs	r2, #1
 8006a34:	408a      	lsls	r2, r1
 8006a36:	431a      	orrs	r2, r3
 8006a38:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
}
 8006a3c:	2000      	movs	r0, #0
 8006a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a40:	ea0e 0c0c 	and.w	ip, lr, ip
 8006a44:	f8c4 c010 	str.w	ip, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a48:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8006a4c:	ea0c 0707 	and.w	r7, ip, r7
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006a50:	f8d1 c008 	ldr.w	ip, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a54:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006a56:	eb0c 0703 	add.w	r7, ip, r3
 8006a5a:	3f01      	subs	r7, #1
 8006a5c:	fbb7 fcfc 	udiv	ip, r7, ip
 8006a60:	4f37      	ldr	r7, [pc, #220]	; (8006b40 <USB_EPStartXfer+0x160>)
 8006a62:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8006a66:	ea07 47cc 	and.w	r7, r7, ip, lsl #19
 8006a6a:	ea47 070e 	orr.w	r7, r7, lr
 8006a6e:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a70:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8006a74:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8006a78:	ea47 070c 	orr.w	r7, r7, ip
      if (ep->type == EP_TYPE_ISOC)
 8006a7c:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a7e:	6127      	str	r7, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8006a80:	d1ca      	bne.n	8006a18 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006a82:	6927      	ldr	r7, [r4, #16]
 8006a84:	f027 47c0 	bic.w	r7, r7, #1610612736	; 0x60000000
 8006a88:	6127      	str	r7, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006a8a:	6927      	ldr	r7, [r4, #16]
 8006a8c:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8006a90:	e7c1      	b.n	8006a16 <USB_EPStartXfer+0x36>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a92:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8006a96:	68c9      	ldr	r1, [r1, #12]
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a98:	f414 7f80 	tst.w	r4, #256	; 0x100
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a9c:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
 8006aa0:	bf0c      	ite	eq
 8006aa2:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006aa6:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 8006aaa:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	f002 febf 	bl	8009832 <USB_WritePacket>
 8006ab4:	e7c2      	b.n	8006a3c <USB_EPStartXfer+0x5c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ab6:	f8d5 4b10 	ldr.w	r4, [r5, #2832]	; 0xb10
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006aba:	6889      	ldr	r1, [r1, #8]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006abc:	ea04 040c 	and.w	r4, r4, ip
 8006ac0:	f8c5 4b10 	str.w	r4, [r5, #2832]	; 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006ac4:	f8d5 4b10 	ldr.w	r4, [r5, #2832]	; 0xb10
 8006ac8:	403c      	ands	r4, r7
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006aca:	f505 6230 	add.w	r2, r5, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006ace:	6114      	str	r4, [r2, #16]
    if (ep->xfer_len == 0U)
 8006ad0:	b9f3      	cbnz	r3, 8006b10 <USB_EPStartXfer+0x130>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006ad2:	6913      	ldr	r3, [r2, #16]
 8006ad4:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8006ad8:	4319      	orrs	r1, r3
 8006ada:	6111      	str	r1, [r2, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006adc:	6913      	ldr	r3, [r2, #16]
 8006ade:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ae2:	6113      	str	r3, [r2, #16]
    if (ep->type == EP_TYPE_ISOC)
 8006ae4:	2e01      	cmp	r6, #1
 8006ae6:	d10c      	bne.n	8006b02 <USB_EPStartXfer+0x122>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ae8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8006aec:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006af0:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 8006af4:	bf0c      	ite	eq
 8006af6:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006afa:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8006afe:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b02:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 8006b06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b0a:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
 8006b0e:	e795      	b.n	8006a3c <USB_EPStartXfer+0x5c>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006b10:	4f0b      	ldr	r7, [pc, #44]	; (8006b40 <USB_EPStartXfer+0x160>)
 8006b12:	f8d2 c010 	ldr.w	ip, [r2, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006b16:	440b      	add	r3, r1
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b1e:	b29c      	uxth	r4, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006b20:	ea07 43c3 	and.w	r3, r7, r3, lsl #19
 8006b24:	ea43 030c 	orr.w	r3, r3, ip
 8006b28:	6113      	str	r3, [r2, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006b2a:	6913      	ldr	r3, [r2, #16]
 8006b2c:	4361      	muls	r1, r4
 8006b2e:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8006b32:	4319      	orrs	r1, r3
 8006b34:	6111      	str	r1, [r2, #16]
 8006b36:	e7d5      	b.n	8006ae4 <USB_EPStartXfer+0x104>
 8006b38:	e007ffff 	.word	0xe007ffff
 8006b3c:	fff80000 	.word	0xfff80000
 8006b40:	1ff80000 	.word	0x1ff80000

08006b44 <USB_EP0_OutStart>:
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b44:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006b46:	4a0c      	ldr	r2, [pc, #48]	; (8006b78 <USB_EP0_OutStart+0x34>)
 8006b48:	4291      	cmp	r1, r2
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b4a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006b4e:	d903      	bls.n	8006b58 <USB_EP0_OutStart+0x14>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b50:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8006b54:	2a00      	cmp	r2, #0
 8006b56:	db0d      	blt.n	8006b74 <USB_EP0_OutStart+0x30>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006b58:	2200      	movs	r2, #0
 8006b5a:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b5c:	691a      	ldr	r2, [r3, #16]
 8006b5e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006b62:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006b64:	691a      	ldr	r2, [r3, #16]
 8006b66:	f042 0218 	orr.w	r2, r2, #24
 8006b6a:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006b6c:	691a      	ldr	r2, [r3, #16]
 8006b6e:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 8006b72:	611a      	str	r2, [r3, #16]
}
 8006b74:	2000      	movs	r0, #0
 8006b76:	4770      	bx	lr
 8006b78:	4f54300a 	.word	0x4f54300a

08006b7c <LL_RCC_SetAHBPrescaler>:
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006b7c:	4a03      	ldr	r2, [pc, #12]	; (8006b8c <LL_RCC_SetAHBPrescaler+0x10>)
 8006b7e:	6893      	ldr	r3, [r2, #8]
 8006b80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b84:	4303      	orrs	r3, r0
 8006b86:	6093      	str	r3, [r2, #8]
}
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	40021000 	.word	0x40021000

08006b90 <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8006b90:	4b08      	ldr	r3, [pc, #32]	; (8006bb4 <UTILS_PLL_IsBusy+0x24>)
 8006b92:	6819      	ldr	r1, [r3, #0]
  * @rmtoll CR           PLLSAI1RDY    LL_RCC_PLLSAI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI1_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8006b94:	681a      	ldr	r2, [r3, #0]
  * @rmtoll CR           PLLSAI2RDY    LL_RCC_PLLSAI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI2_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RCC_CR_PLLSAI2RDY) ? 1UL : 0UL);
 8006b96:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8006b98:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8006b9c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	bf14      	ite	ne
 8006ba4:	2001      	movne	r0, #1
 8006ba6:	2000      	moveq	r0, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RCC_CR_PLLSAI2RDY) ? 1UL : 0UL);
 8006ba8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
    status = ERROR;
  }
#endif /*RCC_PLLSAI2_SUPPORT*/

  return status;
}
 8006bac:	bf18      	it	ne
 8006bae:	2001      	movne	r0, #1
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	40021000 	.word	0x40021000

08006bb8 <LL_SetFlashLatency>:
  if ((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE1))
 8006bb8:	4b1e      	ldr	r3, [pc, #120]	; (8006c34 <LL_SetFlashLatency+0x7c>)
 8006bba:	1e42      	subs	r2, r0, #1
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d834      	bhi.n	8006c2a <LL_SetFlashLatency+0x72>
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 8006bc0:	4b1d      	ldr	r3, [pc, #116]	; (8006c38 <LL_SetFlashLatency+0x80>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8006bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bcc:	d112      	bne.n	8006bf4 <LL_SetFlashLatency+0x3c>
      if(HCLKFrequency > UTILS_SCALE1_LATENCY5_FREQ)
 8006bce:	4b1b      	ldr	r3, [pc, #108]	; (8006c3c <LL_SetFlashLatency+0x84>)
 8006bd0:	4298      	cmp	r0, r3
 8006bd2:	d817      	bhi.n	8006c04 <LL_SetFlashLatency+0x4c>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 8006bd4:	4b1a      	ldr	r3, [pc, #104]	; (8006c40 <LL_SetFlashLatency+0x88>)
 8006bd6:	4298      	cmp	r0, r3
 8006bd8:	d816      	bhi.n	8006c08 <LL_SetFlashLatency+0x50>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 8006bda:	4b1a      	ldr	r3, [pc, #104]	; (8006c44 <LL_SetFlashLatency+0x8c>)
 8006bdc:	4298      	cmp	r0, r3
 8006bde:	d815      	bhi.n	8006c0c <LL_SetFlashLatency+0x54>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 8006be0:	4b19      	ldr	r3, [pc, #100]	; (8006c48 <LL_SetFlashLatency+0x90>)
 8006be2:	4298      	cmp	r0, r3
 8006be4:	d823      	bhi.n	8006c2e <LL_SetFlashLatency+0x76>
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 8006be6:	4b19      	ldr	r3, [pc, #100]	; (8006c4c <LL_SetFlashLatency+0x94>)
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 8006be8:	4298      	cmp	r0, r3
 8006bea:	bf94      	ite	ls
 8006bec:	2300      	movls	r3, #0
 8006bee:	2301      	movhi	r3, #1
  ErrorStatus status = SUCCESS;
 8006bf0:	2000      	movs	r0, #0
 8006bf2:	e00f      	b.n	8006c14 <LL_SetFlashLatency+0x5c>
      if(HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE2)
 8006bf4:	4b16      	ldr	r3, [pc, #88]	; (8006c50 <LL_SetFlashLatency+0x98>)
 8006bf6:	4298      	cmp	r0, r3
 8006bf8:	d80a      	bhi.n	8006c10 <LL_SetFlashLatency+0x58>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 8006bfa:	4b16      	ldr	r3, [pc, #88]	; (8006c54 <LL_SetFlashLatency+0x9c>)
 8006bfc:	4298      	cmp	r0, r3
 8006bfe:	d816      	bhi.n	8006c2e <LL_SetFlashLatency+0x76>
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 8006c00:	4b15      	ldr	r3, [pc, #84]	; (8006c58 <LL_SetFlashLatency+0xa0>)
 8006c02:	e7f1      	b.n	8006be8 <LL_SetFlashLatency+0x30>
        latency = LL_FLASH_LATENCY_5;
 8006c04:	2305      	movs	r3, #5
 8006c06:	e7f3      	b.n	8006bf0 <LL_SetFlashLatency+0x38>
        latency = LL_FLASH_LATENCY_4;
 8006c08:	2304      	movs	r3, #4
 8006c0a:	e7f1      	b.n	8006bf0 <LL_SetFlashLatency+0x38>
        latency = LL_FLASH_LATENCY_3;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e7ef      	b.n	8006bf0 <LL_SetFlashLatency+0x38>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8006c10:	2300      	movs	r3, #0
        status = ERROR;
 8006c12:	2001      	movs	r0, #1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8006c14:	4911      	ldr	r1, [pc, #68]	; (8006c5c <LL_SetFlashLatency+0xa4>)
 8006c16:	680a      	ldr	r2, [r1, #0]
 8006c18:	f022 020f 	bic.w	r2, r2, #15
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	600a      	str	r2, [r1, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8006c20:	680a      	ldr	r2, [r1, #0]
 8006c22:	f002 020f 	and.w	r2, r2, #15
    if(LL_FLASH_GetLatency() != latency)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d000      	beq.n	8006c2c <LL_SetFlashLatency+0x74>
      status = ERROR;
 8006c2a:	2001      	movs	r0, #1
}
 8006c2c:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_2;
 8006c2e:	2302      	movs	r3, #2
 8006c30:	e7de      	b.n	8006bf0 <LL_SetFlashLatency+0x38>
 8006c32:	bf00      	nop
 8006c34:	07270dff 	.word	0x07270dff
 8006c38:	40007000 	.word	0x40007000
 8006c3c:	05f5e100 	.word	0x05f5e100
 8006c40:	04c4b400 	.word	0x04c4b400
 8006c44:	03938700 	.word	0x03938700
 8006c48:	02625a00 	.word	0x02625a00
 8006c4c:	01312d00 	.word	0x01312d00
 8006c50:	018cba80 	.word	0x018cba80
 8006c54:	00f42400 	.word	0x00f42400
 8006c58:	007a1200 	.word	0x007a1200
 8006c5c:	40022000 	.word	0x40022000

08006c60 <UTILS_EnablePLLAndSwitchSystem>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 8006c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8006c62:	680b      	ldr	r3, [r1, #0]
 8006c64:	4a1f      	ldr	r2, [pc, #124]	; (8006ce4 <UTILS_EnablePLLAndSwitchSystem+0x84>)

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 8006c66:	4f20      	ldr	r7, [pc, #128]	; (8006ce8 <UTILS_EnablePLLAndSwitchSystem+0x88>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8006c68:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 8006c6c:	460e      	mov	r6, r1
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8006c6e:	5cd3      	ldrb	r3, [r2, r3]
 8006c70:	fa20 f503 	lsr.w	r5, r0, r3
  if(SystemCoreClock < hclk_frequency)
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	42ab      	cmp	r3, r5
 8006c78:	d325      	bcc.n	8006cc6 <UTILS_EnablePLLAndSwitchSystem+0x66>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006c7a:	4c1c      	ldr	r4, [pc, #112]	; (8006cec <UTILS_EnablePLLAndSwitchSystem+0x8c>)
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c82:	6023      	str	r3, [r4, #0]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8006c84:	68e3      	ldr	r3, [r4, #12]
 8006c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c8a:	60e3      	str	r3, [r4, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8006c8c:	6823      	ldr	r3, [r4, #0]
 8006c8e:	019b      	lsls	r3, r3, #6
 8006c90:	d5fc      	bpl.n	8006c8c <UTILS_EnablePLLAndSwitchSystem+0x2c>
    {
      /* Wait for PLL ready */
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 8006c92:	6830      	ldr	r0, [r6, #0]
 8006c94:	f7ff ff72 	bl	8006b7c <LL_RCC_SetAHBPrescaler>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006c98:	68a3      	ldr	r3, [r4, #8]
 8006c9a:	f043 0303 	orr.w	r3, r3, #3
 8006c9e:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006ca0:	68a3      	ldr	r3, [r4, #8]
 8006ca2:	f003 030c 	and.w	r3, r3, #12
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8006ca6:	2b0c      	cmp	r3, #12
 8006ca8:	d1fa      	bne.n	8006ca0 <UTILS_EnablePLLAndSwitchSystem+0x40>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006caa:	68a3      	ldr	r3, [r4, #8]
 8006cac:	6872      	ldr	r2, [r6, #4]
 8006cae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006cb6:	68a3      	ldr	r3, [r4, #8]
 8006cb8:	68b2      	ldr	r2, [r6, #8]
 8006cba:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	60a3      	str	r3, [r4, #8]
}
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	e004      	b.n	8006cd0 <UTILS_EnablePLLAndSwitchSystem+0x70>
    status = LL_SetFlashLatency(hclk_frequency);
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	f7ff ff76 	bl	8006bb8 <LL_SetFlashLatency>
  if(status == SUCCESS)
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	d0d4      	beq.n	8006c7a <UTILS_EnablePLLAndSwitchSystem+0x1a>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	42ab      	cmp	r3, r5
 8006cd4:	d902      	bls.n	8006cdc <UTILS_EnablePLLAndSwitchSystem+0x7c>
  {
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	f7ff ff6e 	bl	8006bb8 <LL_SetFlashLatency>
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 8006cdc:	b900      	cbnz	r0, 8006ce0 <UTILS_EnablePLLAndSwitchSystem+0x80>
  SystemCoreClock = HCLKFrequency;
 8006cde:	603d      	str	r5, [r7, #0]
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 8006ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	0800af06 	.word	0x0800af06
 8006ce8:	20000168 	.word	0x20000168
 8006cec:	40021000 	.word	0x40021000

08006cf0 <LL_PLL_ConfigSystemClock_HSI>:
{
 8006cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	460d      	mov	r5, r1
  if(UTILS_PLL_IsBusy() == SUCCESS)
 8006cf6:	f7ff ff4b 	bl	8006b90 <UTILS_PLL_IsBusy>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	d138      	bne.n	8006d70 <LL_PLL_ConfigSystemClock_HSI+0x80>
    pllfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 8006cfe:	4621      	mov	r1, r4
 8006d00:	481c      	ldr	r0, [pc, #112]	; (8006d74 <LL_PLL_ConfigSystemClock_HSI+0x84>)
 8006d02:	f002 fe76 	bl	80099f2 <UTILS_GetPLLOutputFrequency>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8006d06:	4a1c      	ldr	r2, [pc, #112]	; (8006d78 <LL_PLL_ConfigSystemClock_HSI+0x88>)
 8006d08:	6813      	ldr	r3, [r2, #0]
 8006d0a:	0559      	lsls	r1, r3, #21
 8006d0c:	4606      	mov	r6, r0
 8006d0e:	d406      	bmi.n	8006d1e <LL_PLL_ConfigSystemClock_HSI+0x2e>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006d10:	6813      	ldr	r3, [r2, #0]
 8006d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d16:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8006d18:	6813      	ldr	r3, [r2, #0]
 8006d1a:	055b      	lsls	r3, r3, #21
 8006d1c:	d5fc      	bpl.n	8006d18 <LL_PLL_ConfigSystemClock_HSI+0x28>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8006d1e:	68d0      	ldr	r0, [r2, #12]
 8006d20:	4b16      	ldr	r3, [pc, #88]	; (8006d7c <LL_PLL_ConfigSystemClock_HSI+0x8c>)
 8006d22:	6861      	ldr	r1, [r4, #4]
 8006d24:	4003      	ands	r3, r0
 8006d26:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006d2a:	6821      	ldr	r1, [r4, #0]
 8006d2c:	430b      	orrs	r3, r1
 8006d2e:	68a1      	ldr	r1, [r4, #8]
 8006d30:	430b      	orrs	r3, r1
 8006d32:	f043 0302 	orr.w	r3, r3, #2
 8006d36:	60d3      	str	r3, [r2, #12]
    if(pllfreq > 80000000U)
 8006d38:	4b11      	ldr	r3, [pc, #68]	; (8006d80 <LL_PLL_ConfigSystemClock_HSI+0x90>)
 8006d3a:	429e      	cmp	r6, r3
 8006d3c:	d916      	bls.n	8006d6c <LL_PLL_ConfigSystemClock_HSI+0x7c>
      if(UTILS_ClkInitStruct->AHBCLKDivider == LL_RCC_SYSCLK_DIV_1)
 8006d3e:	682b      	ldr	r3, [r5, #0]
 8006d40:	b9a3      	cbnz	r3, 8006d6c <LL_PLL_ConfigSystemClock_HSI+0x7c>
        UTILS_ClkInitStruct->AHBCLKDivider = LL_RCC_SYSCLK_DIV_2;
 8006d42:	2780      	movs	r7, #128	; 0x80
 8006d44:	602f      	str	r7, [r5, #0]
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8006d46:	4629      	mov	r1, r5
 8006d48:	4630      	mov	r0, r6
 8006d4a:	f7ff ff89 	bl	8006c60 <UTILS_EnablePLLAndSwitchSystem>
    if((status == SUCCESS) && (hpre != LL_RCC_SYSCLK_DIV_1))
 8006d4e:	4604      	mov	r4, r0
 8006d50:	b950      	cbnz	r0, 8006d68 <LL_PLL_ConfigSystemClock_HSI+0x78>
 8006d52:	b14f      	cbz	r7, 8006d68 <LL_PLL_ConfigSystemClock_HSI+0x78>
      status = LL_SetFlashLatency(pllfreq);
 8006d54:	4630      	mov	r0, r6
 8006d56:	f7ff ff2f 	bl	8006bb8 <LL_SetFlashLatency>
      if(status == SUCCESS)
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	b920      	cbnz	r0, 8006d68 <LL_PLL_ConfigSystemClock_HSI+0x78>
        UTILS_ClkInitStruct->AHBCLKDivider = LL_RCC_SYSCLK_DIV_1;
 8006d5e:	6028      	str	r0, [r5, #0]
        LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 8006d60:	f7ff ff0c 	bl	8006b7c <LL_RCC_SetAHBPrescaler>
  SystemCoreClock = HCLKFrequency;
 8006d64:	4b07      	ldr	r3, [pc, #28]	; (8006d84 <LL_PLL_ConfigSystemClock_HSI+0x94>)
 8006d66:	601e      	str	r6, [r3, #0]
}
 8006d68:	4620      	mov	r0, r4
 8006d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t hpre = LL_RCC_SYSCLK_DIV_1;  /* Set default value */
 8006d6c:	2700      	movs	r7, #0
 8006d6e:	e7ea      	b.n	8006d46 <LL_PLL_ConfigSystemClock_HSI+0x56>
    status = ERROR;
 8006d70:	2401      	movs	r4, #1
 8006d72:	e7f9      	b.n	8006d68 <LL_PLL_ConfigSystemClock_HSI+0x78>
 8006d74:	00f42400 	.word	0x00f42400
 8006d78:	40021000 	.word	0x40021000
 8006d7c:	f9ff800c 	.word	0xf9ff800c
 8006d80:	04c4b400 	.word	0x04c4b400
 8006d84:	20000168 	.word	0x20000168

08006d88 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8006d88:	4b0e      	ldr	r3, [pc, #56]	; (8006dc4 <z_sys_init_run_level+0x3c>)
{
 8006d8a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8006d8c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8006d90:	3001      	adds	r0, #1
 8006d92:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8006d96:	42a6      	cmp	r6, r4
 8006d98:	d800      	bhi.n	8006d9c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 8006d9a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 8006d9c:	e9d4 3500 	ldrd	r3, r5, [r4]
 8006da0:	4628      	mov	r0, r5
 8006da2:	4798      	blx	r3
		if (dev != NULL) {
 8006da4:	b165      	cbz	r5, 8006dc0 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
 8006da6:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
 8006da8:	b130      	cbz	r0, 8006db8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 8006daa:	2800      	cmp	r0, #0
 8006dac:	bfb8      	it	lt
 8006dae:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 8006db0:	28ff      	cmp	r0, #255	; 0xff
 8006db2:	bfa8      	it	ge
 8006db4:	20ff      	movge	r0, #255	; 0xff
 8006db6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 8006db8:	785a      	ldrb	r2, [r3, #1]
 8006dba:	f042 0201 	orr.w	r2, r2, #1
 8006dbe:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8006dc0:	3408      	adds	r4, #8
 8006dc2:	e7e8      	b.n	8006d96 <z_sys_init_run_level+0xe>
 8006dc4:	0800a81c 	.word	0x0800a81c

08006dc8 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 8006dc8:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 8006dca:	4b0a      	ldr	r3, [pc, #40]	; (8006df4 <bg_thread_main+0x2c>)
 8006dcc:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8006dce:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 8006dd0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8006dd2:	f7ff ffd9 	bl	8006d88 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 8006dd6:	f001 f851 	bl	8007e7c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 8006dda:	2003      	movs	r0, #3
 8006ddc:	f7ff ffd4 	bl	8006d88 <z_sys_init_run_level>

	z_init_static_threads();
 8006de0:	f000 f916 	bl	8007010 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
 8006de4:	f7fb fe1e 	bl	8002a24 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8006de8:	4a03      	ldr	r2, [pc, #12]	; (8006df8 <bg_thread_main+0x30>)
 8006dea:	7b13      	ldrb	r3, [r2, #12]
 8006dec:	f023 0301 	bic.w	r3, r3, #1
 8006df0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8006df2:	bd08      	pop	{r3, pc}
 8006df4:	2000113d 	.word	0x2000113d
 8006df8:	20000448 	.word	0x20000448

08006dfc <z_bss_zero>:
{
 8006dfc:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 8006dfe:	4803      	ldr	r0, [pc, #12]	; (8006e0c <z_bss_zero+0x10>)
 8006e00:	4a03      	ldr	r2, [pc, #12]	; (8006e10 <z_bss_zero+0x14>)
 8006e02:	2100      	movs	r1, #0
 8006e04:	1a12      	subs	r2, r2, r0
 8006e06:	f002 fe36 	bl	8009a76 <z_early_memset>
}
 8006e0a:	bd08      	pop	{r3, pc}
 8006e0c:	20000328 	.word	0x20000328
 8006e10:	20001140 	.word	0x20001140

08006e14 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 8006e14:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
 8006e16:	2300      	movs	r3, #0
{
 8006e18:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
 8006e20:	4e13      	ldr	r6, [pc, #76]	; (8006e70 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8006e22:	4d14      	ldr	r5, [pc, #80]	; (8006e74 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
 8006e24:	9301      	str	r3, [sp, #4]
 8006e26:	220f      	movs	r2, #15
 8006e28:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8006e2c:	4912      	ldr	r1, [pc, #72]	; (8006e78 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8006e2e:	2318      	movs	r3, #24
 8006e30:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
 8006e34:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
 8006e38:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
 8006e3a:	f44f 70b0 	mov.w	r0, #352	; 0x160
 8006e3e:	fb00 1104 	mla	r1, r0, r4, r1
 8006e42:	4b0e      	ldr	r3, [pc, #56]	; (8006e7c <z_init_cpu+0x68>)
 8006e44:	9500      	str	r5, [sp, #0]
 8006e46:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006e4a:	4630      	mov	r0, r6
 8006e4c:	f000 f882 	bl	8006f54 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8006e50:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8006e52:	480b      	ldr	r0, [pc, #44]	; (8006e80 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
 8006e54:	752c      	strb	r4, [r5, #20]
 8006e56:	f023 0304 	bic.w	r3, r3, #4
 8006e5a:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8006e5c:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8006e60:	fb03 0404 	mla	r4, r3, r4, r0
 8006e64:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 8006e66:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
 8006e68:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
 8006e6a:	b006      	add	sp, #24
 8006e6c:	bd70      	pop	{r4, r5, r6, pc}
 8006e6e:	bf00      	nop
 8006e70:	200003c8 	.word	0x200003c8
 8006e74:	200010e0 	.word	0x200010e0
 8006e78:	20001980 	.word	0x20001980
 8006e7c:	08009a95 	.word	0x08009a95
 8006e80:	20001ae0 	.word	0x20001ae0

08006e84 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 8006e84:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8006e86:	4b2c      	ldr	r3, [pc, #176]	; (8006f38 <z_cstart+0xb4>)
 8006e88:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8006e8a:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8006e8e:	4d2b      	ldr	r5, [pc, #172]	; (8006f3c <z_cstart+0xb8>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
 8006e90:	4e2b      	ldr	r6, [pc, #172]	; (8006f40 <z_cstart+0xbc>)
 8006e92:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8006e94:	4f2b      	ldr	r7, [pc, #172]	; (8006f44 <z_cstart+0xc0>)
 8006e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e9a:	2400      	movs	r4, #0
 8006e9c:	616b      	str	r3, [r5, #20]
 8006e9e:	23f0      	movs	r3, #240	; 0xf0
 8006ea0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8006ea4:	77ec      	strb	r4, [r5, #31]
 8006ea6:	762c      	strb	r4, [r5, #24]
 8006ea8:	766c      	strb	r4, [r5, #25]
 8006eaa:	76ac      	strb	r4, [r5, #26]
 8006eac:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8006eb0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006eb2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8006eb6:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8006eb8:	f7fd fe10 	bl	8004adc <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8006ebc:	f7fd fbea 	bl	8004694 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8006ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ec4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8006ec6:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 8006ec8:	f7fd fee4 	bl	8004c94 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8006ecc:	f7fd fe4c 	bl	8004b68 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 8006ed0:	f240 1301 	movw	r3, #257	; 0x101
 8006ed4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 8006ed8:	ab06      	add	r3, sp, #24
 8006eda:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
 8006edc:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
 8006ee0:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8006ee2:	f002 fd96 	bl	8009a12 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f7ff ff4e 	bl	8006d88 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8006eec:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
 8006eee:	4d16      	ldr	r5, [pc, #88]	; (8006f48 <z_cstart+0xc4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8006ef0:	f7ff ff4a 	bl	8006d88 <z_sys_init_run_level>
	z_sched_init();
 8006ef4:	f000 fd32 	bl	800795c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8006ef8:	4b14      	ldr	r3, [pc, #80]	; (8006f4c <z_cstart+0xc8>)
	_kernel.ready_q.cache = &z_main_thread;
 8006efa:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8006efc:	9305      	str	r3, [sp, #20]
 8006efe:	2301      	movs	r3, #1
 8006f00:	4913      	ldr	r1, [pc, #76]	; (8006f50 <z_cstart+0xcc>)
 8006f02:	9400      	str	r4, [sp, #0]
 8006f04:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8006f08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f0c:	463b      	mov	r3, r7
 8006f0e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8006f12:	4628      	mov	r0, r5
 8006f14:	f000 f81e 	bl	8006f54 <z_setup_new_thread>
 8006f18:	7b6a      	ldrb	r2, [r5, #13]
 8006f1a:	4606      	mov	r6, r0
 8006f1c:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
 8006f20:	4628      	mov	r0, r5
 8006f22:	736a      	strb	r2, [r5, #13]
 8006f24:	f002 fe3c 	bl	8009ba0 <z_ready_thread>
	z_init_cpu(0);
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f7ff ff73 	bl	8006e14 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8006f2e:	463a      	mov	r2, r7
 8006f30:	4631      	mov	r1, r6
 8006f32:	4628      	mov	r0, r5
 8006f34:	f7fd fcac 	bl	8004890 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8006f38:	20002300 	.word	0x20002300
 8006f3c:	e000ed00 	.word	0xe000ed00
 8006f40:	200010e0 	.word	0x200010e0
 8006f44:	08006dc9 	.word	0x08006dc9
 8006f48:	20000448 	.word	0x20000448
 8006f4c:	0800af16 	.word	0x0800af16
 8006f50:	20001560 	.word	0x20001560

08006f54 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8006f54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 8006f58:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006f5a:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 8006f5c:	2604      	movs	r6, #4
 8006f5e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
 8006f60:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8006f62:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8006f64:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
 8006f68:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8006f6a:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 8006f6c:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8006f70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
 8006f72:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8006f74:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8006f78:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 8006f7a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
 8006f7e:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
 8006f82:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
 8006f84:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 8006f86:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8006f88:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8006f8c:	9202      	str	r2, [sp, #8]
 8006f8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f90:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
 8006f92:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8006f94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f96:	9200      	str	r2, [sp, #0]
 8006f98:	4642      	mov	r2, r8
{
 8006f9a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8006f9c:	f7fd fc46 	bl	800482c <arch_new_thread>
	if (!_current) {
 8006fa0:	4b04      	ldr	r3, [pc, #16]	; (8006fb4 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
 8006fa2:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	b103      	cbz	r3, 8006faa <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 8006fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
 8006faa:	6723      	str	r3, [r4, #112]	; 0x70
}
 8006fac:	4640      	mov	r0, r8
 8006fae:	b004      	add	sp, #16
 8006fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fb4:	200010e0 	.word	0x200010e0

08006fb8 <z_impl_k_thread_create>:
{
 8006fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fba:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8006fbc:	2700      	movs	r7, #0
 8006fbe:	9705      	str	r7, [sp, #20]
 8006fc0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8006fc2:	9704      	str	r7, [sp, #16]
 8006fc4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8006fc6:	9703      	str	r7, [sp, #12]
 8006fc8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006fca:	9702      	str	r7, [sp, #8]
{
 8006fcc:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8006fd0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006fd2:	9701      	str	r7, [sp, #4]
 8006fd4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8006fd6:	9700      	str	r7, [sp, #0]
{
 8006fd8:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8006fda:	f7ff ffbb 	bl	8006f54 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 8006fde:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8006fe2:	bf08      	it	eq
 8006fe4:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 8006fe8:	d005      	beq.n	8006ff6 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8006fea:	ea55 0306 	orrs.w	r3, r5, r6
 8006fee:	d105      	bne.n	8006ffc <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f000 fbad 	bl	8007750 <z_sched_start>
}
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	b007      	add	sp, #28
 8006ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8006ffc:	4903      	ldr	r1, [pc, #12]	; (800700c <z_impl_k_thread_create+0x54>)
 8006ffe:	4632      	mov	r2, r6
 8007000:	462b      	mov	r3, r5
 8007002:	f104 0018 	add.w	r0, r4, #24
 8007006:	f000 fe33 	bl	8007c70 <z_add_timeout>
 800700a:	e7f4      	b.n	8006ff6 <z_impl_k_thread_create+0x3e>
 800700c:	08009bc1 	.word	0x08009bc1

08007010 <z_init_static_threads>:
{
 8007010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007012:	4c22      	ldr	r4, [pc, #136]	; (800709c <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 8007014:	4d22      	ldr	r5, [pc, #136]	; (80070a0 <z_init_static_threads+0x90>)
{
 8007016:	b087      	sub	sp, #28
 8007018:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 800701a:	42ae      	cmp	r6, r5
 800701c:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8007020:	d30b      	bcc.n	800703a <z_init_static_threads+0x2a>
	k_sched_lock();
 8007022:	f000 faaf 	bl	8007584 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8007026:	4c1d      	ldr	r4, [pc, #116]	; (800709c <z_init_static_threads+0x8c>)
 8007028:	4f1e      	ldr	r7, [pc, #120]	; (80070a4 <z_init_static_threads+0x94>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 800702a:	260a      	movs	r6, #10
 800702c:	42ac      	cmp	r4, r5
 800702e:	d320      	bcc.n	8007072 <z_init_static_threads+0x62>
}
 8007030:	b007      	add	sp, #28
 8007032:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 8007036:	f000 bc75 	b.w	8007924 <k_sched_unlock>
		z_setup_new_thread(
 800703a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800703e:	9305      	str	r3, [sp, #20]
 8007040:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8007044:	9304      	str	r3, [sp, #16]
 8007046:	f854 3c14 	ldr.w	r3, [r4, #-20]
 800704a:	9303      	str	r3, [sp, #12]
 800704c:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8007050:	9302      	str	r3, [sp, #8]
 8007052:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8007056:	9301      	str	r3, [sp, #4]
 8007058:	f854 3c20 	ldr.w	r3, [r4, #-32]
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 8007062:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 8007066:	f7ff ff75 	bl	8006f54 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 800706a:	f854 3c30 	ldr.w	r3, [r4, #-48]
 800706e:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 8007070:	e7d2      	b.n	8007018 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8007072:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007074:	1c53      	adds	r3, r2, #1
 8007076:	d009      	beq.n	800708c <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 8007078:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800707c:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8007080:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 8007084:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8007086:	d103      	bne.n	8007090 <z_init_static_threads+0x80>
	z_sched_start(thread);
 8007088:	f000 fb62 	bl	8007750 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 800708c:	3430      	adds	r4, #48	; 0x30
 800708e:	e7cd      	b.n	800702c <z_init_static_threads+0x1c>
 8007090:	4639      	mov	r1, r7
 8007092:	3018      	adds	r0, #24
 8007094:	f000 fdec 	bl	8007c70 <z_add_timeout>
 8007098:	e7f8      	b.n	800708c <z_init_static_threads+0x7c>
 800709a:	bf00      	nop
 800709c:	20000224 	.word	0x20000224
 80070a0:	20000224 	.word	0x20000224
 80070a4:	08009bc1 	.word	0x08009bc1

080070a8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 80070a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80070ac:	4604      	mov	r4, r0
 80070ae:	4617      	mov	r7, r2
 80070b0:	461e      	mov	r6, r3
	__asm__ volatile(
 80070b2:	f04f 0310 	mov.w	r3, #16
 80070b6:	f3ef 8811 	mrs	r8, BASEPRI
 80070ba:	f383 8812 	msr	BASEPRI_MAX, r3
 80070be:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 80070c2:	68c3      	ldr	r3, [r0, #12]
 80070c4:	4a32      	ldr	r2, [pc, #200]	; (8007190 <z_impl_k_mutex_lock+0xe8>)
 80070c6:	b16b      	cbz	r3, 80070e4 <z_impl_k_mutex_lock+0x3c>
 80070c8:	6880      	ldr	r0, [r0, #8]
 80070ca:	6891      	ldr	r1, [r2, #8]
 80070cc:	4288      	cmp	r0, r1
 80070ce:	d019      	beq.n	8007104 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 80070d0:	ea57 0306 	orrs.w	r3, r7, r6
 80070d4:	d118      	bne.n	8007108 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
 80070d6:	f388 8811 	msr	BASEPRI, r8
 80070da:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
 80070de:	f06f 000f 	mvn.w	r0, #15
 80070e2:	e00c      	b.n	80070fe <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
 80070e4:	6891      	ldr	r1, [r2, #8]
 80070e6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 80070ea:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
 80070ec:	3301      	adds	r3, #1
 80070ee:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
 80070f0:	6893      	ldr	r3, [r2, #8]
 80070f2:	60a3      	str	r3, [r4, #8]
 80070f4:	f388 8811 	msr	BASEPRI, r8
 80070f8:	f3bf 8f6f 	isb	sy
		return 0;
 80070fc:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 80070fe:	b002      	add	sp, #8
 8007100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
 8007104:	6921      	ldr	r1, [r4, #16]
 8007106:	e7f0      	b.n	80070ea <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 8007108:	f991 100e 	ldrsb.w	r1, [r1, #14]
 800710c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
 8007110:	4299      	cmp	r1, r3
 8007112:	bfa8      	it	ge
 8007114:	4619      	movge	r1, r3
 8007116:	f06f 027e 	mvn.w	r2, #126	; 0x7e
 800711a:	4291      	cmp	r1, r2
 800711c:	bfb8      	it	lt
 800711e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 8007120:	428b      	cmp	r3, r1
 8007122:	dd2e      	ble.n	8007182 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
 8007124:	f002 fcc2 	bl	8009aac <adjust_owner_prio.isra.0>
 8007128:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 800712a:	e9cd 7600 	strd	r7, r6, [sp]
 800712e:	4819      	ldr	r0, [pc, #100]	; (8007194 <z_impl_k_mutex_lock+0xec>)
 8007130:	4622      	mov	r2, r4
 8007132:	4641      	mov	r1, r8
 8007134:	f000 fb68 	bl	8007808 <z_pend_curr>
	if (got_mutex == 0) {
 8007138:	2800      	cmp	r0, #0
 800713a:	d0e0      	beq.n	80070fe <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
 800713c:	f04f 0310 	mov.w	r3, #16
 8007140:	f3ef 8611 	mrs	r6, BASEPRI
 8007144:	f383 8812 	msr	BASEPRI_MAX, r3
 8007148:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 800714c:	6823      	ldr	r3, [r4, #0]
 800714e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007150:	429c      	cmp	r4, r3
 8007152:	d00a      	beq.n	800716a <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 8007154:	b14b      	cbz	r3, 800716a <z_impl_k_mutex_lock+0xc2>
 8007156:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800715a:	4299      	cmp	r1, r3
 800715c:	bfa8      	it	ge
 800715e:	4619      	movge	r1, r3
 8007160:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8007164:	4299      	cmp	r1, r3
 8007166:	bfb8      	it	lt
 8007168:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 800716a:	68a0      	ldr	r0, [r4, #8]
 800716c:	f002 fc9e 	bl	8009aac <adjust_owner_prio.isra.0>
 8007170:	b900      	cbnz	r0, 8007174 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
 8007172:	b145      	cbz	r5, 8007186 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
 8007174:	4807      	ldr	r0, [pc, #28]	; (8007194 <z_impl_k_mutex_lock+0xec>)
 8007176:	4631      	mov	r1, r6
 8007178:	f000 f9f2 	bl	8007560 <z_reschedule>
	return -EAGAIN;
 800717c:	f06f 000a 	mvn.w	r0, #10
 8007180:	e7bd      	b.n	80070fe <z_impl_k_mutex_lock+0x56>
	bool resched = false;
 8007182:	2500      	movs	r5, #0
 8007184:	e7d1      	b.n	800712a <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
 8007186:	f386 8811 	msr	BASEPRI, r6
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	e7f5      	b.n	800717c <z_impl_k_mutex_lock+0xd4>
 8007190:	200010e0 	.word	0x200010e0
 8007194:	2000113e 	.word	0x2000113e

08007198 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
 8007198:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 800719a:	6883      	ldr	r3, [r0, #8]
{
 800719c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d032      	beq.n	8007208 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 80071a2:	4a1c      	ldr	r2, [pc, #112]	; (8007214 <z_impl_k_mutex_unlock+0x7c>)
 80071a4:	6892      	ldr	r2, [r2, #8]
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d131      	bne.n	800720e <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 80071aa:	7bda      	ldrb	r2, [r3, #15]
 80071ac:	3a01      	subs	r2, #1
 80071ae:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 80071b0:	68c3      	ldr	r3, [r0, #12]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d905      	bls.n	80071c2 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 80071b6:	3b01      	subs	r3, #1
 80071b8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
 80071ba:	f000 fbb3 	bl	8007924 <k_sched_unlock>

	return 0;
 80071be:	2000      	movs	r0, #0
}
 80071c0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 80071c2:	f04f 0310 	mov.w	r3, #16
 80071c6:	f3ef 8511 	mrs	r5, BASEPRI
 80071ca:	f383 8812 	msr	BASEPRI_MAX, r3
 80071ce:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 80071d2:	6901      	ldr	r1, [r0, #16]
 80071d4:	6880      	ldr	r0, [r0, #8]
 80071d6:	f002 fc69 	bl	8009aac <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 80071da:	4620      	mov	r0, r4
 80071dc:	f002 fd3c 	bl	8009c58 <z_unpend_first_thread>
	mutex->owner = new_owner;
 80071e0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 80071e2:	b158      	cbz	r0, 80071fc <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
 80071e4:	f990 200e 	ldrsb.w	r2, [r0, #14]
 80071e8:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 80071ea:	2200      	movs	r2, #0
 80071ec:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
 80071ee:	f002 fcd7 	bl	8009ba0 <z_ready_thread>
		z_reschedule(&lock, key);
 80071f2:	4809      	ldr	r0, [pc, #36]	; (8007218 <z_impl_k_mutex_unlock+0x80>)
 80071f4:	4629      	mov	r1, r5
 80071f6:	f000 f9b3 	bl	8007560 <z_reschedule>
 80071fa:	e7de      	b.n	80071ba <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 80071fc:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 80071fe:	f385 8811 	msr	BASEPRI, r5
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	e7d8      	b.n	80071ba <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
 8007208:	f06f 0015 	mvn.w	r0, #21
 800720c:	e7d8      	b.n	80071c0 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
 800720e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007212:	e7d5      	b.n	80071c0 <z_impl_k_mutex_unlock+0x28>
 8007214:	200010e0 	.word	0x200010e0
 8007218:	2000113e 	.word	0x2000113e

0800721c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 800721c:	b538      	push	{r3, r4, r5, lr}
 800721e:	4604      	mov	r4, r0
	__asm__ volatile(
 8007220:	f04f 0310 	mov.w	r3, #16
 8007224:	f3ef 8511 	mrs	r5, BASEPRI
 8007228:	f383 8812 	msr	BASEPRI_MAX, r3
 800722c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 8007230:	f002 fd12 	bl	8009c58 <z_unpend_first_thread>

	if (thread != NULL) {
 8007234:	b148      	cbz	r0, 800724a <z_impl_k_sem_give+0x2e>
 8007236:	2200      	movs	r2, #0
 8007238:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 800723a:	f002 fcb1 	bl	8009ba0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 800723e:	4629      	mov	r1, r5
 8007240:	4805      	ldr	r0, [pc, #20]	; (8007258 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 8007242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 8007246:	f000 b98b 	b.w	8007560 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800724a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800724e:	429a      	cmp	r2, r3
 8007250:	bf18      	it	ne
 8007252:	3301      	addne	r3, #1
 8007254:	60a3      	str	r3, [r4, #8]
}
 8007256:	e7f2      	b.n	800723e <z_impl_k_sem_give+0x22>
 8007258:	2000113e 	.word	0x2000113e

0800725c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 800725c:	b513      	push	{r0, r1, r4, lr}
 800725e:	f04f 0410 	mov.w	r4, #16
 8007262:	f3ef 8111 	mrs	r1, BASEPRI
 8007266:	f384 8812 	msr	BASEPRI_MAX, r4
 800726a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 800726e:	6884      	ldr	r4, [r0, #8]
 8007270:	b144      	cbz	r4, 8007284 <z_impl_k_sem_take+0x28>
		sem->count--;
 8007272:	3c01      	subs	r4, #1
 8007274:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 8007276:	f381 8811 	msr	BASEPRI, r1
 800727a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 800727e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 8007280:	b002      	add	sp, #8
 8007282:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8007284:	ea52 0403 	orrs.w	r4, r2, r3
 8007288:	d106      	bne.n	8007298 <z_impl_k_sem_take+0x3c>
 800728a:	f381 8811 	msr	BASEPRI, r1
 800728e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 8007292:	f06f 000f 	mvn.w	r0, #15
 8007296:	e7f3      	b.n	8007280 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8007298:	e9cd 2300 	strd	r2, r3, [sp]
 800729c:	4602      	mov	r2, r0
 800729e:	4802      	ldr	r0, [pc, #8]	; (80072a8 <z_impl_k_sem_take+0x4c>)
 80072a0:	f000 fab2 	bl	8007808 <z_pend_curr>
	return ret;
 80072a4:	e7ec      	b.n	8007280 <z_impl_k_sem_take+0x24>
 80072a6:	bf00      	nop
 80072a8:	2000113e 	.word	0x2000113e

080072ac <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
 80072ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
 80072b0:	4e47      	ldr	r6, [pc, #284]	; (80073d0 <work_queue_main+0x124>)
 80072b2:	b085      	sub	sp, #20
 80072b4:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
 80072b6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80072ba:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
 80072be:	f04f 0310 	mov.w	r3, #16
 80072c2:	f3ef 8711 	mrs	r7, BASEPRI
 80072c6:	f383 8812 	msr	BASEPRI_MAX, r3
 80072ca:	f3bf 8f6f 	isb	sy
 80072ce:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
 80072d2:	b98d      	cbnz	r5, 80072f8 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
 80072d4:	2102      	movs	r1, #2
 80072d6:	f104 0098 	add.w	r0, r4, #152	; 0x98
 80072da:	f002 fbfb 	bl	8009ad4 <flag_test_and_clear>
 80072de:	2800      	cmp	r0, #0
 80072e0:	d135      	bne.n	800734e <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
 80072e2:	2300      	movs	r3, #0
 80072e4:	e9cd 8900 	strd	r8, r9, [sp]
 80072e8:	9302      	str	r3, [sp, #8]
 80072ea:	f104 0288 	add.w	r2, r4, #136	; 0x88
 80072ee:	4639      	mov	r1, r7
 80072f0:	4838      	ldr	r0, [pc, #224]	; (80073d4 <work_queue_main+0x128>)
 80072f2:	f000 fc47 	bl	8007b84 <z_sched_wait>
			continue;
 80072f6:	e7e2      	b.n	80072be <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 80072f8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
 80072fc:	682b      	ldr	r3, [r5, #0]
	list->head = node;
 80072fe:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 8007302:	4295      	cmp	r5, r2
 8007304:	d101      	bne.n	800730a <work_queue_main+0x5e>
	list->tail = node;
 8007306:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
 800730a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800730e:	f043 0302 	orr.w	r3, r3, #2
 8007312:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
 8007316:	68eb      	ldr	r3, [r5, #12]
 8007318:	f023 0304 	bic.w	r3, r3, #4
 800731c:	f043 0301 	orr.w	r3, r3, #1
 8007320:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
 8007322:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
 8007324:	f387 8811 	msr	BASEPRI, r7
 8007328:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
 800732c:	4628      	mov	r0, r5
 800732e:	4798      	blx	r3
	__asm__ volatile(
 8007330:	f04f 0310 	mov.w	r3, #16
 8007334:	f3ef 8b11 	mrs	fp, BASEPRI
 8007338:	f383 8812 	msr	BASEPRI_MAX, r3
 800733c:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 8007340:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8007342:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
 8007344:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8007348:	d40b      	bmi.n	8007362 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
 800734a:	60ea      	str	r2, [r5, #12]
 800734c:	e00e      	b.n	800736c <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 800734e:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 8007352:	2200      	movs	r2, #0
 8007354:	2101      	movs	r1, #1
 8007356:	4628      	mov	r0, r5
 8007358:	f002 fc96 	bl	8009c88 <z_sched_wake>
 800735c:	2800      	cmp	r0, #0
 800735e:	d1f8      	bne.n	8007352 <work_queue_main+0xa6>
 8007360:	e7bf      	b.n	80072e2 <work_queue_main+0x36>
	return list->head;
 8007362:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
 8007364:	f023 0303 	bic.w	r3, r3, #3
 8007368:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800736a:	b970      	cbnz	r0, 800738a <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
 800736c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8007370:	f023 0302 	bic.w	r3, r3, #2
 8007374:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
 8007378:	f38b 8811 	msr	BASEPRI, fp
 800737c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
 8007380:	05d8      	lsls	r0, r3, #23
 8007382:	d49c      	bmi.n	80072be <work_queue_main+0x12>
	z_impl_k_yield();
 8007384:	f000 faf6 	bl	8007974 <z_impl_k_yield>
}
 8007388:	e799      	b.n	80072be <work_queue_main+0x12>
	return node->next;
 800738a:	2700      	movs	r7, #0
 800738c:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
 8007390:	463b      	mov	r3, r7
		if (wc->work == work) {
 8007392:	6842      	ldr	r2, [r0, #4]
 8007394:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 8007396:	4601      	mov	r1, r0
		if (wc->work == work) {
 8007398:	d10c      	bne.n	80073b4 <work_queue_main+0x108>
	return node->next;
 800739a:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 800739c:	b997      	cbnz	r7, 80073c4 <work_queue_main+0x118>
 800739e:	6872      	ldr	r2, [r6, #4]
	list->head = node;
 80073a0:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
 80073a2:	4282      	cmp	r2, r0
 80073a4:	d100      	bne.n	80073a8 <work_queue_main+0xfc>
	list->tail = node;
 80073a6:	6071      	str	r1, [r6, #4]
	parent->next = child;
 80073a8:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
 80073ac:	f7ff ff36 	bl	800721c <z_impl_k_sem_give>
}
 80073b0:	4639      	mov	r1, r7
 80073b2:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 80073b4:	f1ba 0f00 	cmp.w	sl, #0
 80073b8:	d0d8      	beq.n	800736c <work_queue_main+0xc0>
	return node->next;
 80073ba:	4650      	mov	r0, sl
 80073bc:	460f      	mov	r7, r1
 80073be:	f8da a000 	ldr.w	sl, [sl]
 80073c2:	e7e6      	b.n	8007392 <work_queue_main+0xe6>
	return list->tail;
 80073c4:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
 80073c6:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
 80073c8:	4290      	cmp	r0, r2
	list->tail = node;
 80073ca:	bf08      	it	eq
 80073cc:	6077      	streq	r7, [r6, #4]
}
 80073ce:	e7eb      	b.n	80073a8 <work_queue_main+0xfc>
 80073d0:	20001104 	.word	0x20001104
 80073d4:	2000113e 	.word	0x2000113e

080073d8 <submit_to_queue_locked>:
{
 80073d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
 80073da:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 80073dc:	079a      	lsls	r2, r3, #30
{
 80073de:	4604      	mov	r4, r0
 80073e0:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 80073e2:	f3c3 0540 	ubfx	r5, r3, #1, #1
 80073e6:	d41f      	bmi.n	8007428 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 80073e8:	075f      	lsls	r7, r3, #29
 80073ea:	d41f      	bmi.n	800742c <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
 80073ec:	680a      	ldr	r2, [r1, #0]
 80073ee:	b90a      	cbnz	r2, 80073f4 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
 80073f0:	6882      	ldr	r2, [r0, #8]
 80073f2:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 80073f4:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
 80073f6:	bf44      	itt	mi
 80073f8:	68a3      	ldrmi	r3, [r4, #8]
 80073fa:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
 80073fc:	6837      	ldr	r7, [r6, #0]
			ret = 2;
 80073fe:	bf4c      	ite	mi
 8007400:	2502      	movmi	r5, #2
		ret = 1;
 8007402:	2501      	movpl	r5, #1
	if (queue == NULL) {
 8007404:	b37f      	cbz	r7, 8007466 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 8007406:	4b1b      	ldr	r3, [pc, #108]	; (8007474 <submit_to_queue_locked+0x9c>)
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	42bb      	cmp	r3, r7
 800740c:	d111      	bne.n	8007432 <submit_to_queue_locked+0x5a>
 800740e:	f002 fb36 	bl	8009a7e <k_is_in_isr>
 8007412:	f080 0001 	eor.w	r0, r0, #1
 8007416:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
 8007418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800741c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
 800741e:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 8007422:	d523      	bpl.n	800746c <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
 8007424:	b13a      	cbz	r2, 8007436 <submit_to_queue_locked+0x5e>
 8007426:	b940      	cbnz	r0, 800743a <submit_to_queue_locked+0x62>
		ret = -EBUSY;
 8007428:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
 800742c:	2300      	movs	r3, #0
 800742e:	6033      	str	r3, [r6, #0]
	return ret;
 8007430:	e013      	b.n	800745a <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 8007432:	2000      	movs	r0, #0
 8007434:	e7f0      	b.n	8007418 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
 8007436:	071b      	lsls	r3, r3, #28
 8007438:	d4f6      	bmi.n	8007428 <submit_to_queue_locked+0x50>
	parent->next = child;
 800743a:	2300      	movs	r3, #0
 800743c:	6023      	str	r3, [r4, #0]
	return list->tail;
 800743e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
 8007442:	b963      	cbnz	r3, 800745e <submit_to_queue_locked+0x86>
	list->head = node;
 8007444:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
 8007448:	4638      	mov	r0, r7
 800744a:	f002 fb4e 	bl	8009aea <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
 800744e:	68e3      	ldr	r3, [r4, #12]
 8007450:	f043 0304 	orr.w	r3, r3, #4
 8007454:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
 8007456:	6833      	ldr	r3, [r6, #0]
 8007458:	60a3      	str	r3, [r4, #8]
}
 800745a:	4628      	mov	r0, r5
 800745c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
 800745e:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8007460:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
 8007464:	e7f0      	b.n	8007448 <submit_to_queue_locked+0x70>
		return -EINVAL;
 8007466:	f06f 0515 	mvn.w	r5, #21
 800746a:	e7df      	b.n	800742c <submit_to_queue_locked+0x54>
		ret = -ENODEV;
 800746c:	f06f 0512 	mvn.w	r5, #18
 8007470:	e7dc      	b.n	800742c <submit_to_queue_locked+0x54>
 8007472:	bf00      	nop
 8007474:	200010e0 	.word	0x200010e0

08007478 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
 8007478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800747a:	b089      	sub	sp, #36	; 0x24
 800747c:	4604      	mov	r4, r0
	list->head = NULL;
 800747e:	2000      	movs	r0, #0
	list->tail = NULL;
 8007480:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
 8007484:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007486:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
 800748a:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
 800748e:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8007492:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
 8007496:	b31d      	cbz	r5, 80074e0 <k_work_queue_start+0x68>
 8007498:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
 800749a:	2800      	cmp	r0, #0
 800749c:	f240 1001 	movw	r0, #257	; 0x101
 80074a0:	bf08      	it	eq
 80074a2:	2001      	moveq	r0, #1
	*flagp = flags;
 80074a4:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 80074a8:	2000      	movs	r0, #0
 80074aa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80074ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80074b2:	e9cd 3003 	strd	r3, r0, [sp, #12]
 80074b6:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80074ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80074be:	4b09      	ldr	r3, [pc, #36]	; (80074e4 <k_work_queue_start+0x6c>)
 80074c0:	9400      	str	r4, [sp, #0]
 80074c2:	4620      	mov	r0, r4
 80074c4:	f7ff fd78 	bl	8006fb8 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
 80074c8:	b125      	cbz	r5, 80074d4 <k_work_queue_start+0x5c>
 80074ca:	6829      	ldr	r1, [r5, #0]
 80074cc:	b111      	cbz	r1, 80074d4 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
 80074ce:	4620      	mov	r0, r4
 80074d0:	f002 fadb 	bl	8009a8a <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 80074d4:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
 80074d6:	b009      	add	sp, #36	; 0x24
 80074d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80074dc:	f002 bad8 	b.w	8009a90 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 80074e0:	2001      	movs	r0, #1
 80074e2:	e7df      	b.n	80074a4 <k_work_queue_start+0x2c>
 80074e4:	080072ad 	.word	0x080072ad

080074e8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
 80074e8:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
 80074ea:	4d07      	ldr	r5, [pc, #28]	; (8007508 <z_reset_time_slice+0x20>)
 80074ec:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
 80074ee:	b154      	cbz	r4, 8007506 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
 80074f0:	f7fe fd68 	bl	8005fc4 <sys_clock_elapsed>
 80074f4:	4b05      	ldr	r3, [pc, #20]	; (800750c <z_reset_time_slice+0x24>)
 80074f6:	4404      	add	r4, r0
 80074f8:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
 80074fa:	6828      	ldr	r0, [r5, #0]
 80074fc:	2100      	movs	r1, #0
	}
}
 80074fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
 8007502:	f002 bbf4 	b.w	8009cee <z_set_timeout_expiry>
}
 8007506:	bd38      	pop	{r3, r4, r5, pc}
 8007508:	20001114 	.word	0x20001114
 800750c:	200010e0 	.word	0x200010e0

08007510 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
 8007510:	b510      	push	{r4, lr}
	__asm__ volatile(
 8007512:	f04f 0310 	mov.w	r3, #16
 8007516:	f3ef 8411 	mrs	r4, BASEPRI
 800751a:	f383 8812 	msr	BASEPRI_MAX, r3
 800751e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 8007522:	4a0c      	ldr	r2, [pc, #48]	; (8007554 <k_sched_time_slice_set+0x44>)
 8007524:	2300      	movs	r3, #0
 8007526:	6113      	str	r3, [r2, #16]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 8007528:	2800      	cmp	r0, #0
			return ((uint32_t)t) * (to_hz / from_hz);
 800752a:	f04f 030a 	mov.w	r3, #10
 800752e:	fb00 f303 	mul.w	r3, r0, r3
 8007532:	4809      	ldr	r0, [pc, #36]	; (8007558 <k_sched_time_slice_set+0x48>)
 8007534:	dc0a      	bgt.n	800754c <k_sched_time_slice_set+0x3c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
 8007536:	6003      	str	r3, [r0, #0]
		}
		slice_max_prio = prio;
 8007538:	4b08      	ldr	r3, [pc, #32]	; (800755c <k_sched_time_slice_set+0x4c>)
		z_reset_time_slice(_current);
 800753a:	6890      	ldr	r0, [r2, #8]
		slice_max_prio = prio;
 800753c:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
 800753e:	f7ff ffd3 	bl	80074e8 <z_reset_time_slice>
	__asm__ volatile(
 8007542:	f384 8811 	msr	BASEPRI, r4
 8007546:	f3bf 8f6f 	isb	sy
	}
}
 800754a:	bd10      	pop	{r4, pc}
			slice_ticks = MAX(2, slice_ticks);
 800754c:	2b02      	cmp	r3, #2
 800754e:	bfb8      	it	lt
 8007550:	2302      	movlt	r3, #2
 8007552:	e7f0      	b.n	8007536 <k_sched_time_slice_set+0x26>
 8007554:	200010e0 	.word	0x200010e0
 8007558:	20001114 	.word	0x20001114
 800755c:	20001110 	.word	0x20001110

08007560 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8007560:	b949      	cbnz	r1, 8007576 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007562:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 8007566:	b930      	cbnz	r0, 8007576 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 8007568:	4b05      	ldr	r3, [pc, #20]	; (8007580 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 800756a:	699a      	ldr	r2, [r3, #24]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	429a      	cmp	r2, r3
 8007570:	d001      	beq.n	8007576 <z_reschedule+0x16>
	ret = arch_swap(key);
 8007572:	f7fd b907 	b.w	8004784 <arch_swap>
 8007576:	f381 8811 	msr	BASEPRI, r1
 800757a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
 800757e:	4770      	bx	lr
 8007580:	200010e0 	.word	0x200010e0

08007584 <k_sched_lock>:
	__asm__ volatile(
 8007584:	f04f 0310 	mov.w	r3, #16
 8007588:	f3ef 8111 	mrs	r1, BASEPRI
 800758c:	f383 8812 	msr	BASEPRI_MAX, r3
 8007590:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
 8007594:	4b04      	ldr	r3, [pc, #16]	; (80075a8 <k_sched_lock+0x24>)
 8007596:	689a      	ldr	r2, [r3, #8]
 8007598:	7bd3      	ldrb	r3, [r2, #15]
 800759a:	3b01      	subs	r3, #1
 800759c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 800759e:	f381 8811 	msr	BASEPRI, r1
 80075a2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 80075a6:	4770      	bx	lr
 80075a8:	200010e0 	.word	0x200010e0

080075ac <update_cache>:
{
 80075ac:	b538      	push	{r3, r4, r5, lr}
 80075ae:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
 80075b0:	480c      	ldr	r0, [pc, #48]	; (80075e4 <update_cache+0x38>)
 80075b2:	4d0d      	ldr	r5, [pc, #52]	; (80075e8 <update_cache+0x3c>)
 80075b4:	f002 faee 	bl	8009b94 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 80075b8:	4604      	mov	r4, r0
 80075ba:	b900      	cbnz	r0, 80075be <update_cache+0x12>
 80075bc:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 80075be:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 80075c0:	b94a      	cbnz	r2, 80075d6 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
 80075c2:	7b5a      	ldrb	r2, [r3, #13]
 80075c4:	06d2      	lsls	r2, r2, #27
 80075c6:	d106      	bne.n	80075d6 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 80075c8:	69a2      	ldr	r2, [r4, #24]
 80075ca:	b922      	cbnz	r2, 80075d6 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
 80075cc:	89da      	ldrh	r2, [r3, #14]
 80075ce:	2a7f      	cmp	r2, #127	; 0x7f
 80075d0:	d901      	bls.n	80075d6 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
 80075d2:	61ab      	str	r3, [r5, #24]
}
 80075d4:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 80075d6:	429c      	cmp	r4, r3
 80075d8:	d002      	beq.n	80075e0 <update_cache+0x34>
			z_reset_time_slice(thread);
 80075da:	4620      	mov	r0, r4
 80075dc:	f7ff ff84 	bl	80074e8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 80075e0:	61ac      	str	r4, [r5, #24]
}
 80075e2:	e7f7      	b.n	80075d4 <update_cache+0x28>
 80075e4:	200010fc 	.word	0x200010fc
 80075e8:	200010e0 	.word	0x200010e0

080075ec <move_thread_to_end_of_prio_q>:
{
 80075ec:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 80075ee:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 80075f2:	7b43      	ldrb	r3, [r0, #13]
 80075f4:	2a00      	cmp	r2, #0
{
 80075f6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 80075f8:	da04      	bge.n	8007604 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80075fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075fe:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 8007600:	f002 faa0 	bl	8009b44 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 8007604:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
 8007606:	4a15      	ldr	r2, [pc, #84]	; (800765c <move_thread_to_end_of_prio_q+0x70>)
 8007608:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800760c:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 800760e:	e9d2 3407 	ldrd	r3, r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007612:	f102 051c 	add.w	r5, r2, #28
 8007616:	42ab      	cmp	r3, r5
 8007618:	d01b      	beq.n	8007652 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800761a:	b1d3      	cbz	r3, 8007652 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
 800761c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 8007620:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
 8007624:	4286      	cmp	r6, r0
 8007626:	d00f      	beq.n	8007648 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
 8007628:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 800762a:	2800      	cmp	r0, #0
 800762c:	dd0c      	ble.n	8007648 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 800762e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 8007630:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 8007634:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 8007636:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 8007638:	6890      	ldr	r0, [r2, #8]
 800763a:	1a43      	subs	r3, r0, r1
 800763c:	4258      	negs	r0, r3
}
 800763e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 8007642:	4158      	adcs	r0, r3
 8007644:	f7ff bfb2 	b.w	80075ac <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8007648:	42a3      	cmp	r3, r4
 800764a:	d002      	beq.n	8007652 <move_thread_to_end_of_prio_q+0x66>
 800764c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1e6      	bne.n	8007620 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
 8007652:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
 8007656:	6021      	str	r1, [r4, #0]
	list->tail = node;
 8007658:	6211      	str	r1, [r2, #32]
}
 800765a:	e7ed      	b.n	8007638 <move_thread_to_end_of_prio_q+0x4c>
 800765c:	200010e0 	.word	0x200010e0

08007660 <z_time_slice>:
{
 8007660:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8007662:	f04f 0310 	mov.w	r3, #16
 8007666:	f3ef 8511 	mrs	r5, BASEPRI
 800766a:	f383 8812 	msr	BASEPRI_MAX, r3
 800766e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 8007672:	4b17      	ldr	r3, [pc, #92]	; (80076d0 <z_time_slice+0x70>)
 8007674:	4a17      	ldr	r2, [pc, #92]	; (80076d4 <z_time_slice+0x74>)
 8007676:	689c      	ldr	r4, [r3, #8]
 8007678:	6811      	ldr	r1, [r2, #0]
 800767a:	428c      	cmp	r4, r1
 800767c:	d107      	bne.n	800768e <z_time_slice+0x2e>
	z_reset_time_slice(curr);
 800767e:	4620      	mov	r0, r4
 8007680:	f7ff ff32 	bl	80074e8 <z_reset_time_slice>
	__asm__ volatile(
 8007684:	f385 8811 	msr	BASEPRI, r5
 8007688:	f3bf 8f6f 	isb	sy
}
 800768c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 800768e:	2100      	movs	r1, #0
 8007690:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
 8007692:	4a11      	ldr	r2, [pc, #68]	; (80076d8 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
 8007694:	6812      	ldr	r2, [r2, #0]
 8007696:	b1c2      	cbz	r2, 80076ca <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 8007698:	89e2      	ldrh	r2, [r4, #14]
 800769a:	2a7f      	cmp	r2, #127	; 0x7f
 800769c:	d815      	bhi.n	80076ca <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
 800769e:	7b62      	ldrb	r2, [r4, #13]
 80076a0:	06d2      	lsls	r2, r2, #27
 80076a2:	d112      	bne.n	80076ca <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 80076a4:	4a0d      	ldr	r2, [pc, #52]	; (80076dc <z_time_slice+0x7c>)
 80076a6:	f994 100e 	ldrsb.w	r1, [r4, #14]
 80076aa:	6812      	ldr	r2, [r2, #0]
 80076ac:	4291      	cmp	r1, r2
 80076ae:	db0c      	blt.n	80076ca <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
 80076b0:	4a0b      	ldr	r2, [pc, #44]	; (80076e0 <z_time_slice+0x80>)
 80076b2:	4294      	cmp	r4, r2
 80076b4:	d009      	beq.n	80076ca <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
 80076b6:	691a      	ldr	r2, [r3, #16]
 80076b8:	4282      	cmp	r2, r0
 80076ba:	dc03      	bgt.n	80076c4 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
 80076bc:	4620      	mov	r0, r4
 80076be:	f7ff ff95 	bl	80075ec <move_thread_to_end_of_prio_q>
 80076c2:	e7dc      	b.n	800767e <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
 80076c4:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
 80076c6:	611a      	str	r2, [r3, #16]
 80076c8:	e7dc      	b.n	8007684 <z_time_slice+0x24>
 80076ca:	2200      	movs	r2, #0
 80076cc:	e7fb      	b.n	80076c6 <z_time_slice+0x66>
 80076ce:	bf00      	nop
 80076d0:	200010e0 	.word	0x200010e0
 80076d4:	2000110c 	.word	0x2000110c
 80076d8:	20001114 	.word	0x20001114
 80076dc:	20001110 	.word	0x20001110
 80076e0:	200003c8 	.word	0x200003c8

080076e4 <ready_thread>:
{
 80076e4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 80076e6:	f990 200d 	ldrsb.w	r2, [r0, #13]
 80076ea:	7b43      	ldrb	r3, [r0, #13]
 80076ec:	2a00      	cmp	r2, #0
 80076ee:	db2a      	blt.n	8007746 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 80076f0:	06da      	lsls	r2, r3, #27
 80076f2:	d128      	bne.n	8007746 <ready_thread+0x62>
 80076f4:	6982      	ldr	r2, [r0, #24]
 80076f6:	bb32      	cbnz	r2, 8007746 <ready_thread+0x62>
	return list->head == list;
 80076f8:	4a14      	ldr	r2, [pc, #80]	; (800774c <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
 80076fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80076fe:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
 8007700:	e9d2 3407 	ldrd	r3, r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007704:	f102 051c 	add.w	r5, r2, #28
 8007708:	42ab      	cmp	r3, r5
 800770a:	d017      	beq.n	800773c <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800770c:	b1b3      	cbz	r3, 800773c <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
 800770e:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 8007712:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 8007716:	428e      	cmp	r6, r1
 8007718:	d00b      	beq.n	8007732 <ready_thread+0x4e>
		return b2 - b1;
 800771a:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 800771c:	2900      	cmp	r1, #0
 800771e:	dd08      	ble.n	8007732 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
 8007720:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8007722:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 8007726:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 8007728:	6058      	str	r0, [r3, #4]
}
 800772a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 800772c:	2000      	movs	r0, #0
 800772e:	f7ff bf3d 	b.w	80075ac <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8007732:	42a3      	cmp	r3, r4
 8007734:	d002      	beq.n	800773c <ready_thread+0x58>
 8007736:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1ea      	bne.n	8007712 <ready_thread+0x2e>
	node->prev = tail;
 800773c:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
 8007740:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8007742:	6210      	str	r0, [r2, #32]
}
 8007744:	e7f1      	b.n	800772a <ready_thread+0x46>
}
 8007746:	bc70      	pop	{r4, r5, r6}
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	200010e0 	.word	0x200010e0

08007750 <z_sched_start>:
{
 8007750:	b510      	push	{r4, lr}
	__asm__ volatile(
 8007752:	f04f 0210 	mov.w	r2, #16
 8007756:	f3ef 8411 	mrs	r4, BASEPRI
 800775a:	f382 8812 	msr	BASEPRI_MAX, r2
 800775e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 8007762:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 8007764:	0751      	lsls	r1, r2, #29
 8007766:	d404      	bmi.n	8007772 <z_sched_start+0x22>
	__asm__ volatile(
 8007768:	f384 8811 	msr	BASEPRI, r4
 800776c:	f3bf 8f6f 	isb	sy
}
 8007770:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8007772:	f022 0204 	bic.w	r2, r2, #4
 8007776:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 8007778:	f7ff ffb4 	bl	80076e4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 800777c:	4621      	mov	r1, r4
 800777e:	4802      	ldr	r0, [pc, #8]	; (8007788 <z_sched_start+0x38>)
}
 8007780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 8007784:	f7ff beec 	b.w	8007560 <z_reschedule>
 8007788:	2000113e 	.word	0x2000113e

0800778c <unready_thread>:
{
 800778c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 800778e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 8007792:	7b43      	ldrb	r3, [r0, #13]
 8007794:	2a00      	cmp	r2, #0
{
 8007796:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8007798:	da04      	bge.n	80077a4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800779a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800779e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80077a0:	f002 f9d0 	bl	8009b44 <sys_dlist_remove>
	update_cache(thread == _current);
 80077a4:	4b04      	ldr	r3, [pc, #16]	; (80077b8 <unready_thread+0x2c>)
 80077a6:	6898      	ldr	r0, [r3, #8]
 80077a8:	1a43      	subs	r3, r0, r1
 80077aa:	4258      	negs	r0, r3
 80077ac:	4158      	adcs	r0, r3
}
 80077ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 80077b2:	f7ff befb 	b.w	80075ac <update_cache>
 80077b6:	bf00      	nop
 80077b8:	200010e0 	.word	0x200010e0

080077bc <pend>:
{
 80077bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077c0:	4606      	mov	r6, r0
 80077c2:	4615      	mov	r5, r2
 80077c4:	461c      	mov	r4, r3
	__asm__ volatile(
 80077c6:	f04f 0310 	mov.w	r3, #16
 80077ca:	f3ef 8711 	mrs	r7, BASEPRI
 80077ce:	f383 8812 	msr	BASEPRI_MAX, r3
 80077d2:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
 80077d6:	f002 fa15 	bl	8009c04 <add_to_waitq_locked>
	__asm__ volatile(
 80077da:	f387 8811 	msr	BASEPRI, r7
 80077de:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80077e2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80077e6:	bf08      	it	eq
 80077e8:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 80077ec:	d008      	beq.n	8007800 <pend+0x44>
 80077ee:	462a      	mov	r2, r5
 80077f0:	4623      	mov	r3, r4
 80077f2:	f106 0018 	add.w	r0, r6, #24
 80077f6:	4903      	ldr	r1, [pc, #12]	; (8007804 <pend+0x48>)
}
 80077f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077fc:	f000 ba38 	b.w	8007c70 <z_add_timeout>
 8007800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007804:	08009bc1 	.word	0x08009bc1

08007808 <z_pend_curr>:
{
 8007808:	b510      	push	{r4, lr}
	pending_current = _current;
 800780a:	4b07      	ldr	r3, [pc, #28]	; (8007828 <z_pend_curr+0x20>)
 800780c:	6898      	ldr	r0, [r3, #8]
 800780e:	4b07      	ldr	r3, [pc, #28]	; (800782c <z_pend_curr+0x24>)
{
 8007810:	460c      	mov	r4, r1
	pending_current = _current;
 8007812:	6018      	str	r0, [r3, #0]
{
 8007814:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
 8007816:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800781a:	f7ff ffcf 	bl	80077bc <pend>
 800781e:	4620      	mov	r0, r4
}
 8007820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007824:	f7fc bfae 	b.w	8004784 <arch_swap>
 8007828:	200010e0 	.word	0x200010e0
 800782c:	2000110c 	.word	0x2000110c

08007830 <z_set_prio>:
{
 8007830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007832:	4604      	mov	r4, r0
	__asm__ volatile(
 8007834:	f04f 0310 	mov.w	r3, #16
 8007838:	f3ef 8611 	mrs	r6, BASEPRI
 800783c:	f383 8812 	msr	BASEPRI_MAX, r3
 8007840:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
 8007844:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8007846:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
 8007848:	b249      	sxtb	r1, r1
 800784a:	d133      	bne.n	80078b4 <z_set_prio+0x84>
		if (need_sched) {
 800784c:	6982      	ldr	r2, [r0, #24]
 800784e:	bb8a      	cbnz	r2, 80078b4 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8007850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007854:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8007856:	f002 f975 	bl	8009b44 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 800785a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
 800785c:	4a17      	ldr	r2, [pc, #92]	; (80078bc <z_set_prio+0x8c>)
				thread->base.prio = prio;
 800785e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 8007860:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007864:	7343      	strb	r3, [r0, #13]
 8007866:	4610      	mov	r0, r2
 8007868:	f850 3f1c 	ldr.w	r3, [r0, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800786c:	4283      	cmp	r3, r0
 800786e:	d01b      	beq.n	80078a8 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8007870:	b1d3      	cbz	r3, 80078a8 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
 8007872:	6a17      	ldr	r7, [r2, #32]
	int32_t b2 = thread_2->base.prio;
 8007874:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
 8007878:	42a9      	cmp	r1, r5
 800787a:	d010      	beq.n	800789e <z_set_prio+0x6e>
		return b2 - b1;
 800787c:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 800787e:	2d00      	cmp	r5, #0
 8007880:	dd0d      	ble.n	800789e <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
 8007882:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8007884:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8007888:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 800788a:	605c      	str	r4, [r3, #4]
			update_cache(1);
 800788c:	2001      	movs	r0, #1
 800788e:	f7ff fe8d 	bl	80075ac <update_cache>
 8007892:	2001      	movs	r0, #1
	__asm__ volatile(
 8007894:	f386 8811 	msr	BASEPRI, r6
 8007898:	f3bf 8f6f 	isb	sy
}
 800789c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 800789e:	42bb      	cmp	r3, r7
 80078a0:	d002      	beq.n	80078a8 <z_set_prio+0x78>
 80078a2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1e5      	bne.n	8007874 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
 80078a8:	6a13      	ldr	r3, [r2, #32]
	node->prev = tail;
 80078aa:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
 80078ae:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80078b0:	6214      	str	r4, [r2, #32]
}
 80078b2:	e7eb      	b.n	800788c <z_set_prio+0x5c>
			thread->base.prio = prio;
 80078b4:	73a1      	strb	r1, [r4, #14]
 80078b6:	2000      	movs	r0, #0
 80078b8:	e7ec      	b.n	8007894 <z_set_prio+0x64>
 80078ba:	bf00      	nop
 80078bc:	200010e0 	.word	0x200010e0

080078c0 <z_impl_k_thread_suspend>:
{
 80078c0:	b570      	push	{r4, r5, r6, lr}
 80078c2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 80078c4:	3018      	adds	r0, #24
 80078c6:	f002 f9fc 	bl	8009cc2 <z_abort_timeout>
	__asm__ volatile(
 80078ca:	f04f 0310 	mov.w	r3, #16
 80078ce:	f3ef 8611 	mrs	r6, BASEPRI
 80078d2:	f383 8812 	msr	BASEPRI_MAX, r3
 80078d6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 80078da:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
 80078de:	7b63      	ldrb	r3, [r4, #13]
 80078e0:	2a00      	cmp	r2, #0
 80078e2:	da05      	bge.n	80078f0 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80078e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078e8:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80078ea:	4620      	mov	r0, r4
 80078ec:	f002 f92a 	bl	8009b44 <sys_dlist_remove>
		update_cache(thread == _current);
 80078f0:	4d0b      	ldr	r5, [pc, #44]	; (8007920 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 80078f2:	7b63      	ldrb	r3, [r4, #13]
 80078f4:	68a8      	ldr	r0, [r5, #8]
 80078f6:	f043 0310 	orr.w	r3, r3, #16
 80078fa:	7363      	strb	r3, [r4, #13]
 80078fc:	1b03      	subs	r3, r0, r4
 80078fe:	4258      	negs	r0, r3
 8007900:	4158      	adcs	r0, r3
 8007902:	f7ff fe53 	bl	80075ac <update_cache>
	__asm__ volatile(
 8007906:	f386 8811 	msr	BASEPRI, r6
 800790a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 800790e:	68ab      	ldr	r3, [r5, #8]
 8007910:	42a3      	cmp	r3, r4
 8007912:	d103      	bne.n	800791c <z_impl_k_thread_suspend+0x5c>
}
 8007914:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 8007918:	f002 b932 	b.w	8009b80 <z_reschedule_unlocked>
}
 800791c:	bd70      	pop	{r4, r5, r6, pc}
 800791e:	bf00      	nop
 8007920:	200010e0 	.word	0x200010e0

08007924 <k_sched_unlock>:
{
 8007924:	b510      	push	{r4, lr}
	__asm__ volatile(
 8007926:	f04f 0310 	mov.w	r3, #16
 800792a:	f3ef 8411 	mrs	r4, BASEPRI
 800792e:	f383 8812 	msr	BASEPRI_MAX, r3
 8007932:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8007936:	4b08      	ldr	r3, [pc, #32]	; (8007958 <k_sched_unlock+0x34>)
 8007938:	689a      	ldr	r2, [r3, #8]
 800793a:	7bd3      	ldrb	r3, [r2, #15]
 800793c:	3301      	adds	r3, #1
 800793e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8007940:	2000      	movs	r0, #0
 8007942:	f7ff fe33 	bl	80075ac <update_cache>
	__asm__ volatile(
 8007946:	f384 8811 	msr	BASEPRI, r4
 800794a:	f3bf 8f6f 	isb	sy
}
 800794e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8007952:	f002 b915 	b.w	8009b80 <z_reschedule_unlocked>
 8007956:	bf00      	nop
 8007958:	200010e0 	.word	0x200010e0

0800795c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 800795c:	4b04      	ldr	r3, [pc, #16]	; (8007970 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 800795e:	2100      	movs	r1, #0
 8007960:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
 8007964:	e9c3 2207 	strd	r2, r2, [r3, #28]
 8007968:	4608      	mov	r0, r1
 800796a:	f7ff bdd1 	b.w	8007510 <k_sched_time_slice_set>
 800796e:	bf00      	nop
 8007970:	200010e0 	.word	0x200010e0

08007974 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
 8007974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 8007976:	f04f 0310 	mov.w	r3, #16
 800797a:	f3ef 8511 	mrs	r5, BASEPRI
 800797e:	f383 8812 	msr	BASEPRI_MAX, r3
 8007982:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 8007986:	491a      	ldr	r1, [pc, #104]	; (80079f0 <z_impl_k_yield+0x7c>)
 8007988:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800798a:	7b43      	ldrb	r3, [r0, #13]
 800798c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007990:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8007992:	f002 f8d7 	bl	8009b44 <sys_dlist_remove>
	}
	queue_thread(_current);
 8007996:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 8007998:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
 800799a:	4608      	mov	r0, r1
 800799c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079a0:	735a      	strb	r2, [r3, #13]
 80079a2:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80079a6:	4282      	cmp	r2, r0
 80079a8:	d01c      	beq.n	80079e4 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80079aa:	b1da      	cbz	r2, 80079e4 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
 80079ac:	6a0f      	ldr	r7, [r1, #32]
	int32_t b1 = thread_1->base.prio;
 80079ae:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 80079b2:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
 80079b6:	42a6      	cmp	r6, r4
 80079b8:	d00f      	beq.n	80079da <z_impl_k_yield+0x66>
		return b2 - b1;
 80079ba:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 80079bc:	2c00      	cmp	r4, #0
 80079be:	dd0c      	ble.n	80079da <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
 80079c0:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 80079c2:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 80079c6:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 80079c8:	6053      	str	r3, [r2, #4]
	update_cache(1);
 80079ca:	2001      	movs	r0, #1
 80079cc:	f7ff fdee 	bl	80075ac <update_cache>
 80079d0:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 80079d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80079d6:	f7fc bed5 	b.w	8004784 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 80079da:	42ba      	cmp	r2, r7
 80079dc:	d002      	beq.n	80079e4 <z_impl_k_yield+0x70>
 80079de:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80079e0:	2a00      	cmp	r2, #0
 80079e2:	d1e6      	bne.n	80079b2 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
 80079e4:	6a0a      	ldr	r2, [r1, #32]
	node->prev = tail;
 80079e6:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
 80079ea:	6013      	str	r3, [r2, #0]
	list->tail = node;
 80079ec:	620b      	str	r3, [r1, #32]
}
 80079ee:	e7ec      	b.n	80079ca <z_impl_k_yield+0x56>
 80079f0:	200010e0 	.word	0x200010e0

080079f4 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 80079f4:	ea50 0301 	orrs.w	r3, r0, r1
{
 80079f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079fc:	4605      	mov	r5, r0
 80079fe:	460e      	mov	r6, r1
	if (ticks == 0) {
 8007a00:	d103      	bne.n	8007a0a <z_tick_sleep+0x16>
	z_impl_k_yield();
 8007a02:	f7ff ffb7 	bl	8007974 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
 8007a06:	2000      	movs	r0, #0
 8007a08:	e033      	b.n	8007a72 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
 8007a0a:	f06f 0401 	mvn.w	r4, #1
 8007a0e:	1a24      	subs	r4, r4, r0
 8007a10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a14:	eb63 0301 	sbc.w	r3, r3, r1
 8007a18:	2c01      	cmp	r4, #1
 8007a1a:	f173 0300 	sbcs.w	r3, r3, #0
 8007a1e:	da02      	bge.n	8007a26 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8007a20:	f002 f97f 	bl	8009d22 <sys_clock_tick_get_32>
 8007a24:	1944      	adds	r4, r0, r5
 8007a26:	f04f 0310 	mov.w	r3, #16
 8007a2a:	f3ef 8811 	mrs	r8, BASEPRI
 8007a2e:	f383 8812 	msr	BASEPRI_MAX, r3
 8007a32:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 8007a36:	4f10      	ldr	r7, [pc, #64]	; (8007a78 <z_tick_sleep+0x84>)
 8007a38:	4b10      	ldr	r3, [pc, #64]	; (8007a7c <z_tick_sleep+0x88>)
 8007a3a:	68b8      	ldr	r0, [r7, #8]
 8007a3c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 8007a3e:	f7ff fea5 	bl	800778c <unready_thread>
	z_add_thread_timeout(_current, timeout);
 8007a42:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8007a44:	490e      	ldr	r1, [pc, #56]	; (8007a80 <z_tick_sleep+0x8c>)
 8007a46:	462a      	mov	r2, r5
 8007a48:	4633      	mov	r3, r6
 8007a4a:	3018      	adds	r0, #24
 8007a4c:	f000 f910 	bl	8007c70 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8007a50:	68ba      	ldr	r2, [r7, #8]
 8007a52:	7b53      	ldrb	r3, [r2, #13]
 8007a54:	f043 0310 	orr.w	r3, r3, #16
 8007a58:	7353      	strb	r3, [r2, #13]
 8007a5a:	4640      	mov	r0, r8
 8007a5c:	f7fc fe92 	bl	8004784 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 8007a60:	f002 f95f 	bl	8009d22 <sys_clock_tick_get_32>
 8007a64:	1a20      	subs	r0, r4, r0
 8007a66:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 8007a6a:	2801      	cmp	r0, #1
 8007a6c:	f173 0300 	sbcs.w	r3, r3, #0
 8007a70:	dbc9      	blt.n	8007a06 <z_tick_sleep+0x12>
}
 8007a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a76:	bf00      	nop
 8007a78:	200010e0 	.word	0x200010e0
 8007a7c:	2000110c 	.word	0x2000110c
 8007a80:	08009bc1 	.word	0x08009bc1

08007a84 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8007a84:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8007a88:	bf08      	it	eq
 8007a8a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 8007a8e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8007a90:	d106      	bne.n	8007aa0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 8007a92:	4b07      	ldr	r3, [pc, #28]	; (8007ab0 <z_impl_k_sleep+0x2c>)
 8007a94:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 8007a96:	f7ff ff13 	bl	80078c0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 8007a9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 8007a9e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 8007aa0:	f7ff ffa8 	bl	80079f4 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 8007aa4:	220a      	movs	r2, #10
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	17c1      	asrs	r1, r0, #31
 8007aaa:	f7f9 f81d 	bl	8000ae8 <__aeabi_uldivmod>
	return ret;
 8007aae:	e7f6      	b.n	8007a9e <z_impl_k_sleep+0x1a>
 8007ab0:	200010e0 	.word	0x200010e0

08007ab4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8007ab4:	4b01      	ldr	r3, [pc, #4]	; (8007abc <z_impl_z_current_get+0x8>)
 8007ab6:	6898      	ldr	r0, [r3, #8]
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	200010e0 	.word	0x200010e0

08007ac0 <z_impl_k_is_preempt_thread>:
 8007ac0:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
 8007ac4:	b93b      	cbnz	r3, 8007ad6 <z_impl_k_is_preempt_thread+0x16>
 8007ac6:	4b05      	ldr	r3, [pc, #20]	; (8007adc <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 8007ac8:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
 8007aca:	89d8      	ldrh	r0, [r3, #14]
 8007acc:	287f      	cmp	r0, #127	; 0x7f
 8007ace:	bf8c      	ite	hi
 8007ad0:	2000      	movhi	r0, #0
 8007ad2:	2001      	movls	r0, #1
 8007ad4:	4770      	bx	lr
 8007ad6:	2000      	movs	r0, #0
}
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	200010e0 	.word	0x200010e0

08007ae0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8007ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae4:	4604      	mov	r4, r0
 8007ae6:	f04f 0310 	mov.w	r3, #16
 8007aea:	f3ef 8611 	mrs	r6, BASEPRI
 8007aee:	f383 8812 	msr	BASEPRI_MAX, r3
 8007af2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8007af6:	7b43      	ldrb	r3, [r0, #13]
 8007af8:	071a      	lsls	r2, r3, #28
 8007afa:	d505      	bpl.n	8007b08 <z_thread_abort+0x28>
	__asm__ volatile(
 8007afc:	f386 8811 	msr	BASEPRI, r6
 8007b00:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8007b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8007b08:	f023 0220 	bic.w	r2, r3, #32
 8007b0c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 8007b10:	09d2      	lsrs	r2, r2, #7
 8007b12:	d120      	bne.n	8007b56 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8007b14:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 8007b16:	68a3      	ldr	r3, [r4, #8]
 8007b18:	b113      	cbz	r3, 8007b20 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	f002 f81a 	bl	8009b54 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 8007b20:	f104 0018 	add.w	r0, r4, #24
 8007b24:	f002 f8cd 	bl	8009cc2 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8007b28:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8007b2c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 8007b30:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007b32:	42bd      	cmp	r5, r7
 8007b34:	d000      	beq.n	8007b38 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8007b36:	b9b5      	cbnz	r5, 8007b66 <z_thread_abort+0x86>
		update_cache(1);
 8007b38:	2001      	movs	r0, #1
 8007b3a:	f7ff fd37 	bl	80075ac <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 8007b3e:	4b10      	ldr	r3, [pc, #64]	; (8007b80 <z_thread_abort+0xa0>)
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	42a3      	cmp	r3, r4
 8007b44:	d1da      	bne.n	8007afc <z_thread_abort+0x1c>
 8007b46:	f3ef 8305 	mrs	r3, IPSR
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1d6      	bne.n	8007afc <z_thread_abort+0x1c>
 8007b4e:	4630      	mov	r0, r6
 8007b50:	f7fc fe18 	bl	8004784 <arch_swap>
	return ret;
 8007b54:	e7d2      	b.n	8007afc <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8007b56:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8007b5a:	f043 0308 	orr.w	r3, r3, #8
 8007b5e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8007b60:	f001 fff0 	bl	8009b44 <sys_dlist_remove>
}
 8007b64:	e7d7      	b.n	8007b16 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
 8007b66:	4628      	mov	r0, r5
 8007b68:	f001 fff4 	bl	8009b54 <unpend_thread_no_timeout>
 8007b6c:	f105 0018 	add.w	r0, r5, #24
 8007b70:	f002 f8a7 	bl	8009cc2 <z_abort_timeout>
 8007b74:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
 8007b78:	4628      	mov	r0, r5
 8007b7a:	f7ff fdb3 	bl	80076e4 <ready_thread>
 8007b7e:	e7d7      	b.n	8007b30 <z_thread_abort+0x50>
 8007b80:	200010e0 	.word	0x200010e0

08007b84 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 8007b84:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 8007b86:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
 8007b8a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 8007b8c:	e9cd 6700 	strd	r6, r7, [sp]
 8007b90:	f7ff fe3a 	bl	8007808 <z_pend_curr>

	if (data != NULL) {
 8007b94:	b11c      	cbz	r4, 8007b9e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
 8007b96:	4b03      	ldr	r3, [pc, #12]	; (8007ba4 <z_sched_wait+0x20>)
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	695b      	ldr	r3, [r3, #20]
 8007b9c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 8007b9e:	b002      	add	sp, #8
 8007ba0:	bdd0      	pop	{r4, r6, r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	200010e0 	.word	0x200010e0

08007ba8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 8007ba8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 8007baa:	4806      	ldr	r0, [pc, #24]	; (8007bc4 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 8007bac:	4a06      	ldr	r2, [pc, #24]	; (8007bc8 <z_data_copy+0x20>)
 8007bae:	4907      	ldr	r1, [pc, #28]	; (8007bcc <z_data_copy+0x24>)
 8007bb0:	1a12      	subs	r2, r2, r0
 8007bb2:	f001 ff62 	bl	8009a7a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8007bb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 8007bba:	4a05      	ldr	r2, [pc, #20]	; (8007bd0 <z_data_copy+0x28>)
 8007bbc:	4905      	ldr	r1, [pc, #20]	; (8007bd4 <z_data_copy+0x2c>)
 8007bbe:	4806      	ldr	r0, [pc, #24]	; (8007bd8 <z_data_copy+0x30>)
 8007bc0:	f001 bf5b 	b.w	8009a7a <z_early_memcpy>
 8007bc4:	20000000 	.word	0x20000000
 8007bc8:	20000324 	.word	0x20000324
 8007bcc:	0800b070 	.word	0x0800b070
 8007bd0:	00000000 	.word	0x00000000
 8007bd4:	0800b070 	.word	0x0800b070
 8007bd8:	20000000 	.word	0x20000000

08007bdc <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8007bdc:	4b03      	ldr	r3, [pc, #12]	; (8007bec <elapsed+0x10>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	b90b      	cbnz	r3, 8007be6 <elapsed+0xa>
 8007be2:	f7fe b9ef 	b.w	8005fc4 <sys_clock_elapsed>
}
 8007be6:	2000      	movs	r0, #0
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	20001118 	.word	0x20001118

08007bf0 <next_timeout>:
	return list->head == list;
 8007bf0:	4b10      	ldr	r3, [pc, #64]	; (8007c34 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
 8007bf2:	b510      	push	{r4, lr}
 8007bf4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007bf6:	429c      	cmp	r4, r3
 8007bf8:	bf08      	it	eq
 8007bfa:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 8007bfc:	f7ff ffee 	bl	8007bdc <elapsed>
	int32_t ret;

	if ((to == NULL) ||
 8007c00:	b1a4      	cbz	r4, 8007c2c <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 8007c02:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8007c06:	1a1b      	subs	r3, r3, r0
 8007c08:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
 8007c0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c10:	f170 0200 	sbcs.w	r2, r0, #0
 8007c14:	da0a      	bge.n	8007c2c <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
 8007c16:	2800      	cmp	r0, #0
 8007c18:	bfac      	ite	ge
 8007c1a:	4618      	movge	r0, r3
 8007c1c:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8007c1e:	4b06      	ldr	r3, [pc, #24]	; (8007c38 <next_timeout+0x48>)
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	b113      	cbz	r3, 8007c2a <next_timeout+0x3a>
 8007c24:	4298      	cmp	r0, r3
 8007c26:	bfa8      	it	ge
 8007c28:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 8007c2a:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
 8007c2c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8007c30:	e7f5      	b.n	8007c1e <next_timeout+0x2e>
 8007c32:	bf00      	nop
 8007c34:	2000016c 	.word	0x2000016c
 8007c38:	200010e0 	.word	0x200010e0

08007c3c <remove_timeout>:
{
 8007c3c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
 8007c3e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8007c40:	b168      	cbz	r0, 8007c5e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 8007c42:	4a0a      	ldr	r2, [pc, #40]	; (8007c6c <remove_timeout+0x30>)
 8007c44:	6852      	ldr	r2, [r2, #4]
 8007c46:	4290      	cmp	r0, r2
 8007c48:	d009      	beq.n	8007c5e <remove_timeout+0x22>
	if (next(t) != NULL) {
 8007c4a:	b143      	cbz	r3, 8007c5e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 8007c4c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8007c50:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8007c54:	1912      	adds	r2, r2, r4
 8007c56:	eb41 0105 	adc.w	r1, r1, r5
 8007c5a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 8007c5e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 8007c60:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8007c62:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8007c64:	2300      	movs	r3, #0
	node->prev = NULL;
 8007c66:	e9c0 3300 	strd	r3, r3, [r0]
}
 8007c6a:	bd30      	pop	{r4, r5, pc}
 8007c6c:	2000016c 	.word	0x2000016c

08007c70 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8007c70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c74:	bf08      	it	eq
 8007c76:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 8007c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7c:	4604      	mov	r4, r0
 8007c7e:	461f      	mov	r7, r3
 8007c80:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8007c82:	d067      	beq.n	8007d54 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8007c84:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 8007c86:	f04f 0310 	mov.w	r3, #16
 8007c8a:	f3ef 8611 	mrs	r6, BASEPRI
 8007c8e:	f383 8812 	msr	BASEPRI_MAX, r3
 8007c92:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 8007c96:	f06f 0201 	mvn.w	r2, #1
 8007c9a:	1b53      	subs	r3, r2, r5
 8007c9c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007ca0:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	db1b      	blt.n	8007ce0 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 8007ca8:	4b2b      	ldr	r3, [pc, #172]	; (8007d58 <z_add_timeout+0xe8>)
 8007caa:	e9d3 1300 	ldrd	r1, r3, [r3]
 8007cae:	1a52      	subs	r2, r2, r1
 8007cb0:	eb6c 0303 	sbc.w	r3, ip, r3
 8007cb4:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
 8007cb6:	eb63 0307 	sbc.w	r3, r3, r7
 8007cba:	2d01      	cmp	r5, #1
 8007cbc:	f173 0200 	sbcs.w	r2, r3, #0
 8007cc0:	bfbc      	itt	lt
 8007cc2:	2501      	movlt	r5, #1
 8007cc4:	2300      	movlt	r3, #0
 8007cc6:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
 8007cca:	4824      	ldr	r0, [pc, #144]	; (8007d5c <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
 8007ccc:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007cd0:	4283      	cmp	r3, r0
 8007cd2:	d118      	bne.n	8007d06 <z_add_timeout+0x96>
	node->prev = tail;
 8007cd4:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
 8007cd8:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
 8007cdc:	6044      	str	r4, [r0, #4]
}
 8007cde:	e026      	b.n	8007d2e <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 8007ce0:	f7ff ff7c 	bl	8007bdc <elapsed>
 8007ce4:	3501      	adds	r5, #1
 8007ce6:	f147 0700 	adc.w	r7, r7, #0
 8007cea:	182d      	adds	r5, r5, r0
 8007cec:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
 8007cf0:	e9c4 5704 	strd	r5, r7, [r4, #16]
 8007cf4:	e7e9      	b.n	8007cca <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
 8007cf6:	1a52      	subs	r2, r2, r1
 8007cf8:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
 8007cfc:	459c      	cmp	ip, r3
 8007cfe:	e9c4 2504 	strd	r2, r5, [r4, #16]
 8007d02:	d0e7      	beq.n	8007cd4 <z_add_timeout+0x64>
 8007d04:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d0e4      	beq.n	8007cd4 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
 8007d0a:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
 8007d0e:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
 8007d12:	428a      	cmp	r2, r1
 8007d14:	eb75 0e07 	sbcs.w	lr, r5, r7
 8007d18:	daed      	bge.n	8007cf6 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
 8007d1a:	1a8a      	subs	r2, r1, r2
 8007d1c:	eb67 0505 	sbc.w	r5, r7, r5
 8007d20:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
 8007d24:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8007d26:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8007d2a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8007d2c:	605c      	str	r4, [r3, #4]
	return list->head == list;
 8007d2e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007d30:	4283      	cmp	r3, r0
 8007d32:	d00b      	beq.n	8007d4c <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8007d34:	429c      	cmp	r4, r3
 8007d36:	d109      	bne.n	8007d4c <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 8007d38:	f7ff ff5a 	bl	8007bf0 <next_timeout>

			if (next_time == 0 ||
 8007d3c:	b118      	cbz	r0, 8007d46 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
 8007d3e:	4b08      	ldr	r3, [pc, #32]	; (8007d60 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	4283      	cmp	r3, r0
 8007d44:	d002      	beq.n	8007d4c <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
 8007d46:	2100      	movs	r1, #0
 8007d48:	f7fe f8ce 	bl	8005ee8 <sys_clock_set_timeout>
	__asm__ volatile(
 8007d4c:	f386 8811 	msr	BASEPRI, r6
 8007d50:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8007d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d56:	bf00      	nop
 8007d58:	200004c8 	.word	0x200004c8
 8007d5c:	2000016c 	.word	0x2000016c
 8007d60:	200010e0 	.word	0x200010e0

08007d64 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 8007d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d68:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8007d6a:	f7ff fc79 	bl	8007660 <z_time_slice>
	__asm__ volatile(
 8007d6e:	f04f 0310 	mov.w	r3, #16
 8007d72:	f3ef 8411 	mrs	r4, BASEPRI
 8007d76:	f383 8812 	msr	BASEPRI_MAX, r3
 8007d7a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 8007d7e:	4e24      	ldr	r6, [pc, #144]	; (8007e10 <sys_clock_announce+0xac>)
	return list->head == list;
 8007d80:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8007e14 <sys_clock_announce+0xb0>
 8007d84:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 8007d86:	4d24      	ldr	r5, [pc, #144]	; (8007e18 <sys_clock_announce+0xb4>)
 8007d88:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
 8007d8c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007d8e:	4540      	cmp	r0, r8
		curr_tick += dt;
 8007d90:	e9d5 1e00 	ldrd	r1, lr, [r5]
 8007d94:	ea4f 77e2 	mov.w	r7, r2, asr #31
 8007d98:	d00b      	beq.n	8007db2 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 8007d9a:	b150      	cbz	r0, 8007db2 <sys_clock_announce+0x4e>
 8007d9c:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	eb77 090c 	sbcs.w	r9, r7, ip
 8007da6:	da16      	bge.n	8007dd6 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 8007da8:	1a9b      	subs	r3, r3, r2
 8007daa:	eb6c 0c07 	sbc.w	ip, ip, r7
 8007dae:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
 8007db2:	1852      	adds	r2, r2, r1
 8007db4:	eb4e 0707 	adc.w	r7, lr, r7
 8007db8:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
 8007dbc:	2500      	movs	r5, #0
 8007dbe:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 8007dc0:	f7ff ff16 	bl	8007bf0 <next_timeout>
 8007dc4:	4629      	mov	r1, r5
 8007dc6:	f7fe f88f 	bl	8005ee8 <sys_clock_set_timeout>
	__asm__ volatile(
 8007dca:	f384 8811 	msr	BASEPRI, r4
 8007dce:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8007dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 8007dd6:	1859      	adds	r1, r3, r1
 8007dd8:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
 8007de0:	2200      	movs	r2, #0
 8007de2:	2300      	movs	r3, #0
 8007de4:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
 8007de8:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
 8007dec:	f7ff ff26 	bl	8007c3c <remove_timeout>
 8007df0:	f384 8811 	msr	BASEPRI, r4
 8007df4:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8007df8:	6883      	ldr	r3, [r0, #8]
 8007dfa:	4798      	blx	r3
	__asm__ volatile(
 8007dfc:	f04f 0310 	mov.w	r3, #16
 8007e00:	f3ef 8411 	mrs	r4, BASEPRI
 8007e04:	f383 8812 	msr	BASEPRI_MAX, r3
 8007e08:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8007e0c:	e7bc      	b.n	8007d88 <sys_clock_announce+0x24>
 8007e0e:	bf00      	nop
 8007e10:	20001118 	.word	0x20001118
 8007e14:	2000016c 	.word	0x2000016c
 8007e18:	200004c8 	.word	0x200004c8

08007e1c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8007e1c:	b510      	push	{r4, lr}
 8007e1e:	f04f 0310 	mov.w	r3, #16
 8007e22:	f3ef 8411 	mrs	r4, BASEPRI
 8007e26:	f383 8812 	msr	BASEPRI_MAX, r3
 8007e2a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
 8007e2e:	f7fe f8c9 	bl	8005fc4 <sys_clock_elapsed>
 8007e32:	4a05      	ldr	r2, [pc, #20]	; (8007e48 <sys_clock_tick_get+0x2c>)
 8007e34:	e9d2 3100 	ldrd	r3, r1, [r2]
 8007e38:	18c0      	adds	r0, r0, r3
 8007e3a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 8007e3e:	f384 8811 	msr	BASEPRI, r4
 8007e42:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8007e46:	bd10      	pop	{r4, pc}
 8007e48:	200004c8 	.word	0x200004c8

08007e4c <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 8007e4c:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 8007e4e:	4604      	mov	r4, r0
 8007e50:	b178      	cbz	r0, 8007e72 <z_impl_k_busy_wait+0x26>
 8007e52:	f7fe f8d5 	bl	8006000 <sys_clock_cycle_get_32>
 8007e56:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 8007e58:	4806      	ldr	r0, [pc, #24]	; (8007e74 <z_impl_k_busy_wait+0x28>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 8007e5a:	4a07      	ldr	r2, [pc, #28]	; (8007e78 <z_impl_k_busy_wait+0x2c>)
 8007e5c:	fba4 0100 	umull	r0, r1, r4, r0
 8007e60:	2300      	movs	r3, #0
 8007e62:	f7f8 fe41 	bl	8000ae8 <__aeabi_uldivmod>
 8007e66:	4604      	mov	r4, r0
 8007e68:	f7fe f8ca 	bl	8006000 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8007e6c:	1b43      	subs	r3, r0, r5
 8007e6e:	42a3      	cmp	r3, r4
 8007e70:	d3fa      	bcc.n	8007e68 <z_impl_k_busy_wait+0x1c>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 8007e72:	bd38      	pop	{r3, r4, r5, pc}
 8007e74:	04c4b400 	.word	0x04c4b400
 8007e78:	000f4240 	.word	0x000f4240

08007e7c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 8007e7c:	4a02      	ldr	r2, [pc, #8]	; (8007e88 <boot_banner+0xc>)
 8007e7e:	4903      	ldr	r1, [pc, #12]	; (8007e8c <boot_banner+0x10>)
 8007e80:	4803      	ldr	r0, [pc, #12]	; (8007e90 <boot_banner+0x14>)
 8007e82:	f000 baef 	b.w	8008464 <printk>
 8007e86:	bf00      	nop
 8007e88:	0800a883 	.word	0x0800a883
 8007e8c:	0800af1b 	.word	0x0800af1b
 8007e90:	0800af3c 	.word	0x0800af3c

08007e94 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 8007e94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 8007e96:	4b09      	ldr	r3, [pc, #36]	; (8007ebc <k_sys_work_q_init+0x28>)
 8007e98:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 8007e9a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
 8007e9c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	4907      	ldr	r1, [pc, #28]	; (8007ec0 <k_sys_work_q_init+0x2c>)
 8007ea2:	4808      	ldr	r0, [pc, #32]	; (8007ec4 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
 8007ea4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
 8007ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007eac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007eb0:	f7ff fae2 	bl	8007478 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	b004      	add	sp, #16
 8007eb8:	bd10      	pop	{r4, pc}
 8007eba:	bf00      	nop
 8007ebc:	0800af63 	.word	0x0800af63
 8007ec0:	20002300 	.word	0x20002300
 8007ec4:	200004d0 	.word	0x200004d0

08007ec8 <malloc>:
 8007ec8:	4b02      	ldr	r3, [pc, #8]	; (8007ed4 <malloc+0xc>)
 8007eca:	4601      	mov	r1, r0
 8007ecc:	6818      	ldr	r0, [r3, #0]
 8007ece:	f000 b855 	b.w	8007f7c <_malloc_r>
 8007ed2:	bf00      	nop
 8007ed4:	20000174 	.word	0x20000174

08007ed8 <free>:
 8007ed8:	4b02      	ldr	r3, [pc, #8]	; (8007ee4 <free+0xc>)
 8007eda:	4601      	mov	r1, r0
 8007edc:	6818      	ldr	r0, [r3, #0]
 8007ede:	f000 b803 	b.w	8007ee8 <_free_r>
 8007ee2:	bf00      	nop
 8007ee4:	20000174 	.word	0x20000174

08007ee8 <_free_r>:
 8007ee8:	b538      	push	{r3, r4, r5, lr}
 8007eea:	4605      	mov	r5, r0
 8007eec:	2900      	cmp	r1, #0
 8007eee:	d041      	beq.n	8007f74 <_free_r+0x8c>
 8007ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ef4:	1f0c      	subs	r4, r1, #4
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	bfb8      	it	lt
 8007efa:	18e4      	addlt	r4, r4, r3
 8007efc:	f000 f8a8 	bl	8008050 <__malloc_lock>
 8007f00:	4a1d      	ldr	r2, [pc, #116]	; (8007f78 <_free_r+0x90>)
 8007f02:	6813      	ldr	r3, [r2, #0]
 8007f04:	b933      	cbnz	r3, 8007f14 <_free_r+0x2c>
 8007f06:	6063      	str	r3, [r4, #4]
 8007f08:	6014      	str	r4, [r2, #0]
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f10:	f000 b8a4 	b.w	800805c <__malloc_unlock>
 8007f14:	42a3      	cmp	r3, r4
 8007f16:	d908      	bls.n	8007f2a <_free_r+0x42>
 8007f18:	6820      	ldr	r0, [r4, #0]
 8007f1a:	1821      	adds	r1, r4, r0
 8007f1c:	428b      	cmp	r3, r1
 8007f1e:	bf01      	itttt	eq
 8007f20:	6819      	ldreq	r1, [r3, #0]
 8007f22:	685b      	ldreq	r3, [r3, #4]
 8007f24:	1809      	addeq	r1, r1, r0
 8007f26:	6021      	streq	r1, [r4, #0]
 8007f28:	e7ed      	b.n	8007f06 <_free_r+0x1e>
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	b10b      	cbz	r3, 8007f34 <_free_r+0x4c>
 8007f30:	42a3      	cmp	r3, r4
 8007f32:	d9fa      	bls.n	8007f2a <_free_r+0x42>
 8007f34:	6811      	ldr	r1, [r2, #0]
 8007f36:	1850      	adds	r0, r2, r1
 8007f38:	42a0      	cmp	r0, r4
 8007f3a:	d10b      	bne.n	8007f54 <_free_r+0x6c>
 8007f3c:	6820      	ldr	r0, [r4, #0]
 8007f3e:	4401      	add	r1, r0
 8007f40:	1850      	adds	r0, r2, r1
 8007f42:	4283      	cmp	r3, r0
 8007f44:	6011      	str	r1, [r2, #0]
 8007f46:	d1e0      	bne.n	8007f0a <_free_r+0x22>
 8007f48:	6818      	ldr	r0, [r3, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	6053      	str	r3, [r2, #4]
 8007f4e:	4401      	add	r1, r0
 8007f50:	6011      	str	r1, [r2, #0]
 8007f52:	e7da      	b.n	8007f0a <_free_r+0x22>
 8007f54:	d902      	bls.n	8007f5c <_free_r+0x74>
 8007f56:	230c      	movs	r3, #12
 8007f58:	602b      	str	r3, [r5, #0]
 8007f5a:	e7d6      	b.n	8007f0a <_free_r+0x22>
 8007f5c:	6820      	ldr	r0, [r4, #0]
 8007f5e:	1821      	adds	r1, r4, r0
 8007f60:	428b      	cmp	r3, r1
 8007f62:	bf04      	itt	eq
 8007f64:	6819      	ldreq	r1, [r3, #0]
 8007f66:	685b      	ldreq	r3, [r3, #4]
 8007f68:	6063      	str	r3, [r4, #4]
 8007f6a:	bf04      	itt	eq
 8007f6c:	1809      	addeq	r1, r1, r0
 8007f6e:	6021      	streq	r1, [r4, #0]
 8007f70:	6054      	str	r4, [r2, #4]
 8007f72:	e7ca      	b.n	8007f0a <_free_r+0x22>
 8007f74:	bd38      	pop	{r3, r4, r5, pc}
 8007f76:	bf00      	nop
 8007f78:	2000111c 	.word	0x2000111c

08007f7c <_malloc_r>:
 8007f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7e:	1ccd      	adds	r5, r1, #3
 8007f80:	f025 0503 	bic.w	r5, r5, #3
 8007f84:	3508      	adds	r5, #8
 8007f86:	2d0c      	cmp	r5, #12
 8007f88:	bf38      	it	cc
 8007f8a:	250c      	movcc	r5, #12
 8007f8c:	2d00      	cmp	r5, #0
 8007f8e:	4606      	mov	r6, r0
 8007f90:	db01      	blt.n	8007f96 <_malloc_r+0x1a>
 8007f92:	42a9      	cmp	r1, r5
 8007f94:	d903      	bls.n	8007f9e <_malloc_r+0x22>
 8007f96:	230c      	movs	r3, #12
 8007f98:	6033      	str	r3, [r6, #0]
 8007f9a:	2000      	movs	r0, #0
 8007f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f9e:	f000 f857 	bl	8008050 <__malloc_lock>
 8007fa2:	4921      	ldr	r1, [pc, #132]	; (8008028 <_malloc_r+0xac>)
 8007fa4:	680a      	ldr	r2, [r1, #0]
 8007fa6:	4614      	mov	r4, r2
 8007fa8:	b99c      	cbnz	r4, 8007fd2 <_malloc_r+0x56>
 8007faa:	4f20      	ldr	r7, [pc, #128]	; (800802c <_malloc_r+0xb0>)
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	b923      	cbnz	r3, 8007fba <_malloc_r+0x3e>
 8007fb0:	4621      	mov	r1, r4
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	f000 f83c 	bl	8008030 <_sbrk_r>
 8007fb8:	6038      	str	r0, [r7, #0]
 8007fba:	4629      	mov	r1, r5
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	f000 f837 	bl	8008030 <_sbrk_r>
 8007fc2:	1c43      	adds	r3, r0, #1
 8007fc4:	d123      	bne.n	800800e <_malloc_r+0x92>
 8007fc6:	230c      	movs	r3, #12
 8007fc8:	6033      	str	r3, [r6, #0]
 8007fca:	4630      	mov	r0, r6
 8007fcc:	f000 f846 	bl	800805c <__malloc_unlock>
 8007fd0:	e7e3      	b.n	8007f9a <_malloc_r+0x1e>
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	1b5b      	subs	r3, r3, r5
 8007fd6:	d417      	bmi.n	8008008 <_malloc_r+0x8c>
 8007fd8:	2b0b      	cmp	r3, #11
 8007fda:	d903      	bls.n	8007fe4 <_malloc_r+0x68>
 8007fdc:	6023      	str	r3, [r4, #0]
 8007fde:	441c      	add	r4, r3
 8007fe0:	6025      	str	r5, [r4, #0]
 8007fe2:	e004      	b.n	8007fee <_malloc_r+0x72>
 8007fe4:	6863      	ldr	r3, [r4, #4]
 8007fe6:	42a2      	cmp	r2, r4
 8007fe8:	bf0c      	ite	eq
 8007fea:	600b      	streq	r3, [r1, #0]
 8007fec:	6053      	strne	r3, [r2, #4]
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f000 f834 	bl	800805c <__malloc_unlock>
 8007ff4:	f104 000b 	add.w	r0, r4, #11
 8007ff8:	1d23      	adds	r3, r4, #4
 8007ffa:	f020 0007 	bic.w	r0, r0, #7
 8007ffe:	1ac2      	subs	r2, r0, r3
 8008000:	d0cc      	beq.n	8007f9c <_malloc_r+0x20>
 8008002:	1a1b      	subs	r3, r3, r0
 8008004:	50a3      	str	r3, [r4, r2]
 8008006:	e7c9      	b.n	8007f9c <_malloc_r+0x20>
 8008008:	4622      	mov	r2, r4
 800800a:	6864      	ldr	r4, [r4, #4]
 800800c:	e7cc      	b.n	8007fa8 <_malloc_r+0x2c>
 800800e:	1cc4      	adds	r4, r0, #3
 8008010:	f024 0403 	bic.w	r4, r4, #3
 8008014:	42a0      	cmp	r0, r4
 8008016:	d0e3      	beq.n	8007fe0 <_malloc_r+0x64>
 8008018:	1a21      	subs	r1, r4, r0
 800801a:	4630      	mov	r0, r6
 800801c:	f000 f808 	bl	8008030 <_sbrk_r>
 8008020:	3001      	adds	r0, #1
 8008022:	d1dd      	bne.n	8007fe0 <_malloc_r+0x64>
 8008024:	e7cf      	b.n	8007fc6 <_malloc_r+0x4a>
 8008026:	bf00      	nop
 8008028:	2000111c 	.word	0x2000111c
 800802c:	20001120 	.word	0x20001120

08008030 <_sbrk_r>:
 8008030:	b538      	push	{r3, r4, r5, lr}
 8008032:	4d06      	ldr	r5, [pc, #24]	; (800804c <_sbrk_r+0x1c>)
 8008034:	2300      	movs	r3, #0
 8008036:	4604      	mov	r4, r0
 8008038:	4608      	mov	r0, r1
 800803a:	602b      	str	r3, [r5, #0]
 800803c:	f7fc fe60 	bl	8004d00 <_sbrk>
 8008040:	1c43      	adds	r3, r0, #1
 8008042:	d102      	bne.n	800804a <_sbrk_r+0x1a>
 8008044:	682b      	ldr	r3, [r5, #0]
 8008046:	b103      	cbz	r3, 800804a <_sbrk_r+0x1a>
 8008048:	6023      	str	r3, [r4, #0]
 800804a:	bd38      	pop	{r3, r4, r5, pc}
 800804c:	20001124 	.word	0x20001124

08008050 <__malloc_lock>:
 8008050:	4801      	ldr	r0, [pc, #4]	; (8008058 <__malloc_lock+0x8>)
 8008052:	f000 bc19 	b.w	8008888 <__retarget_lock_acquire_recursive>
 8008056:	bf00      	nop
 8008058:	20000224 	.word	0x20000224

0800805c <__malloc_unlock>:
 800805c:	4801      	ldr	r0, [pc, #4]	; (8008064 <__malloc_unlock+0x8>)
 800805e:	f000 bc19 	b.w	8008894 <__retarget_lock_release_recursive>
 8008062:	bf00      	nop
 8008064:	20000224 	.word	0x20000224

08008068 <parse_hex4>:
{
 8008068:	b510      	push	{r4, lr}
    for (i = 0; i < 4; i++) {
 800806a:	2300      	movs	r3, #0
{
 800806c:	4601      	mov	r1, r0
    unsigned long int h = 0;
 800806e:	4618      	mov	r0, r3
        if ((input[i] >= '0') && (input[i] <= '9')) {
 8008070:	5cca      	ldrb	r2, [r1, r3]
 8008072:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8008076:	2c09      	cmp	r4, #9
 8008078:	d809      	bhi.n	800808e <parse_hex4+0x26>
            h += (unsigned int) input[i] - '0';
 800807a:	3830      	subs	r0, #48	; 0x30
        if (i < 3) {
 800807c:	2b03      	cmp	r3, #3
            h += (unsigned int) 10 + input[i] - 'a';
 800807e:	4410      	add	r0, r2
    for (i = 0; i < 4; i++) {
 8008080:	f103 0301 	add.w	r3, r3, #1
            h = h << 4;
 8008084:	bf18      	it	ne
 8008086:	0100      	lslne	r0, r0, #4
    for (i = 0; i < 4; i++) {
 8008088:	2b04      	cmp	r3, #4
 800808a:	d1f1      	bne.n	8008070 <parse_hex4+0x8>
}
 800808c:	bd10      	pop	{r4, pc}
        } else if ((input[i] >= 'A') && (input[i] <= 'F')) {
 800808e:	f1a2 0441 	sub.w	r4, r2, #65	; 0x41
 8008092:	2c05      	cmp	r4, #5
 8008094:	d801      	bhi.n	800809a <parse_hex4+0x32>
            h += (unsigned int) 10 + input[i] - 'A';
 8008096:	3837      	subs	r0, #55	; 0x37
 8008098:	e7f0      	b.n	800807c <parse_hex4+0x14>
        } else if ((input[i] >= 'a') && (input[i] <= 'f')) {
 800809a:	f1a2 0461 	sub.w	r4, r2, #97	; 0x61
 800809e:	2c05      	cmp	r4, #5
 80080a0:	d801      	bhi.n	80080a6 <parse_hex4+0x3e>
            h += (unsigned int) 10 + input[i] - 'a';
 80080a2:	3857      	subs	r0, #87	; 0x57
 80080a4:	e7ea      	b.n	800807c <parse_hex4+0x14>
            return 0;
 80080a6:	2000      	movs	r0, #0
 80080a8:	e7f0      	b.n	800808c <parse_hex4+0x24>

080080aa <buffer_skip_whitespace>:
{
 80080aa:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL)) {
 80080ac:	b140      	cbz	r0, 80080c0 <buffer_skip_whitespace+0x16>
 80080ae:	6801      	ldr	r1, [r0, #0]
 80080b0:	b171      	cbz	r1, 80080d0 <buffer_skip_whitespace+0x26>
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32)) {
 80080b2:	6842      	ldr	r2, [r0, #4]
 80080b4:	6883      	ldr	r3, [r0, #8]
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d206      	bcs.n	80080c8 <buffer_skip_whitespace+0x1e>
 80080ba:	5ccc      	ldrb	r4, [r1, r3]
 80080bc:	2c20      	cmp	r4, #32
 80080be:	d900      	bls.n	80080c2 <buffer_skip_whitespace+0x18>
}
 80080c0:	bd10      	pop	{r4, pc}
        buffer->offset++;
 80080c2:	3301      	adds	r3, #1
 80080c4:	6083      	str	r3, [r0, #8]
 80080c6:	e7f5      	b.n	80080b4 <buffer_skip_whitespace+0xa>
    if (buffer->offset == buffer->length) {
 80080c8:	d1fa      	bne.n	80080c0 <buffer_skip_whitespace+0x16>
        buffer->offset--;
 80080ca:	3a01      	subs	r2, #1
 80080cc:	6082      	str	r2, [r0, #8]
 80080ce:	e7f7      	b.n	80080c0 <buffer_skip_whitespace+0x16>
        return NULL;
 80080d0:	4608      	mov	r0, r1
 80080d2:	e7f5      	b.n	80080c0 <buffer_skip_whitespace+0x16>

080080d4 <update_offset>:
{
 80080d4:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL)) {
 80080d6:	4604      	mov	r4, r0
 80080d8:	b140      	cbz	r0, 80080ec <update_offset+0x18>
 80080da:	6803      	ldr	r3, [r0, #0]
 80080dc:	b133      	cbz	r3, 80080ec <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
 80080de:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
 80080e0:	4418      	add	r0, r3
 80080e2:	f7f8 feb6 	bl	8000e52 <strlen>
 80080e6:	68a3      	ldr	r3, [r4, #8]
 80080e8:	4403      	add	r3, r0
 80080ea:	60a3      	str	r3, [r4, #8]
}
 80080ec:	bd10      	pop	{r4, pc}

080080ee <JNew_Item>:
{
 80080ee:	b510      	push	{r4, lr}
    J* node = (J*)_Malloc(sizeof(J));
 80080f0:	2028      	movs	r0, #40	; 0x28
 80080f2:	f7fa f847 	bl	8002184 <NoteMalloc>
    if (node) {
 80080f6:	4604      	mov	r4, r0
 80080f8:	b118      	cbz	r0, 8008102 <JNew_Item+0x14>
__ssp_bos_icheck3(memset, void *, int)
 80080fa:	2228      	movs	r2, #40	; 0x28
 80080fc:	2100      	movs	r1, #0
 80080fe:	f001 fe25 	bl	8009d4c <memset>
}
 8008102:	4620      	mov	r0, r4
 8008104:	bd10      	pop	{r4, pc}

08008106 <add_item_to_array>:
    if ((item == NULL) || (array == NULL)) {
 8008106:	b161      	cbz	r1, 8008122 <add_item_to_array+0x1c>
 8008108:	b160      	cbz	r0, 8008124 <add_item_to_array+0x1e>
    child = array->child;
 800810a:	6883      	ldr	r3, [r0, #8]
    if (child == NULL) {
 800810c:	b913      	cbnz	r3, 8008114 <add_item_to_array+0xe>
        array->child = item;
 800810e:	6081      	str	r1, [r0, #8]
}
 8008110:	2001      	movs	r0, #1
 8008112:	4770      	bx	lr
        while (child->next) {
 8008114:	461a      	mov	r2, r3
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1fb      	bne.n	8008114 <add_item_to_array+0xe>
    prev->next = item;
 800811c:	6011      	str	r1, [r2, #0]
    item->prev = prev;
 800811e:	604a      	str	r2, [r1, #4]
 8008120:	e7f6      	b.n	8008110 <add_item_to_array+0xa>
        return false;
 8008122:	4608      	mov	r0, r1
}
 8008124:	4770      	bx	lr

08008126 <ensure>:
{
 8008126:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL)) {
 8008128:	4606      	mov	r6, r0
 800812a:	b398      	cbz	r0, 8008194 <ensure+0x6e>
 800812c:	6804      	ldr	r4, [r0, #0]
 800812e:	b164      	cbz	r4, 800814a <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length)) {
 8008130:	6843      	ldr	r3, [r0, #4]
 8008132:	b113      	cbz	r3, 800813a <ensure+0x14>
 8008134:	6882      	ldr	r2, [r0, #8]
 8008136:	4293      	cmp	r3, r2
 8008138:	d92c      	bls.n	8008194 <ensure+0x6e>
    if (needed > INT_MAX) {
 800813a:	2900      	cmp	r1, #0
 800813c:	db2a      	blt.n	8008194 <ensure+0x6e>
    needed += p->offset + 1;
 800813e:	68b2      	ldr	r2, [r6, #8]
 8008140:	3101      	adds	r1, #1
 8008142:	4411      	add	r1, r2
    if (needed <= p->length) {
 8008144:	428b      	cmp	r3, r1
 8008146:	d302      	bcc.n	800814e <ensure+0x28>
        return p->buffer + p->offset;
 8008148:	4414      	add	r4, r2
}
 800814a:	4620      	mov	r0, r4
 800814c:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
 800814e:	6934      	ldr	r4, [r6, #16]
 8008150:	bb04      	cbnz	r4, 8008194 <ensure+0x6e>
    if (needed > (INT_MAX / 2)) {
 8008152:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8008156:	d304      	bcc.n	8008162 <ensure+0x3c>
        if (needed <= INT_MAX) {
 8008158:	2900      	cmp	r1, #0
 800815a:	dbf6      	blt.n	800814a <ensure+0x24>
            newsize = INT_MAX;
 800815c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8008160:	e000      	b.n	8008164 <ensure+0x3e>
        newsize = needed * 2;
 8008162:	004d      	lsls	r5, r1, #1
    newbuffer = (unsigned char*)_Malloc(newsize);
 8008164:	4628      	mov	r0, r5
 8008166:	f7fa f80d 	bl	8002184 <NoteMalloc>
    if (!newbuffer) {
 800816a:	4604      	mov	r4, r0
 800816c:	b928      	cbnz	r0, 800817a <ensure+0x54>
        _Free(p->buffer);
 800816e:	6830      	ldr	r0, [r6, #0]
 8008170:	f7fa f810 	bl	8002194 <NoteFree>
        p->buffer = NULL;
 8008174:	e9c6 4400 	strd	r4, r4, [r6]
        return NULL;
 8008178:	e7e7      	b.n	800814a <ensure+0x24>
        memcpy(newbuffer, p->buffer, p->offset + 1);
 800817a:	68b2      	ldr	r2, [r6, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800817c:	6831      	ldr	r1, [r6, #0]
 800817e:	3201      	adds	r2, #1
 8008180:	f001 fdd6 	bl	8009d30 <memcpy>
    _Free(p->buffer);
 8008184:	6830      	ldr	r0, [r6, #0]
 8008186:	f7fa f805 	bl	8002194 <NoteFree>
    return newbuffer + p->offset;
 800818a:	68b3      	ldr	r3, [r6, #8]
    p->buffer = newbuffer;
 800818c:	e9c6 4500 	strd	r4, r5, [r6]
    return newbuffer + p->offset;
 8008190:	441c      	add	r4, r3
 8008192:	e7da      	b.n	800814a <ensure+0x24>
        return NULL;
 8008194:	2400      	movs	r4, #0
 8008196:	e7d8      	b.n	800814a <ensure+0x24>

08008198 <Jstrdup>:
{
 8008198:	b570      	push	{r4, r5, r6, lr}
    if (string == NULL) {
 800819a:	4605      	mov	r5, r0
 800819c:	b168      	cbz	r0, 80081ba <Jstrdup+0x22>
    length = strlen((const char*)string) + sizeof("");
 800819e:	f7f8 fe58 	bl	8000e52 <strlen>
 80081a2:	1c46      	adds	r6, r0, #1
    copy = (unsigned char*)_Malloc(length);
 80081a4:	4630      	mov	r0, r6
 80081a6:	f7f9 ffed 	bl	8002184 <NoteMalloc>
    if (copy == NULL) {
 80081aa:	4604      	mov	r4, r0
 80081ac:	b118      	cbz	r0, 80081b6 <Jstrdup+0x1e>
 80081ae:	4632      	mov	r2, r6
 80081b0:	4629      	mov	r1, r5
 80081b2:	f001 fdbd 	bl	8009d30 <memcpy>
}
 80081b6:	4620      	mov	r0, r4
 80081b8:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
 80081ba:	4604      	mov	r4, r0
 80081bc:	e7fb      	b.n	80081b6 <Jstrdup+0x1e>

080081be <add_item_to_object>:
{
 80081be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c0:	460d      	mov	r5, r1
 80081c2:	4614      	mov	r4, r2
    if ((object == NULL) || (string == NULL) || (item == NULL)) {
 80081c4:	4607      	mov	r7, r0
 80081c6:	b1e8      	cbz	r0, 8008204 <add_item_to_object+0x46>
 80081c8:	b1e1      	cbz	r1, 8008204 <add_item_to_object+0x46>
 80081ca:	b1da      	cbz	r2, 8008204 <add_item_to_object+0x46>
    if (constant_key) {
 80081cc:	b18b      	cbz	r3, 80081f2 <add_item_to_object+0x34>
        new_type = item->type | JStringIsConst;
 80081ce:	68d6      	ldr	r6, [r2, #12]
 80081d0:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    if (!(item->type & JStringIsConst) && (item->string != NULL)) {
 80081d4:	68e3      	ldr	r3, [r4, #12]
 80081d6:	059b      	lsls	r3, r3, #22
 80081d8:	d403      	bmi.n	80081e2 <add_item_to_object+0x24>
 80081da:	6a20      	ldr	r0, [r4, #32]
 80081dc:	b108      	cbz	r0, 80081e2 <add_item_to_object+0x24>
        _Free(item->string);
 80081de:	f7f9 ffd9 	bl	8002194 <NoteFree>
    item->string = new_key;
 80081e2:	6225      	str	r5, [r4, #32]
    item->type = new_type;
 80081e4:	60e6      	str	r6, [r4, #12]
    return add_item_to_array(object, item);
 80081e6:	4621      	mov	r1, r4
 80081e8:	4638      	mov	r0, r7
}
 80081ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
 80081ee:	f7ff bf8a 	b.w	8008106 <add_item_to_array>
        new_key = (char*)Jstrdup((const unsigned char*)string);
 80081f2:	4608      	mov	r0, r1
 80081f4:	f7ff ffd0 	bl	8008198 <Jstrdup>
        if (new_key == NULL) {
 80081f8:	4605      	mov	r5, r0
 80081fa:	b118      	cbz	r0, 8008204 <add_item_to_object+0x46>
        new_type = item->type & ~JStringIsConst;
 80081fc:	68e6      	ldr	r6, [r4, #12]
 80081fe:	f426 7600 	bic.w	r6, r6, #512	; 0x200
 8008202:	e7e7      	b.n	80081d4 <add_item_to_object+0x16>
}
 8008204:	2000      	movs	r0, #0
 8008206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008208 <JFree>:
    _Free(p);
 8008208:	f7f9 bfc4 	b.w	8002194 <NoteFree>

0800820c <JDelete>:
{
 800820c:	b538      	push	{r3, r4, r5, lr}
 800820e:	4604      	mov	r4, r0
    while (item != NULL) {
 8008210:	b904      	cbnz	r4, 8008214 <JDelete+0x8>
}
 8008212:	bd38      	pop	{r3, r4, r5, pc}
        if (!(item->type & JIsReference) && (item->child != NULL)) {
 8008214:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
 8008216:	6825      	ldr	r5, [r4, #0]
        if (!(item->type & JIsReference) && (item->child != NULL)) {
 8008218:	05d9      	lsls	r1, r3, #23
 800821a:	d403      	bmi.n	8008224 <JDelete+0x18>
 800821c:	68a0      	ldr	r0, [r4, #8]
 800821e:	b968      	cbnz	r0, 800823c <JDelete+0x30>
        if (!(item->type & JIsReference) && (item->valuestring != NULL)) {
 8008220:	6920      	ldr	r0, [r4, #16]
 8008222:	b988      	cbnz	r0, 8008248 <JDelete+0x3c>
        if (!(item->type & JStringIsConst) && (item->string != NULL)) {
 8008224:	68e3      	ldr	r3, [r4, #12]
 8008226:	059b      	lsls	r3, r3, #22
 8008228:	d403      	bmi.n	8008232 <JDelete+0x26>
 800822a:	6a20      	ldr	r0, [r4, #32]
 800822c:	b108      	cbz	r0, 8008232 <JDelete+0x26>
            _Free(item->string);
 800822e:	f7f9 ffb1 	bl	8002194 <NoteFree>
        _Free(item);
 8008232:	4620      	mov	r0, r4
 8008234:	f7f9 ffae 	bl	8002194 <NoteFree>
        item = next;
 8008238:	462c      	mov	r4, r5
 800823a:	e7e9      	b.n	8008210 <JDelete+0x4>
            JDelete(item->child);
 800823c:	f7ff ffe6 	bl	800820c <JDelete>
        if (!(item->type & JIsReference) && (item->valuestring != NULL)) {
 8008240:	68e3      	ldr	r3, [r4, #12]
 8008242:	05da      	lsls	r2, r3, #23
 8008244:	d5ec      	bpl.n	8008220 <JDelete+0x14>
 8008246:	e7ed      	b.n	8008224 <JDelete+0x18>
            _Free(item->valuestring);
 8008248:	f7f9 ffa4 	bl	8002194 <NoteFree>
 800824c:	e7ea      	b.n	8008224 <JDelete+0x18>

0800824e <htoa16>:
{
 800824e:	b530      	push	{r4, r5, lr}
 8008250:	1e4a      	subs	r2, r1, #1
 8008252:	1ccd      	adds	r5, r1, #3
        uint16_t nibble = (n >> 12) & 0xff;
 8008254:	0b04      	lsrs	r4, r0, #12
            *p++ = 'A' + (nibble-10);
 8008256:	b2e3      	uxtb	r3, r4
        if (nibble >= 10) {
 8008258:	2c09      	cmp	r4, #9
            *p++ = 'A' + (nibble-10);
 800825a:	bf8c      	ite	hi
 800825c:	3337      	addhi	r3, #55	; 0x37
            *p++ = '0' + nibble;
 800825e:	3330      	addls	r3, #48	; 0x30
 8008260:	f802 3f01 	strb.w	r3, [r2, #1]!
        n = n << 4;
 8008264:	0100      	lsls	r0, r0, #4
    for (i=0; i<4; i++) {
 8008266:	42aa      	cmp	r2, r5
        n = n << 4;
 8008268:	b280      	uxth	r0, r0
    for (i=0; i<4; i++) {
 800826a:	d1f3      	bne.n	8008254 <htoa16+0x6>
    *p = '\0';
 800826c:	2300      	movs	r3, #0
 800826e:	710b      	strb	r3, [r1, #4]
}
 8008270:	bd30      	pop	{r4, r5, pc}

08008272 <print>:
{
 8008272:	b530      	push	{r4, r5, lr}
 8008274:	b087      	sub	sp, #28
 8008276:	460d      	mov	r5, r1
    memset(buffer, 0, sizeof(buffer));
 8008278:	2218      	movs	r2, #24
 800827a:	2100      	movs	r1, #0
{
 800827c:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
 800827e:	4668      	mov	r0, sp
 8008280:	f001 fd64 	bl	8009d4c <memset>
    buffer->buffer = (unsigned char*) _Malloc(default_buffer_size);
 8008284:	2080      	movs	r0, #128	; 0x80
 8008286:	f7f9 ff7d 	bl	8002184 <NoteMalloc>
    buffer->length = default_buffer_size;
 800828a:	2380      	movs	r3, #128	; 0x80
    buffer->buffer = (unsigned char*) _Malloc(default_buffer_size);
 800828c:	9000      	str	r0, [sp, #0]
    buffer->length = default_buffer_size;
 800828e:	9301      	str	r3, [sp, #4]
    buffer->format = format;
 8008290:	9505      	str	r5, [sp, #20]
    if (buffer->buffer == NULL) {
 8008292:	b1f8      	cbz	r0, 80082d4 <print+0x62>
    if (!print_value(item, buffer)) {
 8008294:	4669      	mov	r1, sp
 8008296:	4620      	mov	r0, r4
 8008298:	f7f9 fa48 	bl	800172c <print_value>
 800829c:	b1d0      	cbz	r0, 80082d4 <print+0x62>
    update_offset(buffer);
 800829e:	4668      	mov	r0, sp
 80082a0:	f7ff ff18 	bl	80080d4 <update_offset>
    printed = (unsigned char*) _Malloc(buffer->offset + 1);
 80082a4:	9802      	ldr	r0, [sp, #8]
 80082a6:	3001      	adds	r0, #1
 80082a8:	f7f9 ff6c 	bl	8002184 <NoteMalloc>
    if (printed == NULL) {
 80082ac:	4604      	mov	r4, r0
 80082ae:	b188      	cbz	r0, 80082d4 <print+0x62>
    memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 80082b0:	9a02      	ldr	r2, [sp, #8]
 80082b2:	9b01      	ldr	r3, [sp, #4]
 80082b4:	9900      	ldr	r1, [sp, #0]
 80082b6:	3201      	adds	r2, #1
 80082b8:	429a      	cmp	r2, r3
 80082ba:	bf28      	it	cs
 80082bc:	461a      	movcs	r2, r3
 80082be:	f001 fd37 	bl	8009d30 <memcpy>
    printed[buffer->offset] = '\0'; /* just to be sure */
 80082c2:	9b02      	ldr	r3, [sp, #8]
 80082c4:	2200      	movs	r2, #0
 80082c6:	54e2      	strb	r2, [r4, r3]
    _Free(buffer->buffer);
 80082c8:	9800      	ldr	r0, [sp, #0]
 80082ca:	f7f9 ff63 	bl	8002194 <NoteFree>
}
 80082ce:	4620      	mov	r0, r4
 80082d0:	b007      	add	sp, #28
 80082d2:	bd30      	pop	{r4, r5, pc}
    if (buffer->buffer != NULL) {
 80082d4:	9c00      	ldr	r4, [sp, #0]
 80082d6:	2c00      	cmp	r4, #0
 80082d8:	d0f9      	beq.n	80082ce <print+0x5c>
        _Free(buffer->buffer);
 80082da:	4620      	mov	r0, r4
 80082dc:	f7f9 ff5a 	bl	8002194 <NoteFree>
    return NULL;
 80082e0:	2400      	movs	r4, #0
 80082e2:	e7f4      	b.n	80082ce <print+0x5c>

080082e4 <JParse>:
    return JParseWithOpts(value, 0, 0);
 80082e4:	2200      	movs	r2, #0
 80082e6:	4611      	mov	r1, r2
 80082e8:	f7f9 bbb0 	b.w	8001a4c <JParseWithOpts>

080082ec <JPrintUnformatted>:
    return (char*)print(item, false);
 80082ec:	2100      	movs	r1, #0
 80082ee:	f7ff bfc0 	b.w	8008272 <print>

080082f2 <JGetObjectItem>:
    return get_object_item(object, string, false);
 80082f2:	2200      	movs	r2, #0
 80082f4:	f7f9 b94e 	b.w	8001594 <get_object_item>

080082f8 <JAddItemToObject>:
    add_item_to_object(object, string, item, false);
 80082f8:	2300      	movs	r3, #0
 80082fa:	f7ff bf60 	b.w	80081be <add_item_to_object>

080082fe <JCreateBool>:
{
 80082fe:	b510      	push	{r4, lr}
 8008300:	4604      	mov	r4, r0
    J *item = JNew_Item();
 8008302:	f7ff fef4 	bl	80080ee <JNew_Item>
    if(item) {
 8008306:	b120      	cbz	r0, 8008312 <JCreateBool+0x14>
        item->type = b ? JTrue : JFalse;
 8008308:	2c00      	cmp	r4, #0
 800830a:	bf14      	ite	ne
 800830c:	2302      	movne	r3, #2
 800830e:	2301      	moveq	r3, #1
 8008310:	60c3      	str	r3, [r0, #12]
}
 8008312:	bd10      	pop	{r4, pc}

08008314 <JAddBoolToObject>:
{
 8008314:	b570      	push	{r4, r5, r6, lr}
 8008316:	4605      	mov	r5, r0
    J *bool_item = JCreateBool(boolean);
 8008318:	4610      	mov	r0, r2
{
 800831a:	460e      	mov	r6, r1
    J *bool_item = JCreateBool(boolean);
 800831c:	f7ff ffef 	bl	80082fe <JCreateBool>
    if (add_item_to_object(object, name, bool_item, false)) {
 8008320:	2300      	movs	r3, #0
 8008322:	4602      	mov	r2, r0
    J *bool_item = JCreateBool(boolean);
 8008324:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, bool_item, false)) {
 8008326:	4631      	mov	r1, r6
 8008328:	4628      	mov	r0, r5
 800832a:	f7ff ff48 	bl	80081be <add_item_to_object>
 800832e:	4605      	mov	r5, r0
 8008330:	b918      	cbnz	r0, 800833a <JAddBoolToObject+0x26>
    JDelete(bool_item);
 8008332:	4620      	mov	r0, r4
 8008334:	f7ff ff6a 	bl	800820c <JDelete>
    return NULL;
 8008338:	462c      	mov	r4, r5
}
 800833a:	4620      	mov	r0, r4
 800833c:	bd70      	pop	{r4, r5, r6, pc}

0800833e <JAddNumberToObject>:
{
 800833e:	b570      	push	{r4, r5, r6, lr}
 8008340:	4605      	mov	r5, r0
 8008342:	460e      	mov	r6, r1
    J *number_item = JCreateNumber(number);
 8008344:	4610      	mov	r0, r2
 8008346:	4619      	mov	r1, r3
 8008348:	f7f9 f806 	bl	8001358 <JCreateNumber>
    if (add_item_to_object(object, name, number_item, false)) {
 800834c:	2300      	movs	r3, #0
 800834e:	4602      	mov	r2, r0
    J *number_item = JCreateNumber(number);
 8008350:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, number_item, false)) {
 8008352:	4631      	mov	r1, r6
 8008354:	4628      	mov	r0, r5
 8008356:	f7ff ff32 	bl	80081be <add_item_to_object>
 800835a:	4605      	mov	r5, r0
 800835c:	b918      	cbnz	r0, 8008366 <JAddNumberToObject+0x28>
    JDelete(number_item);
 800835e:	4620      	mov	r0, r4
 8008360:	f7ff ff54 	bl	800820c <JDelete>
    return NULL;
 8008364:	462c      	mov	r4, r5
}
 8008366:	4620      	mov	r0, r4
 8008368:	bd70      	pop	{r4, r5, r6, pc}

0800836a <JCreateString>:

N_CJSON_PUBLIC(J *) JCreateString(const char *string)
{
 800836a:	b538      	push	{r3, r4, r5, lr}
 800836c:	4605      	mov	r5, r0
    J *item = JNew_Item();
 800836e:	f7ff febe 	bl	80080ee <JNew_Item>
    if(item) {
 8008372:	4604      	mov	r4, r0
 8008374:	b158      	cbz	r0, 800838e <JCreateString+0x24>
        item->type = JString;
 8008376:	2310      	movs	r3, #16
 8008378:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)Jstrdup((const unsigned char*)string);
 800837a:	4628      	mov	r0, r5
 800837c:	f7ff ff0c 	bl	8008198 <Jstrdup>
 8008380:	4605      	mov	r5, r0
 8008382:	6120      	str	r0, [r4, #16]
        if(!item->valuestring) {
 8008384:	b918      	cbnz	r0, 800838e <JCreateString+0x24>
            JDelete(item);
 8008386:	4620      	mov	r0, r4
 8008388:	f7ff ff40 	bl	800820c <JDelete>
            return NULL;
 800838c:	462c      	mov	r4, r5
        }
    }

    return item;
}
 800838e:	4620      	mov	r0, r4
 8008390:	bd38      	pop	{r3, r4, r5, pc}

08008392 <JAddStringToObject>:
{
 8008392:	b570      	push	{r4, r5, r6, lr}
 8008394:	4605      	mov	r5, r0
    J *string_item = JCreateString(string);
 8008396:	4610      	mov	r0, r2
{
 8008398:	460e      	mov	r6, r1
    J *string_item = JCreateString(string);
 800839a:	f7ff ffe6 	bl	800836a <JCreateString>
    if (add_item_to_object(object, name, string_item, false)) {
 800839e:	2300      	movs	r3, #0
 80083a0:	4602      	mov	r2, r0
    J *string_item = JCreateString(string);
 80083a2:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, string_item, false)) {
 80083a4:	4631      	mov	r1, r6
 80083a6:	4628      	mov	r0, r5
 80083a8:	f7ff ff09 	bl	80081be <add_item_to_object>
 80083ac:	4605      	mov	r5, r0
 80083ae:	b918      	cbnz	r0, 80083b8 <JAddStringToObject+0x26>
    JDelete(string_item);
 80083b0:	4620      	mov	r0, r4
 80083b2:	f7ff ff2b 	bl	800820c <JDelete>
    return NULL;
 80083b6:	462c      	mov	r4, r5
}
 80083b8:	4620      	mov	r0, r4
 80083ba:	bd70      	pop	{r4, r5, r6, pc}

080083bc <JCreateObject>:

    return item;
}

N_CJSON_PUBLIC(J *) JCreateObject(void)
{
 80083bc:	b508      	push	{r3, lr}
    J *item = JNew_Item();
 80083be:	f7ff fe96 	bl	80080ee <JNew_Item>
    if (item) {
 80083c2:	b108      	cbz	r0, 80083c8 <JCreateObject+0xc>
        item->type = JObject;
 80083c4:	2340      	movs	r3, #64	; 0x40
 80083c6:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
 80083c8:	bd08      	pop	{r3, pc}

080083ca <JIsString>:
    return (item->type & 0xFF) == JNumber;
}

N_CJSON_PUBLIC(Jbool) JIsString(const J * const item)
{
    if (item == NULL) {
 80083ca:	b120      	cbz	r0, 80083d6 <JIsString+0xc>
        return false;
    }

    return (item->type & 0xFF) == JString;
 80083cc:	7b00      	ldrb	r0, [r0, #12]
 80083ce:	f1a0 0310 	sub.w	r3, r0, #16
 80083d2:	4258      	negs	r0, r3
 80083d4:	4158      	adcs	r0, r3
}
 80083d6:	4770      	bx	lr

080083d8 <JIsPresent>:
{
 80083d8:	b508      	push	{r3, lr}
    if (rsp == NULL) {
 80083da:	b120      	cbz	r0, 80083e6 <JIsPresent+0xe>
    return (JGetObjectItem(rsp, field) != NULL);
 80083dc:	f7ff ff89 	bl	80082f2 <JGetObjectItem>
 80083e0:	3800      	subs	r0, #0
 80083e2:	bf18      	it	ne
 80083e4:	2001      	movne	r0, #1
}
 80083e6:	bd08      	pop	{r3, pc}

080083e8 <JIsNullString>:
    @param   field The field to return.
    @returns bool. False if the field is not present, or NULL.
*/
/**************************************************************************/
bool JIsNullString(J *rsp, const char *field)
{
 80083e8:	b510      	push	{r4, lr}
    if (rsp == NULL) {
 80083ea:	b908      	cbnz	r0, 80083f0 <JIsNullString+0x8>
        return false;
 80083ec:	2000      	movs	r0, #0
    }
    if (item->valuestring[0] == '\0') {
        return true;
    }
    return false;
}
 80083ee:	bd10      	pop	{r4, pc}
    J *item = JGetObjectItem(rsp, field);
 80083f0:	f7ff ff7f 	bl	80082f2 <JGetObjectItem>
    if (item == NULL) {
 80083f4:	4604      	mov	r4, r0
 80083f6:	b908      	cbnz	r0, 80083fc <JIsNullString+0x14>
        return true;
 80083f8:	2001      	movs	r0, #1
 80083fa:	e7f8      	b.n	80083ee <JIsNullString+0x6>
    if (!JIsString(item)) {
 80083fc:	f7ff ffe5 	bl	80083ca <JIsString>
 8008400:	2800      	cmp	r0, #0
 8008402:	d0f3      	beq.n	80083ec <JIsNullString+0x4>
    if (item->valuestring == NULL) {
 8008404:	6923      	ldr	r3, [r4, #16]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d0f6      	beq.n	80083f8 <JIsNullString+0x10>
    if (item->valuestring[0] == '\0') {
 800840a:	7818      	ldrb	r0, [r3, #0]
 800840c:	fab0 f080 	clz	r0, r0
 8008410:	0940      	lsrs	r0, r0, #5
 8008412:	e7ec      	b.n	80083ee <JIsNullString+0x6>

08008414 <NoteUserAgentUpdate>:
}
 8008414:	4770      	bx	lr

08008416 <gpio_pin_configure_dt>:
{
 8008416:	b470      	push	{r4, r5, r6}
 8008418:	4603      	mov	r3, r0
	return gpio_pin_configure(spec->port,
 800841a:	6800      	ldr	r0, [r0, #0]
				  spec->dt_flags | extra_flags);
 800841c:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
 800841e:	791d      	ldrb	r5, [r3, #4]
 8008420:	430a      	orrs	r2, r1
	struct gpio_driver_data *data =
 8008422:	6901      	ldr	r1, [r0, #16]
	const struct gpio_driver_api *api =
 8008424:	6886      	ldr	r6, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8008426:	2301      	movs	r3, #1
 8008428:	fa03 f405 	lsl.w	r4, r3, r5
 800842c:	680b      	ldr	r3, [r1, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800842e:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8008432:	bf14      	ite	ne
 8008434:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8008436:	43a3      	biceq	r3, r4
 8008438:	600b      	str	r3, [r1, #0]
	return api->pin_configure(port, pin, flags);
 800843a:	6833      	ldr	r3, [r6, #0]
 800843c:	4629      	mov	r1, r5
}
 800843e:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
 8008440:	4718      	bx	r3

08008442 <platform_millis>:
{
 8008442:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8008444:	f001 fc71 	bl	8009d2a <z_impl_k_uptime_ticks>
 8008448:	220a      	movs	r2, #10
 800844a:	2300      	movs	r3, #0
 800844c:	f7f8 fb4c 	bl	8000ae8 <__aeabi_uldivmod>
}
 8008450:	bd08      	pop	{r3, pc}

08008452 <platform_delay>:
 8008452:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
			return t * ((uint64_t)to_hz / from_hz);
 8008456:	210a      	movs	r1, #10
 8008458:	fb80 0101 	smull	r0, r1, r0, r1
	return z_impl_k_sleep(timeout);
 800845c:	f7ff bb12 	b.w	8007a84 <z_impl_k_sleep>

08008460 <arch_printk_char_out>:
}
 8008460:	2000      	movs	r0, #0
 8008462:	4770      	bx	lr

08008464 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
 8008464:	b40f      	push	{r0, r1, r2, r3}
 8008466:	b507      	push	{r0, r1, r2, lr}
 8008468:	a904      	add	r1, sp, #16
 800846a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 800846e:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
 8008470:	f7fa fc5e 	bl	8002d30 <vprintk>

	va_end(ap);
}
 8008474:	b003      	add	sp, #12
 8008476:	f85d eb04 	ldr.w	lr, [sp], #4
 800847a:	b004      	add	sp, #16
 800847c:	4770      	bx	lr

0800847e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 800847e:	4604      	mov	r4, r0
 8008480:	b508      	push	{r3, lr}
 8008482:	4608      	mov	r0, r1
 8008484:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 8008486:	461a      	mov	r2, r3
 8008488:	47a0      	blx	r4
	return z_impl_z_current_get();
 800848a:	f7ff fb13 	bl	8007ab4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 800848e:	f7fc fb59 	bl	8004b44 <z_impl_k_thread_abort>

08008492 <outs>:
{
 8008492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008496:	4607      	mov	r7, r0
 8008498:	4688      	mov	r8, r1
 800849a:	4615      	mov	r5, r2
 800849c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800849e:	4614      	mov	r4, r2
 80084a0:	42b4      	cmp	r4, r6
 80084a2:	eba4 0005 	sub.w	r0, r4, r5
 80084a6:	d302      	bcc.n	80084ae <outs+0x1c>
 80084a8:	b93e      	cbnz	r6, 80084ba <outs+0x28>
 80084aa:	7823      	ldrb	r3, [r4, #0]
 80084ac:	b12b      	cbz	r3, 80084ba <outs+0x28>
		int rc = out((int)*sp++, ctx);
 80084ae:	f814 0b01 	ldrb.w	r0, [r4], #1
 80084b2:	4641      	mov	r1, r8
 80084b4:	47b8      	blx	r7
		if (rc < 0) {
 80084b6:	2800      	cmp	r0, #0
 80084b8:	daf2      	bge.n	80084a0 <outs+0xe>
}
 80084ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080084be <ring_buf_put_claim>:

#include <sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
 80084be:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
	wrap_size = buf->put_head - base;
 80084c0:	6846      	ldr	r6, [r0, #4]
	base = buf->put_base;
 80084c2:	68c7      	ldr	r7, [r0, #12]
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
 80084c4:	6945      	ldr	r5, [r0, #20]
	if (unlikely(wrap_size >= buf->size)) {
 80084c6:	69c3      	ldr	r3, [r0, #28]
	wrap_size = buf->put_head - base;
 80084c8:	eba6 0c07 	sub.w	ip, r6, r7
 80084cc:	1b75      	subs	r5, r6, r5
	if (unlikely(wrap_size >= buf->size)) {
 80084ce:	4563      	cmp	r3, ip
{
 80084d0:	4604      	mov	r4, r0
 80084d2:	eba3 0005 	sub.w	r0, r3, r5
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
 80084d6:	bf9c      	itt	ls
 80084d8:	ebac 0c03 	subls.w	ip, ip, r3
		base += buf->size;
 80084dc:	18ff      	addls	r7, r7, r3
	}
	wrap_size = buf->size - wrap_size;

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
 80084de:	4282      	cmp	r2, r0
 80084e0:	bf28      	it	cs
 80084e2:	4602      	movcs	r2, r0
	wrap_size = buf->size - wrap_size;
 80084e4:	eba3 000c 	sub.w	r0, r3, ip
	size = MIN(size, wrap_size);
 80084e8:	4290      	cmp	r0, r2

	*data = &buf->buffer[buf->put_head - base];
 80084ea:	6823      	ldr	r3, [r4, #0]
	size = MIN(size, wrap_size);
 80084ec:	bf28      	it	cs
 80084ee:	4610      	movcs	r0, r2
	*data = &buf->buffer[buf->put_head - base];
 80084f0:	1bf7      	subs	r7, r6, r7
 80084f2:	441f      	add	r7, r3
	buf->put_head += size;
 80084f4:	4406      	add	r6, r0
	*data = &buf->buffer[buf->put_head - base];
 80084f6:	600f      	str	r7, [r1, #0]
	buf->put_head += size;
 80084f8:	6066      	str	r6, [r4, #4]

	return size;
}
 80084fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084fc <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
 80084fc:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
 8008500:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
 8008502:	428a      	cmp	r2, r1
 8008504:	d30b      	bcc.n	800851e <ring_buf_put_finish+0x22>
		return -EINVAL;
	}

	buf->put_tail += size;
 8008506:	4419      	add	r1, r3
	buf->put_head = buf->put_tail;

	wrap_size = buf->put_tail - buf->put_base;
 8008508:	68c3      	ldr	r3, [r0, #12]
	if (unlikely(wrap_size >= buf->size)) {
 800850a:	69c2      	ldr	r2, [r0, #28]
	buf->put_head = buf->put_tail;
 800850c:	e9c0 1101 	strd	r1, r1, [r0, #4]
	wrap_size = buf->put_tail - buf->put_base;
 8008510:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
 8008512:	428a      	cmp	r2, r1
 8008514:	d801      	bhi.n	800851a <ring_buf_put_finish+0x1e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
 8008516:	4413      	add	r3, r2
 8008518:	60c3      	str	r3, [r0, #12]
	}

	return 0;
 800851a:	2000      	movs	r0, #0
}
 800851c:	4770      	bx	lr
		return -EINVAL;
 800851e:	f06f 0015 	mvn.w	r0, #21
 8008522:	4770      	bx	lr

08008524 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
 8008524:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008528:	4680      	mov	r8, r0
 800852a:	460e      	mov	r6, r1
 800852c:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
 800852e:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
 8008530:	462a      	mov	r2, r5
 8008532:	a901      	add	r1, sp, #4
 8008534:	4640      	mov	r0, r8
 8008536:	f7ff ffc2 	bl	80084be <ring_buf_put_claim>
 800853a:	4631      	mov	r1, r6
 800853c:	4604      	mov	r4, r0
 800853e:	4602      	mov	r2, r0
 8008540:	9801      	ldr	r0, [sp, #4]
 8008542:	f001 fbf5 	bl	8009d30 <memcpy>
		memcpy(dst, data, partial_size);
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
 8008546:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
 8008548:	4427      	add	r7, r4
		data += partial_size;
 800854a:	4426      	add	r6, r4
	} while (size && partial_size);
 800854c:	d001      	beq.n	8008552 <ring_buf_put+0x2e>
 800854e:	2c00      	cmp	r4, #0
 8008550:	d1ee      	bne.n	8008530 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
 8008552:	4639      	mov	r1, r7
 8008554:	4640      	mov	r0, r8
 8008556:	f7ff ffd1 	bl	80084fc <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
 800855a:	4638      	mov	r0, r7
 800855c:	b002      	add	sp, #8
 800855e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008562 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
 8008562:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
 8008564:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
 8008566:	6905      	ldr	r5, [r0, #16]
	if (unlikely(wrap_size >= buf->size)) {
 8008568:	69c3      	ldr	r3, [r0, #28]
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
 800856a:	6887      	ldr	r7, [r0, #8]
	wrap_size = buf->get_head - base;
 800856c:	eba5 0c06 	sub.w	ip, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
 8008570:	4563      	cmp	r3, ip
{
 8008572:	4604      	mov	r4, r0
 8008574:	eba7 0005 	sub.w	r0, r7, r5
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
 8008578:	bf9c      	itt	ls
 800857a:	ebac 0c03 	subls.w	ip, ip, r3
		base += buf->size;
 800857e:	18f6      	addls	r6, r6, r3
	}
	wrap_size = buf->size - wrap_size;

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
 8008580:	4290      	cmp	r0, r2
 8008582:	bf28      	it	cs
 8008584:	4610      	movcs	r0, r2
 8008586:	4607      	mov	r7, r0
	wrap_size = buf->size - wrap_size;
 8008588:	eba3 000c 	sub.w	r0, r3, ip
	size = MIN(size, wrap_size);
 800858c:	42b8      	cmp	r0, r7

	*data = &buf->buffer[buf->get_head - base];
 800858e:	6823      	ldr	r3, [r4, #0]
	size = MIN(size, wrap_size);
 8008590:	bf28      	it	cs
 8008592:	4638      	movcs	r0, r7
	*data = &buf->buffer[buf->get_head - base];
 8008594:	1bae      	subs	r6, r5, r6
 8008596:	441e      	add	r6, r3
	buf->get_head += size;
 8008598:	4405      	add	r5, r0
	*data = &buf->buffer[buf->get_head - base];
 800859a:	600e      	str	r6, [r1, #0]
	buf->get_head += size;
 800859c:	6125      	str	r5, [r4, #16]

	return size;
}
 800859e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080085a0 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
 80085a0:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 80085a4:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
 80085a6:	428a      	cmp	r2, r1
 80085a8:	d30b      	bcc.n	80085c2 <ring_buf_get_finish+0x22>
		return -EINVAL;
	}

	buf->get_tail += size;
 80085aa:	4419      	add	r1, r3
	buf->get_head = buf->get_tail;

	wrap_size = buf->get_tail - buf->get_base;
	if (unlikely(wrap_size >= buf->size)) {
 80085ac:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
	buf->get_head = buf->get_tail;
 80085b0:	e9c0 1104 	strd	r1, r1, [r0, #16]
	wrap_size = buf->get_tail - buf->get_base;
 80085b4:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
 80085b6:	428a      	cmp	r2, r1
 80085b8:	d801      	bhi.n	80085be <ring_buf_get_finish+0x1e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
 80085ba:	4413      	add	r3, r2
 80085bc:	6183      	str	r3, [r0, #24]
	}

	return 0;
 80085be:	2000      	movs	r0, #0
}
 80085c0:	4770      	bx	lr
		return -EINVAL;
 80085c2:	f06f 0015 	mvn.w	r0, #21
 80085c6:	4770      	bx	lr

080085c8 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
 80085c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80085cc:	4680      	mov	r8, r0
 80085ce:	460d      	mov	r5, r1
 80085d0:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
 80085d2:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
 80085d4:	4632      	mov	r2, r6
 80085d6:	a901      	add	r1, sp, #4
 80085d8:	4640      	mov	r0, r8
 80085da:	f7ff ffc2 	bl	8008562 <ring_buf_get_claim>
 80085de:	4604      	mov	r4, r0
		if (data) {
 80085e0:	b12d      	cbz	r5, 80085ee <ring_buf_get+0x26>
 80085e2:	4602      	mov	r2, r0
 80085e4:	9901      	ldr	r1, [sp, #4]
 80085e6:	4628      	mov	r0, r5
 80085e8:	f001 fba2 	bl	8009d30 <memcpy>
			memcpy(data, src, partial_size);
			data += partial_size;
 80085ec:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
 80085ee:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
 80085f0:	4427      	add	r7, r4
	} while (size && partial_size);
 80085f2:	d001      	beq.n	80085f8 <ring_buf_get+0x30>
 80085f4:	2c00      	cmp	r4, #0
 80085f6:	d1ed      	bne.n	80085d4 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
 80085f8:	4639      	mov	r1, r7
 80085fa:	4640      	mov	r0, r8
 80085fc:	f7ff ffd0 	bl	80085a0 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
 8008600:	4638      	mov	r0, r7
 8008602:	b002      	add	sp, #8
 8008604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008608 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8008608:	4770      	bx	lr

0800860a <HAL_Delay>:
 *	  on variable incremented.
 * @param Delay: specifies the delay time length, in milliseconds.
 * @return None
 */
void HAL_Delay(__IO uint32_t Delay)
{
 800860a:	b082      	sub	sp, #8
 800860c:	9001      	str	r0, [sp, #4]
	k_msleep(Delay);
 800860e:	9901      	ldr	r1, [sp, #4]
 8008610:	200a      	movs	r0, #10
 8008612:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8008616:	fb81 0100 	smull	r0, r1, r1, r0
}
 800861a:	b002      	add	sp, #8
	return z_impl_k_sleep(timeout);
 800861c:	f7ff ba32 	b.w	8007a84 <z_impl_k_sleep>

08008620 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 8008620:	2000      	movs	r0, #0
 8008622:	4770      	bx	lr

08008624 <usb_write>:
{
 8008624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008628:	4606      	mov	r6, r0
 800862a:	460f      	mov	r7, r1
 800862c:	4690      	mov	r8, r2
 800862e:	4699      	mov	r9, r3
 8008630:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
 8008632:	464b      	mov	r3, r9
 8008634:	4642      	mov	r2, r8
 8008636:	4639      	mov	r1, r7
 8008638:	4630      	mov	r0, r6
 800863a:	f7fc fda5 	bl	8005188 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
 800863e:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
 8008642:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
 8008644:	d103      	bne.n	800864e <usb_write+0x2a>
	z_impl_k_yield();
 8008646:	f7ff f995 	bl	8007974 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
 800864a:	3d01      	subs	r5, #1
 800864c:	d1f1      	bne.n	8008632 <usb_write+0xe>
}
 800864e:	4620      	mov	r0, r4
 8008650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008654 <usb_get_dev_data_by_cfg>:
	return list->head;
 8008654:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 8008656:	b140      	cbz	r0, 800866a <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
 8008658:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 8008660:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
 8008664:	d001      	beq.n	800866a <usb_get_dev_data_by_cfg+0x16>
	return node->next;
 8008666:	6840      	ldr	r0, [r0, #4]
 8008668:	e7f5      	b.n	8008656 <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
 800866a:	4770      	bx	lr

0800866c <usb_get_dev_data_by_iface>:
	return list->head;
 800866c:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 800866e:	b150      	cbz	r0, 8008686 <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
 8008670:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
 8008674:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	789b      	ldrb	r3, [r3, #2]
 800867a:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 800867c:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
 8008680:	d001      	beq.n	8008686 <usb_get_dev_data_by_iface+0x1a>
	return node->next;
 8008682:	6840      	ldr	r0, [r0, #4]
 8008684:	e7f3      	b.n	800866e <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
 8008686:	4770      	bx	lr

08008688 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
 8008688:	b530      	push	{r4, r5, lr}
	return list->head;
 800868a:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 800868c:	b188      	cbz	r0, 80086b2 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
 800868e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008692:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
 8008694:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
 8008696:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 8008698:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
 800869a:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
 800869c:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
 800869e:	b2dc      	uxtb	r4, r3
 80086a0:	42a5      	cmp	r5, r4
 80086a2:	d801      	bhi.n	80086a8 <usb_get_dev_data_by_ep+0x20>
	return node->next;
 80086a4:	6840      	ldr	r0, [r0, #4]
 80086a6:	e7f1      	b.n	800868c <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
 80086a8:	3301      	adds	r3, #1
 80086aa:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
 80086ae:	428c      	cmp	r4, r1
 80086b0:	d1f5      	bne.n	800869e <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
 80086b2:	bd30      	pop	{r4, r5, pc}

080086b4 <usb_transfer_is_busy>:
{
 80086b4:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
 80086b6:	f7fb fc69 	bl	8003f8c <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
 80086ba:	b128      	cbz	r0, 80086c8 <usb_transfer_is_busy+0x14>
 80086bc:	6840      	ldr	r0, [r0, #4]
 80086be:	f110 0f10 	cmn.w	r0, #16
 80086c2:	bf14      	ite	ne
 80086c4:	2000      	movne	r0, #0
 80086c6:	2001      	moveq	r0, #1
}
 80086c8:	bd08      	pop	{r3, pc}

080086ca <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
 80086ca:	1c4b      	adds	r3, r1, #1
 80086cc:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
 80086ce:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
 80086d0:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
 80086d2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
 80086d6:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
 80086d8:	f800 1c06 	strb.w	r1, [r0, #-6]
}
 80086dc:	4770      	bx	lr

080086de <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
 80086de:	e950 3102 	ldrd	r3, r1, [r0, #-8]
 80086e2:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80086e4:	4718      	bx	r3

080086e6 <cdc_acm_irq_tx_disable>:
	dev_data->tx_irq_ena = false;
 80086e6:	6903      	ldr	r3, [r0, #16]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
 80086ee:	4770      	bx	lr

080086f0 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
 80086f0:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
 80086f2:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 80086f6:	b108      	cbz	r0, 80086fc <cdc_acm_irq_tx_ready+0xc>
		return 1;
 80086f8:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
 80086fc:	4770      	bx	lr

080086fe <cdc_acm_irq_rx_disable>:
	dev_data->rx_irq_ena = false;
 80086fe:	6903      	ldr	r3, [r0, #16]
 8008700:	2200      	movs	r2, #0
 8008702:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 8008706:	4770      	bx	lr

08008708 <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
 8008708:	6903      	ldr	r3, [r0, #16]
}
 800870a:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 800870e:	4770      	bx	lr

08008710 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
 8008710:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
 8008712:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8008716:	b112      	cbz	r2, 800871e <cdc_acm_irq_is_pending+0xe>
 8008718:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800871c:	b92a      	cbnz	r2, 800872a <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
 800871e:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 8008722:	b118      	cbz	r0, 800872c <cdc_acm_irq_is_pending+0x1c>
		return 0;
 8008724:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
 8008728:	4770      	bx	lr
		return 1;
 800872a:	2001      	movs	r0, #1
}
 800872c:	4770      	bx	lr

0800872e <cdc_acm_irq_update>:
}
 800872e:	2001      	movs	r0, #1
 8008730:	4770      	bx	lr

08008732 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
 8008732:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
 8008734:	e9c3 1200 	strd	r1, r2, [r3]
}
 8008738:	4770      	bx	lr

0800873a <cdc_acm_line_ctrl_get>:
	switch (ctrl) {
 800873a:	2902      	cmp	r1, #2
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
 800873c:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
 800873e:	d007      	beq.n	8008750 <cdc_acm_line_ctrl_get+0x16>
 8008740:	2904      	cmp	r1, #4
 8008742:	d00a      	beq.n	800875a <cdc_acm_line_ctrl_get+0x20>
 8008744:	2901      	cmp	r1, #1
 8008746:	d10d      	bne.n	8008764 <cdc_acm_line_ctrl_get+0x2a>
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
 8008748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
		*val = (dev_data->line_state &
 800874a:	6013      	str	r3, [r2, #0]
		return 0;
 800874c:	2000      	movs	r0, #0
 800874e:	4770      	bx	lr
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
 8008750:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8008754:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008758:	e7f7      	b.n	800874a <cdc_acm_line_ctrl_get+0x10>
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
 800875a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800875e:	f003 0301 	and.w	r3, r3, #1
 8008762:	e7f2      	b.n	800874a <cdc_acm_line_ctrl_get+0x10>
	switch (ctrl) {
 8008764:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8008768:	4770      	bx	lr

0800876a <cdc_acm_fifo_read>:
{
 800876a:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
 800876c:	6904      	ldr	r4, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
 800876e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008770:	f7ff ff2a 	bl	80085c8 <ring_buf_get>
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
 8008774:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008776:	691a      	ldr	r2, [r3, #16]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	429a      	cmp	r2, r3
		dev_data->rx_ready = false;
 800877c:	bf04      	itt	eq
 800877e:	2300      	moveq	r3, #0
 8008780:	f884 3029 	strbeq.w	r3, [r4, #41]	; 0x29
}
 8008784:	bd10      	pop	{r4, pc}

08008786 <cdc_acm_poll_in>:
{
 8008786:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
 8008788:	2201      	movs	r2, #1
 800878a:	f7ff ffee 	bl	800876a <cdc_acm_fifo_read>
}
 800878e:	3801      	subs	r0, #1
 8008790:	bf18      	it	ne
 8008792:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008796:	bd08      	pop	{r3, pc}

08008798 <cdc_acm_line_ctrl_set>:
	switch (ctrl) {
 8008798:	2940      	cmp	r1, #64	; 0x40
{
 800879a:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
 800879c:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
 800879e:	d042      	beq.n	8008826 <cdc_acm_line_ctrl_set+0x8e>
 80087a0:	d813      	bhi.n	80087ca <cdc_acm_line_ctrl_set+0x32>
 80087a2:	2910      	cmp	r1, #16
 80087a4:	d032      	beq.n	800880c <cdc_acm_line_ctrl_set+0x74>
 80087a6:	d806      	bhi.n	80087b6 <cdc_acm_line_ctrl_set+0x1e>
 80087a8:	2901      	cmp	r1, #1
 80087aa:	d01e      	beq.n	80087ea <cdc_acm_line_ctrl_set+0x52>
 80087ac:	2908      	cmp	r1, #8
 80087ae:	d01f      	beq.n	80087f0 <cdc_acm_line_ctrl_set+0x58>
 80087b0:	f06f 0012 	mvn.w	r0, #18
}
 80087b4:	bd08      	pop	{r3, pc}
	switch (ctrl) {
 80087b6:	2920      	cmp	r1, #32
 80087b8:	d1fa      	bne.n	80087b0 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
 80087ba:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
 80087be:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
		if (val) {
 80087c2:	b342      	cbz	r2, 8008816 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
 80087c4:	f041 0104 	orr.w	r1, r1, #4
 80087c8:	e025      	b.n	8008816 <cdc_acm_line_ctrl_set+0x7e>
	switch (ctrl) {
 80087ca:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80087ce:	d033      	beq.n	8008838 <cdc_acm_line_ctrl_set+0xa0>
 80087d0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80087d4:	d039      	beq.n	800884a <cdc_acm_line_ctrl_set+0xb2>
 80087d6:	2980      	cmp	r1, #128	; 0x80
 80087d8:	d1ea      	bne.n	80087b0 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
 80087da:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
 80087de:	f001 01ef 	and.w	r1, r1, #239	; 0xef
		if (val) {
 80087e2:	b1c2      	cbz	r2, 8008816 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
 80087e4:	f041 0110 	orr.w	r1, r1, #16
 80087e8:	e015      	b.n	8008816 <cdc_acm_line_ctrl_set+0x7e>
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
 80087ea:	675a      	str	r2, [r3, #116]	; 0x74
		return 0;
 80087ec:	2000      	movs	r0, #0
 80087ee:	e7e1      	b.n	80087b4 <cdc_acm_line_ctrl_set+0x1c>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
 80087f0:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
 80087f4:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		if (val) {
 80087f8:	b92a      	cbnz	r2, 8008806 <cdc_acm_line_ctrl_set+0x6e>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
 80087fa:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
 80087fe:	2101      	movs	r1, #1
		cdc_acm_send_notification(dev, dev_data->serial_state);
 8008800:	f7fb ff04 	bl	800460c <cdc_acm_send_notification.isra.0>
 8008804:	e7f2      	b.n	80087ec <cdc_acm_line_ctrl_set+0x54>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
 8008806:	f041 0101 	orr.w	r1, r1, #1
 800880a:	e7f6      	b.n	80087fa <cdc_acm_line_ctrl_set+0x62>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
 800880c:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
 8008810:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
		if (val) {
 8008814:	b922      	cbnz	r2, 8008820 <cdc_acm_line_ctrl_set+0x88>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
 8008816:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
 800881a:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
 800881e:	e7ef      	b.n	8008800 <cdc_acm_line_ctrl_set+0x68>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
 8008820:	f041 0102 	orr.w	r1, r1, #2
 8008824:	e7f7      	b.n	8008816 <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
 8008826:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
 800882a:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
		if (val) {
 800882e:	2a00      	cmp	r2, #0
 8008830:	d0f1      	beq.n	8008816 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
 8008832:	f041 0108 	orr.w	r1, r1, #8
 8008836:	e7ee      	b.n	8008816 <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
 8008838:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
 800883c:	f001 01df 	and.w	r1, r1, #223	; 0xdf
		if (val) {
 8008840:	2a00      	cmp	r2, #0
 8008842:	d0e8      	beq.n	8008816 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
 8008844:	f041 0120 	orr.w	r1, r1, #32
 8008848:	e7e5      	b.n	8008816 <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
 800884a:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
 800884e:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
		if (val) {
 8008852:	2a00      	cmp	r2, #0
 8008854:	d0df      	beq.n	8008816 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
 8008856:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800885a:	e7dc      	b.n	8008816 <cdc_acm_line_ctrl_set+0x7e>

0800885c <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 800885c:	f001 b8f0 	b.w	8009a40 <z_fatal_error>

08008860 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 8008860:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 8008862:	6800      	ldr	r0, [r0, #0]
 8008864:	f001 b8ec 	b.w	8009a40 <z_fatal_error>

08008868 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8008868:	2100      	movs	r1, #0
 800886a:	2001      	movs	r0, #1
 800886c:	f7ff bff6 	b.w	800885c <z_arm_fatal_error>

08008870 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 8008870:	b508      	push	{r3, lr}
	handler();
 8008872:	f7fb ff5f 	bl	8004734 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8008876:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 800887a:	f7fc b833 	b.w	80048e4 <z_arm_exc_exit>

0800887e <malloc_prepare>:
}
 800887e:	2000      	movs	r0, #0
 8008880:	4770      	bx	lr

08008882 <_stdout_hook_default>:
}
 8008882:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008886:	4770      	bx	lr

08008888 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
 8008888:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800888c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008890:	f7fe bc0a 	b.w	80070a8 <z_impl_k_mutex_lock>

08008894 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
 8008894:	f7fe bc80 	b.w	8007198 <z_impl_k_mutex_unlock>

08008898 <gpio_pin_configure_dt.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
 8008898:	b470      	push	{r4, r5, r6}
 800889a:	4603      	mov	r3, r0
	return gpio_pin_configure(spec->port,
 800889c:	6800      	ldr	r0, [r0, #0]
				  spec->dt_flags | extra_flags);
 800889e:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
 80088a0:	791d      	ldrb	r5, [r3, #4]
 80088a2:	430a      	orrs	r2, r1
	struct gpio_driver_data *data =
 80088a4:	6901      	ldr	r1, [r0, #16]
	const struct gpio_driver_api *api =
 80088a6:	6886      	ldr	r6, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80088a8:	2301      	movs	r3, #1
 80088aa:	fa03 f405 	lsl.w	r4, r3, r5
 80088ae:	680b      	ldr	r3, [r1, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80088b0:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80088b4:	bf14      	ite	ne
 80088b6:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80088b8:	43a3      	biceq	r3, r4
 80088ba:	600b      	str	r3, [r1, #0]
	return api->pin_configure(port, pin, flags);
 80088bc:	6833      	ldr	r3, [r6, #0]
 80088be:	4629      	mov	r1, r5
}
 80088c0:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
 80088c2:	4718      	bx	r3

080088c4 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 80088c4:	2200      	movs	r2, #0
{
 80088c6:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 80088c8:	4611      	mov	r1, r2
 80088ca:	2006      	movs	r0, #6
 80088cc:	f7fb ff1a 	bl	8004704 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 80088d0:	2200      	movs	r2, #0
 80088d2:	4611      	mov	r1, r2
 80088d4:	2007      	movs	r0, #7
 80088d6:	f7fb ff15 	bl	8004704 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 80088da:	2200      	movs	r2, #0
 80088dc:	4611      	mov	r1, r2
 80088de:	2008      	movs	r0, #8
 80088e0:	f7fb ff10 	bl	8004704 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 80088e4:	2200      	movs	r2, #0
 80088e6:	4611      	mov	r1, r2
 80088e8:	2009      	movs	r0, #9
 80088ea:	f7fb ff0b 	bl	8004704 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 80088ee:	2200      	movs	r2, #0
 80088f0:	4611      	mov	r1, r2
 80088f2:	200a      	movs	r0, #10
 80088f4:	f7fb ff06 	bl	8004704 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 80088f8:	2200      	movs	r2, #0
 80088fa:	4611      	mov	r1, r2
 80088fc:	2017      	movs	r0, #23
 80088fe:	f7fb ff01 	bl	8004704 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8008902:	2200      	movs	r2, #0
 8008904:	4611      	mov	r1, r2
 8008906:	2028      	movs	r0, #40	; 0x28
 8008908:	f7fb fefc 	bl	8004704 <z_arm_irq_priority_set>
}
 800890c:	2000      	movs	r0, #0
 800890e:	bd08      	pop	{r3, pc}

08008910 <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, dev);
 8008910:	6902      	ldr	r2, [r0, #16]
 8008912:	2110      	movs	r1, #16
 8008914:	200a      	movs	r0, #10
 8008916:	f7fc ba2f 	b.w	8004d78 <__stm32_exti_isr.isra.0>

0800891a <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, dev);
 800891a:	6902      	ldr	r2, [r0, #16]
 800891c:	210a      	movs	r1, #10
 800891e:	2005      	movs	r0, #5
 8008920:	f7fc ba2a 	b.w	8004d78 <__stm32_exti_isr.isra.0>

08008924 <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, dev);
 8008924:	6902      	ldr	r2, [r0, #16]
 8008926:	2105      	movs	r1, #5
 8008928:	2004      	movs	r0, #4
 800892a:	f7fc ba25 	b.w	8004d78 <__stm32_exti_isr.isra.0>

0800892e <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, dev);
 800892e:	6902      	ldr	r2, [r0, #16]
 8008930:	2104      	movs	r1, #4
 8008932:	2003      	movs	r0, #3
 8008934:	f7fc ba20 	b.w	8004d78 <__stm32_exti_isr.isra.0>

08008938 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, dev);
 8008938:	6902      	ldr	r2, [r0, #16]
 800893a:	2103      	movs	r1, #3
 800893c:	2002      	movs	r0, #2
 800893e:	f7fc ba1b 	b.w	8004d78 <__stm32_exti_isr.isra.0>

08008942 <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, dev);
 8008942:	6902      	ldr	r2, [r0, #16]
 8008944:	2102      	movs	r1, #2
 8008946:	2001      	movs	r0, #1
 8008948:	f7fc ba16 	b.w	8004d78 <__stm32_exti_isr.isra.0>

0800894c <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, dev);
 800894c:	6902      	ldr	r2, [r0, #16]
 800894e:	2101      	movs	r1, #1
 8008950:	2000      	movs	r0, #0
 8008952:	f7fc ba11 	b.w	8004d78 <__stm32_exti_isr.isra.0>

08008956 <usb_dc_ep_set_callback>:
{
 8008956:	b510      	push	{r4, lr}
 8008958:	460c      	mov	r4, r1
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 800895a:	f7fc fa99 	bl	8004e90 <usb_dc_stm32_get_ep_state>
	if (!ep_state) {
 800895e:	b110      	cbz	r0, 8008966 <usb_dc_ep_set_callback+0x10>
	ep_state->cb = cb;
 8008960:	6084      	str	r4, [r0, #8]
	return 0;
 8008962:	2000      	movs	r0, #0
}
 8008964:	bd10      	pop	{r4, pc}
		return -EINVAL;
 8008966:	f06f 0015 	mvn.w	r0, #21
 800896a:	e7fb      	b.n	8008964 <usb_dc_ep_set_callback+0xe>

0800896c <usb_dc_ep_check_cap>:
	uint8_t ep_idx = USB_EP_GET_IDX(cfg->ep_addr);
 800896c:	7803      	ldrb	r3, [r0, #0]
	if ((cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
 800896e:	7902      	ldrb	r2, [r0, #4]
	uint8_t ep_idx = USB_EP_GET_IDX(cfg->ep_addr);
 8008970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	if ((cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
 8008974:	b922      	cbnz	r2, 8008980 <usb_dc_ep_check_cap+0x14>
 8008976:	1e18      	subs	r0, r3, #0
 8008978:	bf18      	it	ne
 800897a:	2001      	movne	r0, #1
 800897c:	4240      	negs	r0, r0
 800897e:	4770      	bx	lr
	if (ep_idx > (USB_NUM_BIDIR_ENDPOINTS - 1)) {
 8008980:	2b05      	cmp	r3, #5
 8008982:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008986:	bf98      	it	ls
 8008988:	2000      	movls	r0, #0
}
 800898a:	4770      	bx	lr

0800898c <usb_dc_ep_configure>:
{
 800898c:	b510      	push	{r4, lr}
 800898e:	4604      	mov	r4, r0
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 8008990:	7800      	ldrb	r0, [r0, #0]
 8008992:	f7fc fa7d 	bl	8004e90 <usb_dc_stm32_get_ep_state>
	if (!ep_state) {
 8008996:	4603      	mov	r3, r0
 8008998:	b198      	cbz	r0, 80089c2 <usb_dc_ep_configure+0x36>
	ep_state->ep_mps = ep_cfg->ep_mps;
 800899a:	8862      	ldrh	r2, [r4, #2]
 800899c:	8002      	strh	r2, [r0, #0]
	switch (ep_cfg->ep_type) {
 800899e:	7922      	ldrb	r2, [r4, #4]
 80089a0:	2a03      	cmp	r2, #3
 80089a2:	d80e      	bhi.n	80089c2 <usb_dc_ep_configure+0x36>
 80089a4:	e8df f002 	tbb	[pc, r2]
 80089a8:	0b090502 	.word	0x0b090502
		ep_state->ep_type = EP_TYPE_CTRL;
 80089ac:	2000      	movs	r0, #0
 80089ae:	7118      	strb	r0, [r3, #4]
}
 80089b0:	bd10      	pop	{r4, pc}
		ep_state->ep_type = EP_TYPE_ISOC;
 80089b2:	2201      	movs	r2, #1
		ep_state->ep_type = EP_TYPE_INTR;
 80089b4:	711a      	strb	r2, [r3, #4]
	return 0;
 80089b6:	2000      	movs	r0, #0
		break;
 80089b8:	e7fa      	b.n	80089b0 <usb_dc_ep_configure+0x24>
		ep_state->ep_type = EP_TYPE_BULK;
 80089ba:	2202      	movs	r2, #2
 80089bc:	e7fa      	b.n	80089b4 <usb_dc_ep_configure+0x28>
		ep_state->ep_type = EP_TYPE_INTR;
 80089be:	2203      	movs	r2, #3
 80089c0:	e7f8      	b.n	80089b4 <usb_dc_ep_configure+0x28>
	switch (ep_cfg->ep_type) {
 80089c2:	f06f 0015 	mvn.w	r0, #21
 80089c6:	e7f3      	b.n	80089b0 <usb_dc_ep_configure+0x24>

080089c8 <usb_dc_ep_is_stalled>:
{
 80089c8:	b510      	push	{r4, lr}
 80089ca:	460c      	mov	r4, r1
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 80089cc:	f7fc fa60 	bl	8004e90 <usb_dc_stm32_get_ep_state>
	if (!ep_state || !stalled) {
 80089d0:	b120      	cbz	r0, 80089dc <usb_dc_ep_is_stalled+0x14>
 80089d2:	b11c      	cbz	r4, 80089dc <usb_dc_ep_is_stalled+0x14>
	*stalled = ep_state->ep_stalled;
 80089d4:	7943      	ldrb	r3, [r0, #5]
 80089d6:	7023      	strb	r3, [r4, #0]
	return 0;
 80089d8:	2000      	movs	r0, #0
}
 80089da:	bd10      	pop	{r4, pc}
		return -EINVAL;
 80089dc:	f06f 0015 	mvn.w	r0, #21
 80089e0:	e7fb      	b.n	80089da <usb_dc_ep_is_stalled+0x12>

080089e2 <usb_dc_ep_read>:
{
 80089e2:	b510      	push	{r4, lr}
 80089e4:	4604      	mov	r4, r0
	if (usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes) != 0) {
 80089e6:	f7fc fc1d 	bl	8005224 <usb_dc_ep_read_wait>
 80089ea:	b918      	cbnz	r0, 80089f4 <usb_dc_ep_read+0x12>
	if (usb_dc_ep_read_continue(ep) != 0) {
 80089ec:	4620      	mov	r0, r4
 80089ee:	f7fc fc49 	bl	8005284 <usb_dc_ep_read_continue>
 80089f2:	b108      	cbz	r0, 80089f8 <usb_dc_ep_read+0x16>
		return -EINVAL;
 80089f4:	f06f 0015 	mvn.w	r0, #21
}
 80089f8:	bd10      	pop	{r4, pc}

080089fa <usb_dc_ep_mps>:
{
 80089fa:	b508      	push	{r3, lr}
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 80089fc:	f7fc fa48 	bl	8004e90 <usb_dc_stm32_get_ep_state>
	if (!ep_state) {
 8008a00:	b108      	cbz	r0, 8008a06 <usb_dc_ep_mps+0xc>
	return ep_state->ep_mps;
 8008a02:	8800      	ldrh	r0, [r0, #0]
}
 8008a04:	bd08      	pop	{r3, pc}
		return -EINVAL;
 8008a06:	f06f 0015 	mvn.w	r0, #21
 8008a0a:	e7fb      	b.n	8008a04 <usb_dc_ep_mps+0xa>

08008a0c <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008a0c:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_idx = USB_EP_GET_IDX(epnum);
 8008a0e:	f001 047f 	and.w	r4, r1, #127	; 0x7f
	uint8_t ep = ep_idx | USB_EP_DIR_OUT;
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 8008a12:	4620      	mov	r0, r4
 8008a14:	f7fc fa3c 	bl	8004e90 <usb_dc_stm32_get_ep_state>
 8008a18:	4605      	mov	r5, r0
		HAL_PCD_EP_GetRxCount(&usb_dc_stm32_state.pcd, epnum));

	/* Transaction complete, data is now stored in the buffer and ready
	 * for the upper stack (usb_dc_ep_read to retrieve).
	 */
	usb_dc_ep_get_read_count(ep, &ep_state->read_count);
 8008a1a:	f100 010c 	add.w	r1, r0, #12
 8008a1e:	4620      	mov	r0, r4
 8008a20:	f7fc fb3e 	bl	80050a0 <usb_dc_ep_get_read_count>
	ep_state->read_offset = 0U;
 8008a24:	2300      	movs	r3, #0
 8008a26:	612b      	str	r3, [r5, #16]

	if (ep_state->cb) {
 8008a28:	68ab      	ldr	r3, [r5, #8]
 8008a2a:	b123      	cbz	r3, 8008a36 <HAL_PCD_DataOutStageCallback+0x2a>
		ep_state->cb(ep, USB_DC_EP_DATA_OUT);
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	2101      	movs	r1, #1
	}
}
 8008a30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ep_state->cb(ep, USB_DC_EP_DATA_OUT);
 8008a34:	4718      	bx	r3
}
 8008a36:	bd70      	pop	{r4, r5, r6, pc}

08008a38 <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008a38:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_idx = USB_EP_GET_IDX(epnum);
	uint8_t ep = ep_idx | USB_EP_DIR_IN;
 8008a3a:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f7fc fa26 	bl	8004e90 <usb_dc_stm32_get_ep_state>
 8008a44:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
 8008a46:	3014      	adds	r0, #20
 8008a48:	f7fe fbe8 	bl	800721c <z_impl_k_sem_give>

	__ASSERT(ep_state, "No corresponding ep_state for ep");

	k_sem_give(&ep_state->write_sem);

	if (ep_state->cb) {
 8008a4c:	68ab      	ldr	r3, [r5, #8]
 8008a4e:	b123      	cbz	r3, 8008a5a <HAL_PCD_DataInStageCallback+0x22>
		ep_state->cb(ep, USB_DC_EP_DATA_IN);
 8008a50:	4620      	mov	r0, r4
 8008a52:	2102      	movs	r1, #2
	}
}
 8008a54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ep_state->cb(ep, USB_DC_EP_DATA_IN);
 8008a58:	4718      	bx	r3
}
 8008a5a:	bd70      	pop	{r4, r5, r6, pc}

08008a5c <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8008a5c:	6843      	ldr	r3, [r0, #4]
 8008a5e:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8008a60:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8008a62:	600b      	str	r3, [r1, #0]
}
 8008a64:	2000      	movs	r0, #0
 8008a66:	4770      	bx	lr

08008a68 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8008a68:	6843      	ldr	r3, [r0, #4]
 8008a6a:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8008a6c:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8008a6e:	4042      	eors	r2, r0
 8008a70:	400a      	ands	r2, r1
 8008a72:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8008a74:	615a      	str	r2, [r3, #20]
}
 8008a76:	2000      	movs	r0, #0
 8008a78:	4770      	bx	lr

08008a7a <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8008a7a:	6843      	ldr	r3, [r0, #4]
 8008a7c:	685b      	ldr	r3, [r3, #4]
}
 8008a7e:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 8008a80:	6199      	str	r1, [r3, #24]
}
 8008a82:	4770      	bx	lr

08008a84 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8008a84:	6843      	ldr	r3, [r0, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
}
 8008a88:	2000      	movs	r0, #0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8008a8a:	6299      	str	r1, [r3, #40]	; 0x28
 8008a8c:	4770      	bx	lr

08008a8e <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8008a8e:	6843      	ldr	r3, [r0, #4]
 8008a90:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8008a92:	6953      	ldr	r3, [r2, #20]
 8008a94:	404b      	eors	r3, r1
 8008a96:	6153      	str	r3, [r2, #20]
}
 8008a98:	2000      	movs	r0, #0
 8008a9a:	4770      	bx	lr

08008a9c <gpio_stm32_manage_callback>:
	struct gpio_stm32_data *data = dev->data;
 8008a9c:	6903      	ldr	r3, [r0, #16]
	return list->head;
 8008a9e:	6898      	ldr	r0, [r3, #8]
{
 8008aa0:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 8008aa2:	b158      	cbz	r0, 8008abc <gpio_stm32_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8008aa4:	2400      	movs	r4, #0
 8008aa6:	4281      	cmp	r1, r0
 8008aa8:	d112      	bne.n	8008ad0 <gpio_stm32_manage_callback+0x34>
	return node->next;
 8008aaa:	6808      	ldr	r0, [r1, #0]
	return list->tail;
 8008aac:	68dd      	ldr	r5, [r3, #12]
Z_GENLIST_REMOVE(slist, snode)
 8008aae:	b954      	cbnz	r4, 8008ac6 <gpio_stm32_manage_callback+0x2a>
 8008ab0:	428d      	cmp	r5, r1
	list->head = node;
 8008ab2:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8008ab4:	d100      	bne.n	8008ab8 <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 8008ab6:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8008ab8:	2000      	movs	r0, #0
 8008aba:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
 8008abc:	b96a      	cbnz	r2, 8008ada <gpio_stm32_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8008abe:	2000      	movs	r0, #0
}
 8008ac0:	bd30      	pop	{r4, r5, pc}
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	e7ef      	b.n	8008aa6 <gpio_stm32_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
 8008ac6:	428d      	cmp	r5, r1
	parent->next = child;
 8008ac8:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8008aca:	bf08      	it	eq
 8008acc:	60dc      	streq	r4, [r3, #12]
}
 8008ace:	e7f3      	b.n	8008ab8 <gpio_stm32_manage_callback+0x1c>
	return node->next;
 8008ad0:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	2d00      	cmp	r5, #0
 8008ad6:	d1f4      	bne.n	8008ac2 <gpio_stm32_manage_callback+0x26>
			if (!set) {
 8008ad8:	b13a      	cbz	r2, 8008aea <gpio_stm32_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
 8008ada:	68d8      	ldr	r0, [r3, #12]
	parent->next = child;
 8008adc:	689a      	ldr	r2, [r3, #8]
 8008ade:	600a      	str	r2, [r1, #0]
	list->head = node;
 8008ae0:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	d1eb      	bne.n	8008abe <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 8008ae6:	60d9      	str	r1, [r3, #12]
}
 8008ae8:	e7ea      	b.n	8008ac0 <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 8008aea:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 8008aee:	e7e7      	b.n	8008ac0 <gpio_stm32_manage_callback+0x24>

08008af0 <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 8008af0:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8008af2:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8008af4:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008af6:	6867      	ldr	r7, [r4, #4]
 8008af8:	4088      	lsls	r0, r1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8008afa:	f3c2 1680 	ubfx	r6, r2, #6, #1
 8008afe:	ea27 0700 	bic.w	r7, r7, r0
 8008b02:	408e      	lsls	r6, r1
 8008b04:	433e      	orrs	r6, r7
 8008b06:	6066      	str	r6, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b08:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8008b0c:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8008b10:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8008b14:	f04f 0e03 	mov.w	lr, #3
 8008b18:	007f      	lsls	r7, r7, #1
 8008b1a:	fa0e f707 	lsl.w	r7, lr, r7
 8008b1e:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b22:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8008b26:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8008b2a:	f3c2 16c1 	ubfx	r6, r2, #7, #2
 8008b2e:	007f      	lsls	r7, r7, #1
 8008b30:	40be      	lsls	r6, r7
 8008b32:	ea46 060c 	orr.w	r6, r6, ip
 8008b36:	60a6      	str	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b38:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 8008b3c:	fab6 f686 	clz	r6, r6
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008b40:	68e7      	ldr	r7, [r4, #12]
 8008b42:	0076      	lsls	r6, r6, #1
 8008b44:	fa0e f606 	lsl.w	r6, lr, r6
 8008b48:	ea27 0706 	bic.w	r7, r7, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b4c:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 8008b50:	fab6 f686 	clz	r6, r6
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8008b54:	f002 0530 	and.w	r5, r2, #48	; 0x30
 8008b58:	0076      	lsls	r6, r6, #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8008b5a:	f3c2 2241 	ubfx	r2, r2, #9, #2
 8008b5e:	40b2      	lsls	r2, r6
 8008b60:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 8008b62:	2d20      	cmp	r5, #32
 8008b64:	60e2      	str	r2, [r4, #12]
 8008b66:	d115      	bne.n	8008b94 <gpio_stm32_configure_raw.isra.0+0xa4>
		if (pin < 8) {
 8008b68:	2907      	cmp	r1, #7
 8008b6a:	dc2b      	bgt.n	8008bc4 <gpio_stm32_configure_raw.isra.0+0xd4>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b6c:	fa90 f2a0 	rbit	r2, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008b70:	6a21      	ldr	r1, [r4, #32]
  if (value == 0U)
 8008b72:	b32a      	cbz	r2, 8008bc0 <gpio_stm32_configure_raw.isra.0+0xd0>
  return __builtin_clz(value);
 8008b74:	fab2 f282 	clz	r2, r2
 8008b78:	0092      	lsls	r2, r2, #2
 8008b7a:	260f      	movs	r6, #15
 8008b7c:	fa06 f202 	lsl.w	r2, r6, r2
 8008b80:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b84:	fa90 f2a0 	rbit	r2, r0
  return __builtin_clz(value);
 8008b88:	fab2 f282 	clz	r2, r2
 8008b8c:	0092      	lsls	r2, r2, #2
 8008b8e:	4093      	lsls	r3, r2
 8008b90:	430b      	orrs	r3, r1
 8008b92:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b94:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8008b98:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008b9c:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b9e:	fa90 f0a0 	rbit	r0, r0
 8008ba2:	005b      	lsls	r3, r3, #1
 8008ba4:	2103      	movs	r1, #3
  return __builtin_clz(value);
 8008ba6:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8008baa:	092d      	lsrs	r5, r5, #4
 8008bac:	fa01 f303 	lsl.w	r3, r1, r3
 8008bb0:	0040      	lsls	r0, r0, #1
 8008bb2:	ea22 0303 	bic.w	r3, r2, r3
 8008bb6:	fa05 f000 	lsl.w	r0, r5, r0
 8008bba:	4318      	orrs	r0, r3
 8008bbc:	6020      	str	r0, [r4, #0]
}
 8008bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 8008bc0:	462a      	mov	r2, r5
 8008bc2:	e7d9      	b.n	8008b78 <gpio_stm32_configure_raw.isra.0+0x88>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008bc4:	0a02      	lsrs	r2, r0, #8
 8008bc6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bc8:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 8008bcc:	b181      	cbz	r1, 8008bf0 <gpio_stm32_configure_raw.isra.0+0x100>
  return __builtin_clz(value);
 8008bce:	fab1 f181 	clz	r1, r1
 8008bd2:	0089      	lsls	r1, r1, #2
 8008bd4:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bd6:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8008bda:	fab2 f282 	clz	r2, r2
 8008bde:	fa07 f101 	lsl.w	r1, r7, r1
 8008be2:	0092      	lsls	r2, r2, #2
 8008be4:	ea26 0101 	bic.w	r1, r6, r1
 8008be8:	4093      	lsls	r3, r2
 8008bea:	430b      	orrs	r3, r1
 8008bec:	6263      	str	r3, [r4, #36]	; 0x24
}
 8008bee:	e7d1      	b.n	8008b94 <gpio_stm32_configure_raw.isra.0+0xa4>
    return 32U;
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	e7ee      	b.n	8008bd2 <gpio_stm32_configure_raw.isra.0+0xe2>

08008bf4 <gpio_stm32_config>:
{
 8008bf4:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 8008bf6:	039a      	lsls	r2, r3, #14
{
 8008bf8:	b510      	push	{r4, lr}
	if ((flags & GPIO_OUTPUT) != 0) {
 8008bfa:	d51a      	bpl.n	8008c32 <gpio_stm32_config+0x3e>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8008bfc:	079c      	lsls	r4, r3, #30
 8008bfe:	d511      	bpl.n	8008c24 <gpio_stm32_config+0x30>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8008c00:	075a      	lsls	r2, r3, #29
 8008c02:	d52f      	bpl.n	8008c64 <gpio_stm32_config+0x70>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8008c04:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 8008c06:	06dc      	lsls	r4, r3, #27
 8008c08:	d50e      	bpl.n	8008c28 <gpio_stm32_config+0x34>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8008c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8008c0e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
	const struct gpio_stm32_config *cfg = dev->config;
 8008c12:	6844      	ldr	r4, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8008c14:	d11c      	bne.n	8008c50 <gpio_stm32_config+0x5c>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8008c16:	035b      	lsls	r3, r3, #13
 8008c18:	d514      	bpl.n	8008c44 <gpio_stm32_config+0x50>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8008c1a:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	408b      	lsls	r3, r1
  WRITE_REG(GPIOx->BRR, PinMask);
 8008c20:	62a3      	str	r3, [r4, #40]	; 0x28
	return 0;
 8008c22:	e00f      	b.n	8008c44 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8008c24:	2210      	movs	r2, #16
 8008c26:	e7ee      	b.n	8008c06 <gpio_stm32_config+0x12>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8008c28:	069c      	lsls	r4, r3, #26
 8008c2a:	d5f0      	bpl.n	8008c0e <gpio_stm32_config+0x1a>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8008c2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 8008c30:	e7ed      	b.n	8008c0e <gpio_stm32_config+0x1a>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8008c32:	03dc      	lsls	r4, r3, #15
 8008c34:	d511      	bpl.n	8008c5a <gpio_stm32_config+0x66>
		if ((flags & GPIO_PULL_UP) != 0) {
 8008c36:	06da      	lsls	r2, r3, #27
 8008c38:	d411      	bmi.n	8008c5e <gpio_stm32_config+0x6a>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8008c3a:	f013 0220 	ands.w	r2, r3, #32
 8008c3e:	bf18      	it	ne
 8008c40:	f44f 6280 	movne.w	r2, #1024	; 0x400
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 8008c44:	6840      	ldr	r0, [r0, #4]
 8008c46:	2300      	movs	r3, #0
 8008c48:	f7ff ff52 	bl	8008af0 <gpio_stm32_configure_raw.isra.0>
	return 0;
 8008c4c:	2000      	movs	r0, #0
}
 8008c4e:	bd10      	pop	{r4, pc}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8008c50:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8008c52:	2301      	movs	r3, #1
 8008c54:	408b      	lsls	r3, r1
	WRITE_REG(gpio->BSRR, pins);
 8008c56:	61a3      	str	r3, [r4, #24]
	return 0;
 8008c58:	e7f4      	b.n	8008c44 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8008c5a:	2230      	movs	r2, #48	; 0x30
 8008c5c:	e7f2      	b.n	8008c44 <gpio_stm32_config+0x50>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8008c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c62:	e7ef      	b.n	8008c44 <gpio_stm32_config+0x50>
				return -ENOTSUP;
 8008c64:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8008c68:	e7f1      	b.n	8008c4e <gpio_stm32_config+0x5a>

08008c6a <gpio_stm32_isr>:
{
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	6889      	ldr	r1, [r1, #8]
 8008c6e:	b570      	push	{r4, r5, r6, lr}
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8008c70:	b169      	cbz	r1, 8008c8e <gpio_stm32_isr+0x24>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8008c72:	2501      	movs	r5, #1
 8008c74:	685e      	ldr	r6, [r3, #4]
	return node->next;
 8008c76:	680c      	ldr	r4, [r1, #0]
 8008c78:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 8008c7a:	688a      	ldr	r2, [r1, #8]
 8008c7c:	402a      	ands	r2, r5
 8008c7e:	d002      	beq.n	8008c86 <gpio_stm32_isr+0x1c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8008c80:	684b      	ldr	r3, [r1, #4]
 8008c82:	4630      	mov	r0, r6
 8008c84:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8008c86:	b114      	cbz	r4, 8008c8e <gpio_stm32_isr+0x24>
 8008c88:	4621      	mov	r1, r4
 8008c8a:	6824      	ldr	r4, [r4, #0]
 8008c8c:	e7f5      	b.n	8008c7a <gpio_stm32_isr+0x10>
}
 8008c8e:	bd70      	pop	{r4, r5, r6, pc}

08008c90 <gpio_stm32_configure>:
{
 8008c90:	b508      	push	{r3, lr}
	gpio_stm32_configure_raw(dev, pin, conf, altf);
 8008c92:	6840      	ldr	r0, [r0, #4]
 8008c94:	f7ff ff2c 	bl	8008af0 <gpio_stm32_configure_raw.isra.0>
}
 8008c98:	2000      	movs	r0, #0
 8008c9a:	bd08      	pop	{r3, pc}

08008c9c <stm32_i2c_enable_transfer_interrupts.isra.0>:
	I2C_TypeDef *i2c = cfg->i2c;
 8008c9c:	68c3      	ldr	r3, [r0, #12]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	f042 0220 	orr.w	r2, r2, #32
 8008ca4:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	f042 0210 	orr.w	r2, r2, #16
 8008cac:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_TCIE);
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cb4:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008cbc:	601a      	str	r2, [r3, #0]
}
 8008cbe:	4770      	bx	lr

08008cc0 <stm32_i2c_disable_transfer_interrupts.isra.0>:
	I2C_TypeDef *i2c = cfg->i2c;
 8008cc0:	68c3      	ldr	r3, [r0, #12]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_TXIE);
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	f022 0202 	bic.w	r2, r2, #2
 8008cc8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	f022 0204 	bic.w	r2, r2, #4
 8008cd0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	f022 0220 	bic.w	r2, r2, #32
 8008cd8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	f022 0210 	bic.w	r2, r2, #16
 8008ce0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_TCIE);
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ce8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cf0:	601a      	str	r2, [r3, #0]
}
 8008cf2:	4770      	bx	lr

08008cf4 <stm32_i2c_master_mode_end>:
{
 8008cf4:	4603      	mov	r3, r0
	const struct i2c_stm32_config *cfg = dev->config;
 8008cf6:	6840      	ldr	r0, [r0, #4]
	I2C_TypeDef *i2c = cfg->i2c;
 8008cf8:	68c1      	ldr	r1, [r0, #12]
{
 8008cfa:	b510      	push	{r4, lr}
	struct i2c_stm32_data *data = dev->data;
 8008cfc:	691c      	ldr	r4, [r3, #16]
	stm32_i2c_disable_transfer_interrupts(dev);
 8008cfe:	f7ff ffdf 	bl	8008cc0 <stm32_i2c_disable_transfer_interrupts.isra.0>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8008d02:	680b      	ldr	r3, [r1, #0]
 8008d04:	f023 0301 	bic.w	r3, r3, #1
 8008d08:	600b      	str	r3, [r1, #0]
 8008d0a:	4620      	mov	r0, r4
}
 8008d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d10:	f7fe ba84 	b.w	800721c <z_impl_k_sem_give>

08008d14 <stm32_i2c_event_isr>:
	struct i2c_stm32_data *data = dev->data;
 8008d14:	6901      	ldr	r1, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8008d16:	6843      	ldr	r3, [r0, #4]
	if (data->current.len) {
 8008d18:	6b8a      	ldr	r2, [r1, #56]	; 0x38
	I2C_TypeDef *i2c = cfg->i2c;
 8008d1a:	68db      	ldr	r3, [r3, #12]
{
 8008d1c:	b510      	push	{r4, lr}
	if (data->current.len) {
 8008d1e:	b182      	cbz	r2, 8008d42 <stm32_i2c_event_isr+0x2e>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8008d20:	699c      	ldr	r4, [r3, #24]
			LL_I2C_TransmitData8(i2c, *data->current.buf);
 8008d22:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8008d24:	07a4      	lsls	r4, r4, #30
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
  WRITE_REG(I2Cx->TXDR, Data);
 8008d26:	bf44      	itt	mi
 8008d28:	7814      	ldrbmi	r4, [r2, #0]
 8008d2a:	629c      	strmi	r4, [r3, #40]	; 0x28
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8008d2c:	699c      	ldr	r4, [r3, #24]
 8008d2e:	0764      	lsls	r4, r4, #29
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8008d30:	bf44      	itt	mi
 8008d32:	6a5c      	ldrmi	r4, [r3, #36]	; 0x24
 8008d34:	7014      	strbmi	r4, [r2, #0]
		data->current.buf++;
 8008d36:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8008d38:	3201      	adds	r2, #1
 8008d3a:	63ca      	str	r2, [r1, #60]	; 0x3c
		data->current.len--;
 8008d3c:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8008d3e:	3a01      	subs	r2, #1
 8008d40:	638a      	str	r2, [r1, #56]	; 0x38
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_NACKF) == (I2C_ISR_NACKF)) ? 1UL : 0UL);
 8008d42:	699a      	ldr	r2, [r3, #24]
 8008d44:	06d2      	lsls	r2, r2, #27
 8008d46:	d414      	bmi.n	8008d72 <stm32_i2c_event_isr+0x5e>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8008d48:	699a      	ldr	r2, [r3, #24]
 8008d4a:	0694      	lsls	r4, r2, #26
 8008d4c:	d41c      	bmi.n	8008d88 <stm32_i2c_event_isr+0x74>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 8008d4e:	699a      	ldr	r2, [r3, #24]
 8008d50:	0652      	lsls	r2, r2, #25
 8008d52:	d402      	bmi.n	8008d5a <stm32_i2c_event_isr+0x46>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TCR) == (I2C_ISR_TCR)) ? 1UL : 0UL);
 8008d54:	699a      	ldr	r2, [r3, #24]
 8008d56:	0614      	lsls	r4, r2, #24
 8008d58:	d515      	bpl.n	8008d86 <stm32_i2c_event_isr+0x72>
		if (data->current.msg->flags & I2C_MSG_STOP) {
 8008d5a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8008d5c:	7a12      	ldrb	r2, [r2, #8]
 8008d5e:	0792      	lsls	r2, r2, #30
 8008d60:	d40d      	bmi.n	8008d7e <stm32_i2c_event_isr+0x6a>
			stm32_i2c_disable_transfer_interrupts(dev);
 8008d62:	6840      	ldr	r0, [r0, #4]
 8008d64:	f7ff ffac 	bl	8008cc0 <stm32_i2c_disable_transfer_interrupts.isra.0>
}
 8008d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d6c:	4608      	mov	r0, r1
 8008d6e:	f7fe ba55 	b.w	800721c <z_impl_k_sem_give>
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 8008d72:	69da      	ldr	r2, [r3, #28]
 8008d74:	f042 0210 	orr.w	r2, r2, #16
 8008d78:	61da      	str	r2, [r3, #28]
		data->current.is_nack = 1U;
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	62ca      	str	r2, [r1, #44]	; 0x2c
  SET_BIT(I2Cx->CR2, I2C_CR2_STOP);
 8008d7e:	685a      	ldr	r2, [r3, #4]
 8008d80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d84:	605a      	str	r2, [r3, #4]
}
 8008d86:	bd10      	pop	{r4, pc}
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8008d88:	69da      	ldr	r2, [r3, #28]
 8008d8a:	f042 0220 	orr.w	r2, r2, #32
 8008d8e:	61da      	str	r2, [r3, #28]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 8008d90:	685a      	ldr	r2, [r3, #4]
 8008d92:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d9a:	605a      	str	r2, [r3, #4]
	stm32_i2c_master_mode_end(dev);
 8008d9c:	f7ff bfaa 	b.w	8008cf4 <stm32_i2c_master_mode_end>

08008da0 <stm32_i2c_error_isr>:
	I2C_TypeDef *i2c = cfg->i2c;
 8008da0:	6843      	ldr	r3, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 8008da2:	6901      	ldr	r1, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8008da4:	68db      	ldr	r3, [r3, #12]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_ARLO) == (I2C_ISR_ARLO)) ? 1UL : 0UL);
 8008da6:	699a      	ldr	r2, [r3, #24]
 8008da8:	0592      	lsls	r2, r2, #22
 8008daa:	d507      	bpl.n	8008dbc <stm32_i2c_error_isr+0x1c>
  SET_BIT(I2Cx->ICR, I2C_ICR_ARLOCF);
 8008dac:	69da      	ldr	r2, [r3, #28]
 8008dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008db2:	61da      	str	r2, [r3, #28]
		data->current.is_arlo = 1U;
 8008db4:	2301      	movs	r3, #1
 8008db6:	628b      	str	r3, [r1, #40]	; 0x28
	stm32_i2c_master_mode_end(dev);
 8008db8:	f7ff bf9c 	b.w	8008cf4 <stm32_i2c_master_mode_end>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BERR) == (I2C_ISR_BERR)) ? 1UL : 0UL);
 8008dbc:	699a      	ldr	r2, [r3, #24]
 8008dbe:	05d2      	lsls	r2, r2, #23
 8008dc0:	d506      	bpl.n	8008dd0 <stm32_i2c_error_isr+0x30>
  SET_BIT(I2Cx->ICR, I2C_ICR_BERRCF);
 8008dc2:	69da      	ldr	r2, [r3, #28]
 8008dc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008dc8:	61da      	str	r2, [r3, #28]
		data->current.is_err = 1U;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	630b      	str	r3, [r1, #48]	; 0x30
		goto end;
 8008dce:	e7f3      	b.n	8008db8 <stm32_i2c_error_isr+0x18>
}
 8008dd0:	4770      	bx	lr

08008dd2 <stm32_i2c_msg_write>:
{
 8008dd2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	I2C_TypeDef *i2c = cfg->i2c;
 8008dd6:	6847      	ldr	r7, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 8008dd8:	6904      	ldr	r4, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8008dda:	f8d7 800c 	ldr.w	r8, [r7, #12]
	data->current.len = msg->len;
 8008dde:	684f      	ldr	r7, [r1, #4]
 8008de0:	63a7      	str	r7, [r4, #56]	; 0x38
	data->current.buf = msg->buf;
 8008de2:	680f      	ldr	r7, [r1, #0]
 8008de4:	63e7      	str	r7, [r4, #60]	; 0x3c
	data->current.is_nack = 0U;
 8008de6:	f04f 0c00 	mov.w	ip, #0
{
 8008dea:	4605      	mov	r5, r0
	data->current.is_write = 1U;
 8008dec:	2701      	movs	r7, #1
	data->current.is_err = 0U;
 8008dee:	e9c4 cc0b 	strd	ip, ip, [r4, #44]	; 0x2c
	data->current.is_write = 1U;
 8008df2:	6267      	str	r7, [r4, #36]	; 0x24
	data->current.msg = msg;
 8008df4:	6361      	str	r1, [r4, #52]	; 0x34
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_WRITE);
 8008df6:	f8cd c000 	str.w	ip, [sp]
 8008dfa:	f7fc fc95 	bl	8005728 <msg_init>
	stm32_i2c_enable_transfer_interrupts(dev);
 8008dfe:	6868      	ldr	r0, [r5, #4]
 8008e00:	f7ff ff4c 	bl	8008c9c <stm32_i2c_enable_transfer_interrupts.isra.0>
  SET_BIT(I2Cx->CR1, I2C_CR1_TXIE);
 8008e04:	f8d8 3000 	ldr.w	r3, [r8]
 8008e08:	f043 0302 	orr.w	r3, r3, #2
 8008e0c:	f8c8 3000 	str.w	r3, [r8]
	return z_impl_k_sem_take(sem, timeout);
 8008e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e14:	2300      	movs	r3, #0
 8008e16:	4620      	mov	r0, r4
 8008e18:	f7fe fa20 	bl	800725c <z_impl_k_sem_take>
	if (k_sem_take(&data->device_sync_sem,
 8008e1c:	b150      	cbz	r0, 8008e34 <stm32_i2c_msg_write+0x62>
		stm32_i2c_master_mode_end(dev);
 8008e1e:	4628      	mov	r0, r5
 8008e20:	f7ff ff68 	bl	8008cf4 <stm32_i2c_master_mode_end>
 8008e24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	f7fe fa15 	bl	800725c <z_impl_k_sem_take>
		is_timeout = true;
 8008e32:	4638      	mov	r0, r7
	if (data->current.is_nack || data->current.is_err ||
 8008e34:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
 8008e38:	ea52 0503 	orrs.w	r5, r2, r3
	    data->current.is_arlo || is_timeout) {
 8008e3c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (data->current.is_nack || data->current.is_err ||
 8008e3e:	d104      	bne.n	8008e4a <stm32_i2c_msg_write+0x78>
 8008e40:	b921      	cbnz	r1, 8008e4c <stm32_i2c_msg_write+0x7a>
	    data->current.is_arlo || is_timeout) {
 8008e42:	b940      	cbnz	r0, 8008e56 <stm32_i2c_msg_write+0x84>
}
 8008e44:	b002      	add	sp, #8
 8008e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data->current.is_arlo) {
 8008e4a:	b109      	cbz	r1, 8008e50 <stm32_i2c_msg_write+0x7e>
		data->current.is_arlo = 0U;
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	62a1      	str	r1, [r4, #40]	; 0x28
	if (data->current.is_nack) {
 8008e50:	b10a      	cbz	r2, 8008e56 <stm32_i2c_msg_write+0x84>
		data->current.is_nack = 0U;
 8008e52:	2200      	movs	r2, #0
 8008e54:	62e2      	str	r2, [r4, #44]	; 0x2c
	if (data->current.is_err) {
 8008e56:	b10b      	cbz	r3, 8008e5c <stm32_i2c_msg_write+0x8a>
		data->current.is_err = 0U;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	6323      	str	r3, [r4, #48]	; 0x30
	return -EIO;
 8008e5c:	f06f 0004 	mvn.w	r0, #4
 8008e60:	e7f0      	b.n	8008e44 <stm32_i2c_msg_write+0x72>

08008e62 <stm32_i2c_msg_read>:
{
 8008e62:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	I2C_TypeDef *i2c = cfg->i2c;
 8008e66:	6847      	ldr	r7, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 8008e68:	6904      	ldr	r4, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8008e6a:	f8d7 800c 	ldr.w	r8, [r7, #12]
	data->current.len = msg->len;
 8008e6e:	684f      	ldr	r7, [r1, #4]
 8008e70:	63a7      	str	r7, [r4, #56]	; 0x38
	data->current.buf = msg->buf;
 8008e72:	680f      	ldr	r7, [r1, #0]
 8008e74:	63e7      	str	r7, [r4, #60]	; 0x3c
{
 8008e76:	4605      	mov	r5, r0
	data->current.is_write = 0U;
 8008e78:	2700      	movs	r7, #0
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_READ);
 8008e7a:	f44f 6680 	mov.w	r6, #1024	; 0x400
	data->current.is_arlo = 0U;
 8008e7e:	e9c4 7709 	strd	r7, r7, [r4, #36]	; 0x24
	data->current.is_nack = 0U;
 8008e82:	e9c4 770b 	strd	r7, r7, [r4, #44]	; 0x2c
	data->current.msg = msg;
 8008e86:	6361      	str	r1, [r4, #52]	; 0x34
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_READ);
 8008e88:	9600      	str	r6, [sp, #0]
 8008e8a:	f7fc fc4d 	bl	8005728 <msg_init>
	stm32_i2c_enable_transfer_interrupts(dev);
 8008e8e:	6868      	ldr	r0, [r5, #4]
 8008e90:	f7ff ff04 	bl	8008c9c <stm32_i2c_enable_transfer_interrupts.isra.0>
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8008e94:	f8d8 3000 	ldr.w	r3, [r8]
 8008e98:	f043 0304 	orr.w	r3, r3, #4
 8008e9c:	f8c8 3000 	str.w	r3, [r8]
 8008ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	f7fe f9d8 	bl	800725c <z_impl_k_sem_take>
	if (k_sem_take(&data->device_sync_sem,
 8008eac:	b150      	cbz	r0, 8008ec4 <stm32_i2c_msg_read+0x62>
		stm32_i2c_master_mode_end(dev);
 8008eae:	4628      	mov	r0, r5
 8008eb0:	f7ff ff20 	bl	8008cf4 <stm32_i2c_master_mode_end>
 8008eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008eb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	f7fe f9cd 	bl	800725c <z_impl_k_sem_take>
		is_timeout = true;
 8008ec2:	2001      	movs	r0, #1
	if (data->current.is_nack || data->current.is_err ||
 8008ec4:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
 8008ec8:	ea52 0503 	orrs.w	r5, r2, r3
	    data->current.is_arlo || is_timeout) {
 8008ecc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (data->current.is_nack || data->current.is_err ||
 8008ece:	d104      	bne.n	8008eda <stm32_i2c_msg_read+0x78>
 8008ed0:	b921      	cbnz	r1, 8008edc <stm32_i2c_msg_read+0x7a>
	    data->current.is_arlo || is_timeout) {
 8008ed2:	b940      	cbnz	r0, 8008ee6 <stm32_i2c_msg_read+0x84>
}
 8008ed4:	b002      	add	sp, #8
 8008ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data->current.is_arlo) {
 8008eda:	b109      	cbz	r1, 8008ee0 <stm32_i2c_msg_read+0x7e>
		data->current.is_arlo = 0U;
 8008edc:	2100      	movs	r1, #0
 8008ede:	62a1      	str	r1, [r4, #40]	; 0x28
	if (data->current.is_nack) {
 8008ee0:	b10a      	cbz	r2, 8008ee6 <stm32_i2c_msg_read+0x84>
		data->current.is_nack = 0U;
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	62e2      	str	r2, [r4, #44]	; 0x2c
	if (data->current.is_err) {
 8008ee6:	b10b      	cbz	r3, 8008eec <stm32_i2c_msg_read+0x8a>
		data->current.is_err = 0U;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	6323      	str	r3, [r4, #48]	; 0x30
	return -EIO;
 8008eec:	f06f 0004 	mvn.w	r0, #4
 8008ef0:	e7f0      	b.n	8008ed4 <stm32_i2c_msg_read+0x72>

08008ef2 <i2c_stm32_irq_config_func_i2c1>:
STM32_I2C_IRQ_HANDLER(name)

/* I2C instances declaration */

#if DT_NODE_HAS_STATUS(DT_NODELABEL(i2c1), okay)
STM32_I2C_INIT(i2c1);
 8008ef2:	b508      	push	{r3, lr}
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	4611      	mov	r1, r2
 8008ef8:	201f      	movs	r0, #31
 8008efa:	f7fb fc03 	bl	8004704 <z_arm_irq_priority_set>
 8008efe:	201f      	movs	r0, #31
 8008f00:	f7fb fbdc 	bl	80046bc <arch_irq_enable>
 8008f04:	2200      	movs	r2, #0
 8008f06:	2020      	movs	r0, #32
 8008f08:	4611      	mov	r1, r2
 8008f0a:	f7fb fbfb 	bl	8004704 <z_arm_irq_priority_set>
 8008f0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008f12:	2020      	movs	r0, #32
 8008f14:	f7fb bbd2 	b.w	80046bc <arch_irq_enable>

08008f18 <i2c_stm32_irq_config_func_i2c2>:
#endif

#if DT_NODE_HAS_STATUS(DT_NODELABEL(i2c2), okay)
STM32_I2C_INIT(i2c2);
 8008f18:	b508      	push	{r3, lr}
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	2021      	movs	r0, #33	; 0x21
 8008f20:	f7fb fbf0 	bl	8004704 <z_arm_irq_priority_set>
 8008f24:	2021      	movs	r0, #33	; 0x21
 8008f26:	f7fb fbc9 	bl	80046bc <arch_irq_enable>
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	2022      	movs	r0, #34	; 0x22
 8008f2e:	4611      	mov	r1, r2
 8008f30:	f7fb fbe8 	bl	8004704 <z_arm_irq_priority_set>
 8008f34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008f38:	2022      	movs	r0, #34	; 0x22
 8008f3a:	f7fb bbbf 	b.w	80046bc <arch_irq_enable>

08008f3e <i2c_stm32_irq_config_func_i2c3>:
#endif

#if DT_NODE_HAS_STATUS(DT_NODELABEL(i2c3), okay)
STM32_I2C_INIT(i2c3);
 8008f3e:	b508      	push	{r3, lr}
 8008f40:	2200      	movs	r2, #0
 8008f42:	4611      	mov	r1, r2
 8008f44:	2048      	movs	r0, #72	; 0x48
 8008f46:	f7fb fbdd 	bl	8004704 <z_arm_irq_priority_set>
 8008f4a:	2048      	movs	r0, #72	; 0x48
 8008f4c:	f7fb fbb6 	bl	80046bc <arch_irq_enable>
 8008f50:	2200      	movs	r2, #0
 8008f52:	2049      	movs	r0, #73	; 0x49
 8008f54:	4611      	mov	r1, r2
 8008f56:	f7fb fbd5 	bl	8004704 <z_arm_irq_priority_set>
 8008f5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008f5e:	2049      	movs	r0, #73	; 0x49
 8008f60:	f7fb bbac 	b.w	80046bc <arch_irq_enable>

08008f64 <i2c_stm32_transfer>:
{
 8008f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f68:	4699      	mov	r9, r3
	current->flags |= I2C_MSG_RESTART;
 8008f6a:	7a0b      	ldrb	r3, [r1, #8]
	struct i2c_stm32_data *data = dev->data;
 8008f6c:	6906      	ldr	r6, [r0, #16]
	current->flags |= I2C_MSG_RESTART;
 8008f6e:	f043 0304 	orr.w	r3, r3, #4
{
 8008f72:	4615      	mov	r5, r2
	current->flags |= I2C_MSG_RESTART;
 8008f74:	720b      	strb	r3, [r1, #8]
{
 8008f76:	b087      	sub	sp, #28
 8008f78:	4607      	mov	r7, r0
 8008f7a:	460c      	mov	r4, r1
	for (uint8_t i = 1; i <= num_msgs; i++) {
 8008f7c:	460a      	mov	r2, r1
 8008f7e:	2301      	movs	r3, #1
 8008f80:	42ab      	cmp	r3, r5
 8008f82:	d90c      	bls.n	8008f9e <i2c_stm32_transfer+0x3a>
	k_sem_take(&data->bus_mutex, K_FOREVER);
 8008f84:	f106 0810 	add.w	r8, r6, #16
 8008f88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f90:	4640      	mov	r0, r8
 8008f92:	f7fe f963 	bl	800725c <z_impl_k_sem_take>
	while (num_msgs > 0) {
 8008f96:	3414      	adds	r4, #20
 8008f98:	2300      	movs	r3, #0
 8008f9a:	ae03      	add	r6, sp, #12
 8008f9c:	e054      	b.n	8009048 <i2c_stm32_transfer+0xe4>
			if (OPERATION(current) != OPERATION(next)) {
 8008f9e:	7a11      	ldrb	r1, [r2, #8]
		if (i < num_msgs) {
 8008fa0:	d20c      	bcs.n	8008fbc <i2c_stm32_transfer+0x58>
			if (OPERATION(current) != OPERATION(next)) {
 8008fa2:	7d10      	ldrb	r0, [r2, #20]
 8008fa4:	ea80 0c01 	eor.w	ip, r0, r1
 8008fa8:	f01c 0f01 	tst.w	ip, #1
 8008fac:	d001      	beq.n	8008fb2 <i2c_stm32_transfer+0x4e>
				if (!(next->flags & I2C_MSG_RESTART)) {
 8008fae:	0740      	lsls	r0, r0, #29
 8008fb0:	d501      	bpl.n	8008fb6 <i2c_stm32_transfer+0x52>
			if (current->flags & I2C_MSG_STOP) {
 8008fb2:	0789      	lsls	r1, r1, #30
 8008fb4:	d505      	bpl.n	8008fc2 <i2c_stm32_transfer+0x5e>
 8008fb6:	f06f 0315 	mvn.w	r3, #21
 8008fba:	e04c      	b.n	8009056 <i2c_stm32_transfer+0xf2>
			current->flags |= I2C_MSG_STOP;
 8008fbc:	f041 0102 	orr.w	r1, r1, #2
 8008fc0:	7211      	strb	r1, [r2, #8]
	for (uint8_t i = 1; i <= num_msgs; i++) {
 8008fc2:	3301      	adds	r3, #1
		current++;
 8008fc4:	320c      	adds	r2, #12
	for (uint8_t i = 1; i <= num_msgs; i++) {
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	e7da      	b.n	8008f80 <i2c_stm32_transfer+0x1c>
		if (num_msgs > 1) {
 8008fca:	2d01      	cmp	r5, #1
 8008fcc:	bf14      	ite	ne
 8008fce:	4623      	movne	r3, r4
 8008fd0:	2300      	moveq	r3, #0
 8008fd2:	9301      	str	r3, [sp, #4]
		ret = i2c_stm32_transaction(dev, *current, next_msg_flags, slave);
 8008fd4:	f1a4 0314 	sub.w	r3, r4, #20
 8008fd8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008fdc:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	const uint8_t saved_flags = msg.flags;
 8008fe0:	f89d b014 	ldrb.w	fp, [sp, #20]
	uint32_t rest = msg.len;
 8008fe4:	f8dd a010 	ldr.w	sl, [sp, #16]
		saved_flags & ~(I2C_MSG_STOP | I2C_MSG_RESTART);
 8008fe8:	f02b 0306 	bic.w	r3, fp, #6
	uint8_t combine_flags =
 8008fec:	f88d 300b 	strb.w	r3, [sp, #11]
		if (msg.len > i2c_stm32_maxchunk) {
 8008ff0:	9b04      	ldr	r3, [sp, #16]
 8008ff2:	2bff      	cmp	r3, #255	; 0xff
			msg.len = i2c_stm32_maxchunk;
 8008ff4:	bf83      	ittte	hi
 8008ff6:	23ff      	movhi	r3, #255	; 0xff
 8008ff8:	9304      	strhi	r3, [sp, #16]
			msg.flags &= ~I2C_MSG_STOP;
 8008ffa:	f89d 3014 	ldrbhi.w	r3, [sp, #20]
			msg.flags = saved_flags;
 8008ffe:	f88d b014 	strbls.w	fp, [sp, #20]
			msg.flags &= ~I2C_MSG_STOP;
 8009002:	bf84      	itt	hi
 8009004:	f023 0302 	bichi.w	r3, r3, #2
 8009008:	f88d 3014 	strbhi.w	r3, [sp, #20]
		if ((msg.flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
 800900c:	f89d 3014 	ldrb.w	r3, [sp, #20]
			flagsp = next_msg_flags;
 8009010:	bf94      	ite	ls
 8009012:	9a01      	ldrls	r2, [sp, #4]
			flagsp = &combine_flags;
 8009014:	f10d 020b 	addhi.w	r2, sp, #11
		if ((msg.flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
 8009018:	f013 0f01 	tst.w	r3, #1
			ret = stm32_i2c_msg_write(dev, &msg, flagsp, periph);
 800901c:	4631      	mov	r1, r6
 800901e:	464b      	mov	r3, r9
 8009020:	4638      	mov	r0, r7
		if ((msg.flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
 8009022:	d11c      	bne.n	800905e <i2c_stm32_transfer+0xfa>
			ret = stm32_i2c_msg_write(dev, &msg, flagsp, periph);
 8009024:	f7ff fed5 	bl	8008dd2 <stm32_i2c_msg_write>
		if (ret < 0) {
 8009028:	2800      	cmp	r0, #0
			ret = stm32_i2c_msg_read(dev, &msg, flagsp, periph);
 800902a:	4603      	mov	r3, r0
		if (ret < 0) {
 800902c:	db0e      	blt.n	800904c <i2c_stm32_transfer+0xe8>
		rest -= msg.len;
 800902e:	9904      	ldr	r1, [sp, #16]
		msg.buf += msg.len;
 8009030:	9a03      	ldr	r2, [sp, #12]
		rest -= msg.len;
 8009032:	ebaa 0a01 	sub.w	sl, sl, r1
		msg.buf += msg.len;
 8009036:	440a      	add	r2, r1
		msg.len = rest;
 8009038:	e9cd 2a03 	strd	r2, sl, [sp, #12]
	} while (rest > 0U);
 800903c:	f1ba 0f00 	cmp.w	sl, #0
 8009040:	d1d6      	bne.n	8008ff0 <i2c_stm32_transfer+0x8c>
		num_msgs--;
 8009042:	3d01      	subs	r5, #1
 8009044:	b2ed      	uxtb	r5, r5
 8009046:	340c      	adds	r4, #12
	while (num_msgs > 0) {
 8009048:	2d00      	cmp	r5, #0
 800904a:	d1be      	bne.n	8008fca <i2c_stm32_transfer+0x66>
 800904c:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
 800904e:	4640      	mov	r0, r8
 8009050:	f7fe f8e4 	bl	800721c <z_impl_k_sem_give>
}
 8009054:	9b01      	ldr	r3, [sp, #4]
}
 8009056:	4618      	mov	r0, r3
 8009058:	b007      	add	sp, #28
 800905a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = stm32_i2c_msg_read(dev, &msg, flagsp, periph);
 800905e:	f7ff ff00 	bl	8008e62 <stm32_i2c_msg_read>
 8009062:	e7e1      	b.n	8009028 <i2c_stm32_transfer+0xc4>

08009064 <uart_stm32_poll_in>:
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 8009064:	6843      	ldr	r3, [r0, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8009068:	69da      	ldr	r2, [r3, #28]
 800906a:	0710      	lsls	r0, r2, #28
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800906c:	bf44      	itt	mi
 800906e:	2208      	movmi	r2, #8
 8009070:	621a      	strmi	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8009072:	69da      	ldr	r2, [r3, #28]
 8009074:	0692      	lsls	r2, r2, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8009076:	bf43      	ittte	mi
 8009078:	8c9b      	ldrhmi	r3, [r3, #36]	; 0x24
 800907a:	700b      	strbmi	r3, [r1, #0]
	return 0;
 800907c:	2000      	movmi	r0, #0
		return -1;
 800907e:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 8009082:	4770      	bx	lr

08009084 <uart_stm32_irq_tx_enable>:
	LL_USART_EnableIT_TC(config->usart);
 8009084:	6843      	ldr	r3, [r0, #4]
 8009086:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8009088:	6813      	ldr	r3, [r2, #0]
 800908a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800908e:	6013      	str	r3, [r2, #0]
}
 8009090:	4770      	bx	lr

08009092 <uart_stm32_irq_tx_disable>:
	LL_USART_DisableIT_TC(config->usart);
 8009092:	6843      	ldr	r3, [r0, #4]
 8009094:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 8009096:	6813      	ldr	r3, [r2, #0]
 8009098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800909c:	6013      	str	r3, [r2, #0]
}
 800909e:	4770      	bx	lr

080090a0 <uart_stm32_irq_rx_enable>:
	LL_USART_EnableIT_RXNE(config->usart);
 80090a0:	6843      	ldr	r3, [r0, #4]
 80090a2:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80090a4:	6813      	ldr	r3, [r2, #0]
 80090a6:	f043 0320 	orr.w	r3, r3, #32
 80090aa:	6013      	str	r3, [r2, #0]
}
 80090ac:	4770      	bx	lr

080090ae <uart_stm32_irq_rx_disable>:
	LL_USART_DisableIT_RXNE(config->usart);
 80090ae:	6843      	ldr	r3, [r0, #4]
 80090b0:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80090b2:	6813      	ldr	r3, [r2, #0]
 80090b4:	f023 0320 	bic.w	r3, r3, #32
 80090b8:	6013      	str	r3, [r2, #0]
}
 80090ba:	4770      	bx	lr

080090bc <uart_stm32_irq_update>:
}
 80090bc:	2001      	movs	r0, #1
 80090be:	4770      	bx	lr

080090c0 <uart_stm32_irq_callback_set>:
	struct uart_stm32_data *data = dev->data;
 80090c0:	6903      	ldr	r3, [r0, #16]
	data->user_data = cb_data;
 80090c2:	e9c3 1202 	strd	r1, r2, [r3, #8]
}
 80090c6:	4770      	bx	lr

080090c8 <uart_stm32_isr>:
	struct uart_stm32_data *data = dev->data;
 80090c8:	6902      	ldr	r2, [r0, #16]
	if (data->user_cb) {
 80090ca:	6893      	ldr	r3, [r2, #8]
 80090cc:	b10b      	cbz	r3, 80090d2 <uart_stm32_isr+0xa>
		data->user_cb(dev, data->user_data);
 80090ce:	68d1      	ldr	r1, [r2, #12]
 80090d0:	4718      	bx	r3
}
 80090d2:	4770      	bx	lr

080090d4 <uart_stm32_irq_config_func_0>:
		    PRE_KERNEL_1, CONFIG_SERIAL_INIT_PRIORITY,		\
		    &uart_stm32_driver_api);				\
									\
STM32_UART_IRQ_HANDLER(index)

DT_INST_FOREACH_STATUS_OKAY(STM32_UART_INIT)
 80090d4:	b508      	push	{r3, lr}
 80090d6:	2200      	movs	r2, #0
 80090d8:	2025      	movs	r0, #37	; 0x25
 80090da:	4611      	mov	r1, r2
 80090dc:	f7fb fb12 	bl	8004704 <z_arm_irq_priority_set>
 80090e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80090e4:	2025      	movs	r0, #37	; 0x25
 80090e6:	f7fb bae9 	b.w	80046bc <arch_irq_enable>

080090ea <uart_stm32_irq_config_func_1>:
 80090ea:	b508      	push	{r3, lr}
 80090ec:	2200      	movs	r2, #0
 80090ee:	2026      	movs	r0, #38	; 0x26
 80090f0:	4611      	mov	r1, r2
 80090f2:	f7fb fb07 	bl	8004704 <z_arm_irq_priority_set>
 80090f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80090fa:	2026      	movs	r0, #38	; 0x26
 80090fc:	f7fb bade 	b.w	80046bc <arch_irq_enable>

08009100 <uart_stm32_irq_config_func_2>:
 8009100:	b508      	push	{r3, lr}
 8009102:	2200      	movs	r2, #0
 8009104:	2046      	movs	r0, #70	; 0x46
 8009106:	4611      	mov	r1, r2
 8009108:	f7fb fafc 	bl	8004704 <z_arm_irq_priority_set>
 800910c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009110:	2046      	movs	r0, #70	; 0x46
 8009112:	f7fb bad3 	b.w	80046bc <arch_irq_enable>

08009116 <uart_stm32_irq_config_func_3>:
 8009116:	b508      	push	{r3, lr}
 8009118:	2200      	movs	r2, #0
 800911a:	2027      	movs	r0, #39	; 0x27
 800911c:	4611      	mov	r1, r2
 800911e:	f7fb faf1 	bl	8004704 <z_arm_irq_priority_set>
 8009122:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009126:	2027      	movs	r0, #39	; 0x27
 8009128:	f7fb bac8 	b.w	80046bc <arch_irq_enable>

0800912c <uart_stm32_irq_tx_complete>:
	return LL_USART_IsActiveFlag_TC(config->usart);
 800912c:	6843      	ldr	r3, [r0, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8009130:	69d8      	ldr	r0, [r3, #28]
}
 8009132:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8009136:	4770      	bx	lr

08009138 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8009138:	6903      	ldr	r3, [r0, #16]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	600b      	str	r3, [r1, #0]
	return LL_USART_GetParity(config->usart);
 800913e:	6843      	ldr	r3, [r0, #4]
 8009140:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8009142:	6813      	ldr	r3, [r2, #0]
 8009144:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8009148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800914c:	d02d      	beq.n	80091aa <uart_stm32_config_get+0x72>
		return UART_CFG_PARITY_NONE;
 800914e:	f5a3 60c0 	sub.w	r0, r3, #1536	; 0x600
 8009152:	4243      	negs	r3, r0
 8009154:	4143      	adcs	r3, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8009156:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8009158:	6853      	ldr	r3, [r2, #4]
 800915a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 800915e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009162:	d024      	beq.n	80091ae <uart_stm32_config_get+0x76>
 8009164:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009168:	d023      	beq.n	80091b2 <uart_stm32_config_get+0x7a>
 800916a:	2b00      	cmp	r3, #0
 800916c:	bf14      	ite	ne
 800916e:	2303      	movne	r3, #3
 8009170:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8009172:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8009174:	6810      	ldr	r0, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8009176:	6813      	ldr	r3, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8009178:	f000 2010 	and.w	r0, r0, #268439552	; 0x10001000
	switch (db) {
 800917c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8009180:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009184:	d017      	beq.n	80091b6 <uart_stm32_config_get+0x7e>
 8009186:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 800918a:	d119      	bne.n	80091c0 <uart_stm32_config_get+0x88>
			return UART_CFG_DATA_BITS_6;
 800918c:	2b00      	cmp	r3, #0
 800918e:	bf0c      	ite	eq
 8009190:	2302      	moveq	r3, #2
 8009192:	2301      	movne	r3, #1
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8009194:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8009196:	6893      	ldr	r3, [r2, #8]
 8009198:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 800919c:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 80091a0:	4253      	negs	r3, r2
 80091a2:	4153      	adcs	r3, r2
 80091a4:	71cb      	strb	r3, [r1, #7]
}
 80091a6:	2000      	movs	r0, #0
 80091a8:	4770      	bx	lr
	switch (parity) {
 80091aa:	2302      	movs	r3, #2
 80091ac:	e7d3      	b.n	8009156 <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_0_5;
 80091ae:	2300      	movs	r3, #0
 80091b0:	e7df      	b.n	8009172 <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 80091b2:	2302      	movs	r3, #2
 80091b4:	e7dd      	b.n	8009172 <uart_stm32_config_get+0x3a>
			return UART_CFG_DATA_BITS_9;
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	bf14      	ite	ne
 80091ba:	2303      	movne	r3, #3
 80091bc:	2304      	moveq	r3, #4
 80091be:	e7e9      	b.n	8009194 <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_8;
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	bf14      	ite	ne
 80091c4:	2302      	movne	r3, #2
 80091c6:	2303      	moveq	r3, #3
 80091c8:	e7e4      	b.n	8009194 <uart_stm32_config_get+0x5c>

080091ca <uart_stm32_irq_tx_ready>:
	return LL_USART_IsActiveFlag_TXE(config->usart) &&
 80091ca:	6843      	ldr	r3, [r0, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80091ce:	69d8      	ldr	r0, [r3, #28]
 80091d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
  return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 80091d4:	bf1c      	itt	ne
 80091d6:	6818      	ldrne	r0, [r3, #0]
 80091d8:	f3c0 1080 	ubfxne	r0, r0, #6, #1
}
 80091dc:	4770      	bx	lr

080091de <uart_stm32_fifo_fill>:
{
 80091de:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct uart_stm32_config *config = dev->config;
 80091e0:	6845      	ldr	r5, [r0, #4]
	if (!LL_USART_IsActiveFlag_TXE(config->usart)) {
 80091e2:	682b      	ldr	r3, [r5, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80091e4:	69d8      	ldr	r0, [r3, #28]
 80091e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091ea:	d019      	beq.n	8009220 <uart_stm32_fifo_fill+0x42>
	__asm__ volatile(
 80091ec:	f04f 0310 	mov.w	r3, #16
 80091f0:	f3ef 8611 	mrs	r6, BASEPRI
 80091f4:	f383 8812 	msr	BASEPRI_MAX, r3
 80091f8:	f3bf 8f6f 	isb	sy
	while ((size - num_tx > 0) &&
 80091fc:	2300      	movs	r3, #0
 80091fe:	b2d8      	uxtb	r0, r3
 8009200:	1a14      	subs	r4, r2, r0
 8009202:	2c00      	cmp	r4, #0
 8009204:	dd08      	ble.n	8009218 <uart_stm32_fifo_fill+0x3a>
	       LL_USART_IsActiveFlag_TXE(config->usart)) {
 8009206:	682c      	ldr	r4, [r5, #0]
 8009208:	69e7      	ldr	r7, [r4, #28]
 800920a:	063f      	lsls	r7, r7, #24
 800920c:	f103 0301 	add.w	r3, r3, #1
 8009210:	d502      	bpl.n	8009218 <uart_stm32_fifo_fill+0x3a>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8009212:	5c08      	ldrb	r0, [r1, r0]
 8009214:	8520      	strh	r0, [r4, #40]	; 0x28
}
 8009216:	e7f2      	b.n	80091fe <uart_stm32_fifo_fill+0x20>
	__asm__ volatile(
 8009218:	f386 8811 	msr	BASEPRI, r6
 800921c:	f3bf 8f6f 	isb	sy
}
 8009220:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009222 <uart_stm32_poll_out>:
{
 8009222:	b510      	push	{r4, lr}
	const struct uart_stm32_config *config = dev->config;
 8009224:	6840      	ldr	r0, [r0, #4]
		if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 8009226:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8009228:	69d3      	ldr	r3, [r2, #28]
 800922a:	061b      	lsls	r3, r3, #24
 800922c:	d5fc      	bpl.n	8009228 <uart_stm32_poll_out+0x6>
	__asm__ volatile(
 800922e:	f04f 0210 	mov.w	r2, #16
 8009232:	f3ef 8311 	mrs	r3, BASEPRI
 8009236:	f382 8812 	msr	BASEPRI_MAX, r2
 800923a:	f3bf 8f6f 	isb	sy
			if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 800923e:	6802      	ldr	r2, [r0, #0]
 8009240:	69d4      	ldr	r4, [r2, #28]
 8009242:	0624      	lsls	r4, r4, #24
 8009244:	d404      	bmi.n	8009250 <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 8009246:	f383 8811 	msr	BASEPRI, r3
 800924a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 800924e:	e7ea      	b.n	8009226 <uart_stm32_poll_out+0x4>
  USARTx->TDR = Value;
 8009250:	b289      	uxth	r1, r1
 8009252:	8511      	strh	r1, [r2, #40]	; 0x28
	__asm__ volatile(
 8009254:	f383 8811 	msr	BASEPRI, r3
 8009258:	f3bf 8f6f 	isb	sy
}
 800925c:	bd10      	pop	{r4, pc}

0800925e <uart_stm32_irq_is_pending>:
	return ((LL_USART_IsActiveFlag_RXNE(config->usart) &&
 800925e:	6843      	ldr	r3, [r0, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8009262:	69da      	ldr	r2, [r3, #28]
 8009264:	0691      	lsls	r1, r2, #26
 8009266:	d502      	bpl.n	800926e <uart_stm32_irq_is_pending+0x10>
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	0692      	lsls	r2, r2, #26
 800926c:	d407      	bmi.n	800927e <uart_stm32_irq_is_pending+0x20>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800926e:	69d8      	ldr	r0, [r3, #28]
 8009270:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8009274:	d004      	beq.n	8009280 <uart_stm32_irq_is_pending+0x22>
  return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 8009276:	6818      	ldr	r0, [r3, #0]
 8009278:	f3c0 1080 	ubfx	r0, r0, #6, #1
 800927c:	4770      	bx	lr
		 LL_USART_IsEnabledIT_RXNE(config->usart)) ||
 800927e:	2001      	movs	r0, #1
}
 8009280:	4770      	bx	lr

08009282 <uart_stm32_irq_rx_ready>:
	return LL_USART_IsActiveFlag_RXNE(config->usart);
 8009282:	6843      	ldr	r3, [r0, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8009286:	69d8      	ldr	r0, [r3, #28]
}
 8009288:	f3c0 1040 	ubfx	r0, r0, #5, #1
 800928c:	4770      	bx	lr

0800928e <uart_stm32_fifo_read>:
{
 800928e:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct uart_stm32_config *config = dev->config;
 8009290:	6844      	ldr	r4, [r0, #4]
	while ((size - num_rx > 0) &&
 8009292:	2300      	movs	r3, #0
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8009294:	2608      	movs	r6, #8
 8009296:	b2d8      	uxtb	r0, r3
 8009298:	1a15      	subs	r5, r2, r0
 800929a:	2d00      	cmp	r5, #0
 800929c:	dd0c      	ble.n	80092b8 <uart_stm32_fifo_read+0x2a>
	       LL_USART_IsActiveFlag_RXNE(config->usart)) {
 800929e:	6825      	ldr	r5, [r4, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 80092a0:	69ef      	ldr	r7, [r5, #28]
 80092a2:	06bf      	lsls	r7, r7, #26
 80092a4:	d508      	bpl.n	80092b8 <uart_stm32_fifo_read+0x2a>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80092a6:	8cad      	ldrh	r5, [r5, #36]	; 0x24
 80092a8:	540d      	strb	r5, [r1, r0]
		if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 80092aa:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80092ac:	69c5      	ldr	r5, [r0, #28]
 80092ae:	072d      	lsls	r5, r5, #28
 80092b0:	d500      	bpl.n	80092b4 <uart_stm32_fifo_read+0x26>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80092b2:	6206      	str	r6, [r0, #32]
 80092b4:	3301      	adds	r3, #1
 80092b6:	e7ee      	b.n	8009296 <uart_stm32_fifo_read+0x8>
}
 80092b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080092ba <uart_stm32_err_check>:
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 80092ba:	6843      	ldr	r3, [r0, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80092be:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 80092c0:	69da      	ldr	r2, [r3, #28]
	if (LL_USART_IsActiveFlag_PE(config->usart)) {
 80092c2:	07d1      	lsls	r1, r2, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80092c4:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80092c6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
		err |= UART_ERROR_PARITY;
 80092ca:	bf48      	it	mi
 80092cc:	f040 0002 	orrmi.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80092d0:	0792      	lsls	r2, r2, #30
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 80092d2:	69da      	ldr	r2, [r3, #28]
		err |= UART_ERROR_FRAMING;
 80092d4:	bf48      	it	mi
 80092d6:	f040 0004 	orrmi.w	r0, r0, #4
 80092da:	05d1      	lsls	r1, r2, #23
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 80092dc:	bf42      	ittt	mi
 80092de:	f44f 7280 	movmi.w	r2, #256	; 0x100
		err |= UART_BREAK;
 80092e2:	f040 0008 	orrmi.w	r0, r0, #8
 80092e6:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_OVERRUN) {
 80092e8:	07c2      	lsls	r2, r0, #31
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80092ea:	bf44      	itt	mi
 80092ec:	2208      	movmi	r2, #8
 80092ee:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 80092f0:	0781      	lsls	r1, r0, #30
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 80092f2:	bf44      	itt	mi
 80092f4:	2201      	movmi	r2, #1
 80092f6:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 80092f8:	0742      	lsls	r2, r0, #29
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 80092fa:	bf44      	itt	mi
 80092fc:	2202      	movmi	r2, #2
 80092fe:	621a      	strmi	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8009300:	2204      	movs	r2, #4
 8009302:	621a      	str	r2, [r3, #32]
}
 8009304:	4770      	bx	lr

08009306 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 8009306:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
 8009308:	6803      	ldr	r3, [r0, #0]
 800930a:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 800930c:	7903      	ldrb	r3, [r0, #4]
 800930e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009312:	3b01      	subs	r3, #1
 8009314:	00db      	lsls	r3, r3, #3
 8009316:	6805      	ldr	r5, [r0, #0]
 8009318:	6814      	ldr	r4, [r2, #0]
 800931a:	441d      	add	r5, r3
 800931c:	42ac      	cmp	r4, r5
 800931e:	d902      	bls.n	8009326 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
 8009320:	f06f 0001 	mvn.w	r0, #1
}
 8009324:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
 8009326:	7965      	ldrb	r5, [r4, #5]
 8009328:	428d      	cmp	r5, r1
 800932a:	d002      	beq.n	8009332 <pinctrl_lookup_state+0x2c>
		(*state)++;
 800932c:	3408      	adds	r4, #8
 800932e:	6014      	str	r4, [r2, #0]
 8009330:	e7f1      	b.n	8009316 <pinctrl_lookup_state+0x10>
			return 0;
 8009332:	2000      	movs	r0, #0
 8009334:	e7f6      	b.n	8009324 <pinctrl_lookup_state+0x1e>

08009336 <HAL_PCD_MspInit>:
}
 8009336:	4770      	bx	lr

08009338 <HAL_PCD_Init>:
{
 8009338:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hpcd == NULL)
 800933a:	4604      	mov	r4, r0
{
 800933c:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 800933e:	b360      	cbz	r0, 800939a <HAL_PCD_Init+0x62>
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009340:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8009344:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009346:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800934a:	b91b      	cbnz	r3, 8009354 <HAL_PCD_Init+0x1c>
    hpcd->Lock = HAL_UNLOCKED;
 800934c:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8009350:	f7ff fff1 	bl	8009336 <HAL_PCD_MspInit>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8009354:	2303      	movs	r3, #3
 8009356:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800935a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  __HAL_PCD_DISABLE(hpcd);
 800935c:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800935e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8009362:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8009366:	bf08      	it	eq
 8009368:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 800936a:	f000 f9f6 	bl	800975a <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800936e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009370:	466e      	mov	r6, sp
 8009372:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009374:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009376:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009378:	e895 0003 	ldmia.w	r5, {r0, r1}
 800937c:	e886 0003 	stmia.w	r6, {r0, r1}
 8009380:	4625      	mov	r5, r4
 8009382:	1d27      	adds	r7, r4, #4
 8009384:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8009388:	f855 0b10 	ldr.w	r0, [r5], #16
 800938c:	f7fd f906 	bl	800659c <USB_CoreInit>
 8009390:	4606      	mov	r6, r0
 8009392:	b120      	cbz	r0, 800939e <HAL_PCD_Init+0x66>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009394:	2302      	movs	r3, #2
 8009396:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 800939a:	2501      	movs	r5, #1
 800939c:	e054      	b.n	8009448 <HAL_PCD_Init+0x110>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800939e:	4601      	mov	r1, r0
 80093a0:	6820      	ldr	r0, [r4, #0]
 80093a2:	f000 f9e0 	bl	8009766 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093a6:	4631      	mov	r1, r6
 80093a8:	f8d4 c004 	ldr.w	ip, [r4, #4]
    hpcd->IN_ep[i].is_in = 1U;
 80093ac:	261c      	movs	r6, #28
 80093ae:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80093b2:	4608      	mov	r0, r1
 80093b4:	b2ca      	uxtb	r2, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093b6:	4594      	cmp	ip, r2
 80093b8:	f101 0101 	add.w	r1, r1, #1
 80093bc:	d81c      	bhi.n	80093f8 <HAL_PCD_Init+0xc0>
 80093be:	2300      	movs	r3, #0
    hpcd->OUT_ep[i].is_in = 0U;
 80093c0:	261c      	movs	r6, #28
 80093c2:	4619      	mov	r1, r3
 80093c4:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093c6:	4584      	cmp	ip, r0
 80093c8:	f103 0301 	add.w	r3, r3, #1
 80093cc:	d822      	bhi.n	8009414 <HAL_PCD_Init+0xdc>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80093ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093d0:	466e      	mov	r6, sp
 80093d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80093d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093d6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80093d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80093dc:	e886 0003 	stmia.w	r6, {r0, r1}
 80093e0:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80093e4:	6820      	ldr	r0, [r4, #0]
 80093e6:	f7fd f999 	bl	800671c <USB_DevInit>
 80093ea:	2301      	movs	r3, #1
 80093ec:	4605      	mov	r5, r0
 80093ee:	b1f0      	cbz	r0, 800942e <HAL_PCD_Init+0xf6>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80093f0:	2202      	movs	r2, #2
 80093f2:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 80093f6:	e7d0      	b.n	800939a <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 80093f8:	fb06 4302 	mla	r3, r6, r2, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 80093fc:	e9c3 0011 	strd	r0, r0, [r3, #68]	; 0x44
    hpcd->IN_ep[i].is_in = 1U;
 8009400:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8009404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009408:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800940c:	f883 003f 	strb.w	r0, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 8009410:	6518      	str	r0, [r3, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009412:	e7cf      	b.n	80093b4 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8009414:	fb06 4200 	mla	r2, r6, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009418:	e9c2 1181 	strd	r1, r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].is_in = 0U;
 800941c:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8009420:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009424:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009428:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800942c:	e7ca      	b.n	80093c4 <HAL_PCD_Init+0x8c>
  hpcd->USB_Address = 0U;
 800942e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009432:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 8009436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009438:	2b01      	cmp	r3, #1
 800943a:	d102      	bne.n	8009442 <HAL_PCD_Init+0x10a>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800943c:	4620      	mov	r0, r4
 800943e:	f000 f972 	bl	8009726 <HAL_PCDEx_ActivateLPM>
  (void)USB_DevDisconnect(hpcd->Instance);
 8009442:	6820      	ldr	r0, [r4, #0]
 8009444:	f000 fa84 	bl	8009950 <USB_DevDisconnect>
}
 8009448:	4628      	mov	r0, r5
 800944a:	b00b      	add	sp, #44	; 0x2c
 800944c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800944e <HAL_PCD_Start>:
{
 800944e:	b510      	push	{r4, lr}
 8009450:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009452:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8009454:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8009458:	2b01      	cmp	r3, #1
 800945a:	d012      	beq.n	8009482 <HAL_PCD_Start+0x34>
 800945c:	2301      	movs	r3, #1
 800945e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  if (hpcd->Init.battery_charging_enable == 1U)
 8009462:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009464:	2b01      	cmp	r3, #1
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009466:	bf02      	ittt	eq
 8009468:	6b83      	ldreq	r3, [r0, #56]	; 0x38
 800946a:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
 800946e:	6383      	streq	r3, [r0, #56]	; 0x38
  __HAL_PCD_ENABLE(hpcd);
 8009470:	f000 f96d 	bl	800974e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009474:	6820      	ldr	r0, [r4, #0]
 8009476:	f000 fa5d 	bl	8009934 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800947a:	2000      	movs	r0, #0
 800947c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8009480:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8009482:	2002      	movs	r0, #2
 8009484:	e7fc      	b.n	8009480 <HAL_PCD_Start+0x32>

08009486 <HAL_PCD_SOFCallback>:
 8009486:	4770      	bx	lr

08009488 <HAL_PCD_ISOOUTIncompleteCallback>:
 8009488:	4770      	bx	lr

0800948a <HAL_PCD_ISOINIncompleteCallback>:
 800948a:	4770      	bx	lr

0800948c <HAL_PCD_SetAddress>:
{
 800948c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800948e:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8009492:	2a01      	cmp	r2, #1
{
 8009494:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8009496:	d00b      	beq.n	80094b0 <HAL_PCD_SetAddress+0x24>
 8009498:	2201      	movs	r2, #1
 800949a:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800949e:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80094a2:	6800      	ldr	r0, [r0, #0]
 80094a4:	f000 fa36 	bl	8009914 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80094a8:	2000      	movs	r0, #0
 80094aa:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80094ae:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80094b0:	2002      	movs	r0, #2
 80094b2:	e7fc      	b.n	80094ae <HAL_PCD_SetAddress+0x22>

080094b4 <HAL_PCD_EP_Open>:
{
 80094b4:	b570      	push	{r4, r5, r6, lr}
 80094b6:	f001 060f 	and.w	r6, r1, #15
 80094ba:	ebc6 04c6 	rsb	r4, r6, r6, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 80094be:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80094c2:	4605      	mov	r5, r0
 80094c4:	ea4f 0484 	mov.w	r4, r4, lsl #2
 80094c8:	f04f 001c 	mov.w	r0, #28
  if ((ep_addr & 0x80U) == 0x80U)
 80094cc:	d01f      	beq.n	800950e <HAL_PCD_EP_Open+0x5a>
    ep->is_in = 1U;
 80094ce:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80094d2:	f104 013c 	add.w	r1, r4, #60	; 0x3c
    ep->is_in = 1U;
 80094d6:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80094d8:	4429      	add	r1, r5
    ep->is_in = 1U;
 80094da:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  ep->maxpacket = ep_mps;
 80094de:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 80094e0:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80094e2:	700e      	strb	r6, [r1, #0]
  ep->type = ep_type;
 80094e4:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80094e6:	b102      	cbz	r2, 80094ea <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 80094e8:	80ce      	strh	r6, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 80094ea:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80094ec:	bf04      	itt	eq
 80094ee:	2300      	moveq	r3, #0
 80094f0:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80094f2:	f895 33bc 	ldrb.w	r3, [r5, #956]	; 0x3bc
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d012      	beq.n	8009520 <HAL_PCD_EP_Open+0x6c>
 80094fa:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80094fc:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 80094fe:	f885 33bc 	strb.w	r3, [r5, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009502:	f000 f958 	bl	80097b6 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009506:	2000      	movs	r0, #0
 8009508:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc
}
 800950c:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 800950e:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009512:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
    ep->is_in = 0U;
 8009516:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009518:	4429      	add	r1, r5
    ep->is_in = 0U;
 800951a:	f880 41fd 	strb.w	r4, [r0, #509]	; 0x1fd
 800951e:	e7de      	b.n	80094de <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 8009520:	2002      	movs	r0, #2
 8009522:	e7f3      	b.n	800950c <HAL_PCD_EP_Open+0x58>

08009524 <HAL_PCD_EP_Close>:
{
 8009524:	b510      	push	{r4, lr}
 8009526:	4604      	mov	r4, r0
 8009528:	f001 000f 	and.w	r0, r1, #15
 800952c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 8009530:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009534:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8009538:	f04f 021c 	mov.w	r2, #28
 800953c:	d016      	beq.n	800956c <HAL_PCD_EP_Close+0x48>
    ep->is_in = 1U;
 800953e:	fb02 4200 	mla	r2, r2, r0, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009542:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 8009546:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009548:	4421      	add	r1, r4
    ep->is_in = 1U;
 800954a:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 800954e:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 8009550:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8009554:	2b01      	cmp	r3, #1
 8009556:	d012      	beq.n	800957e <HAL_PCD_EP_Close+0x5a>
 8009558:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800955a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800955c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009560:	f7fd f984 	bl	800686c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009564:	2000      	movs	r0, #0
 8009566:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800956a:	bd10      	pop	{r4, pc}
    ep->is_in = 0U;
 800956c:	fb02 4200 	mla	r2, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009570:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8009574:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009576:	4421      	add	r1, r4
    ep->is_in = 0U;
 8009578:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
 800957c:	e7e7      	b.n	800954e <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 800957e:	2002      	movs	r0, #2
 8009580:	e7f3      	b.n	800956a <HAL_PCD_EP_Close+0x46>

08009582 <HAL_PCD_EP_Receive>:
{
 8009582:	b538      	push	{r3, r4, r5, lr}
 8009584:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009588:	241c      	movs	r4, #28
 800958a:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 800958e:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009592:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 8009596:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 800959a:	2300      	movs	r3, #0
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800959c:	6800      	ldr	r0, [r0, #0]
  ep->xfer_buff = pBuf;
 800959e:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 80095a2:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 80095a6:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 80095aa:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80095ae:	b91d      	cbnz	r5, 80095b8 <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80095b0:	f7fd f9b2 	bl	8006918 <USB_EP0StartXfer>
}
 80095b4:	2000      	movs	r0, #0
 80095b6:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80095b8:	f7fd fa12 	bl	80069e0 <USB_EPStartXfer>
 80095bc:	e7fa      	b.n	80095b4 <HAL_PCD_EP_Receive+0x32>

080095be <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80095be:	f001 010f 	and.w	r1, r1, #15
 80095c2:	231c      	movs	r3, #28
 80095c4:	fb03 0001 	mla	r0, r3, r1, r0
}
 80095c8:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 80095cc:	4770      	bx	lr

080095ce <HAL_PCD_EP_Transmit>:
{
 80095ce:	b538      	push	{r3, r4, r5, lr}
 80095d0:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80095d4:	241c      	movs	r4, #28
 80095d6:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 80095da:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80095de:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 80095e0:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 80095e2:	2300      	movs	r3, #0
 80095e4:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 80095e6:	2301      	movs	r3, #1
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80095e8:	6800      	ldr	r0, [r0, #0]
  ep->xfer_buff = pBuf;
 80095ea:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 80095ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 80095f0:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80095f4:	b91d      	cbnz	r5, 80095fe <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80095f6:	f7fd f98f 	bl	8006918 <USB_EP0StartXfer>
}
 80095fa:	2000      	movs	r0, #0
 80095fc:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80095fe:	f7fd f9ef 	bl	80069e0 <USB_EPStartXfer>
 8009602:	e7fa      	b.n	80095fa <HAL_PCD_EP_Transmit+0x2c>

08009604 <HAL_PCD_EP_SetStall>:
{
 8009604:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009606:	6843      	ldr	r3, [r0, #4]
 8009608:	f001 050f 	and.w	r5, r1, #15
 800960c:	429d      	cmp	r5, r3
{
 800960e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009610:	d82b      	bhi.n	800966a <HAL_PCD_EP_SetStall+0x66>
  if ((0x80U & ep_addr) == 0x80U)
 8009612:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009616:	f04f 001c 	mov.w	r0, #28
 800961a:	d01d      	beq.n	8009658 <HAL_PCD_EP_SetStall+0x54>
    ep->is_in = 1U;
 800961c:	fb00 4205 	mla	r2, r0, r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009620:	fb00 4105 	mla	r1, r0, r5, r4
    ep->is_in = 1U;
 8009624:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009626:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8009628:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  ep->is_stall = 1U;
 800962c:	2301      	movs	r3, #1
 800962e:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009630:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8009632:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 8009636:	429a      	cmp	r2, r3
 8009638:	d019      	beq.n	800966e <HAL_PCD_EP_SetStall+0x6a>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800963a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800963c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009640:	f000 f914 	bl	800986c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009644:	b925      	cbnz	r5, 8009650 <HAL_PCD_EP_SetStall+0x4c>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8009646:	6820      	ldr	r0, [r4, #0]
 8009648:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800964c:	f7fd fa7a 	bl	8006b44 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8009650:	2000      	movs	r0, #0
 8009652:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8009656:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8009658:	fb00 4301 	mla	r3, r0, r1, r4
    ep->is_in = 0U;
 800965c:	461a      	mov	r2, r3
    ep = &hpcd->OUT_ep[ep_addr];
 800965e:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8009662:	2300      	movs	r3, #0
 8009664:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
 8009668:	e7e0      	b.n	800962c <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 800966a:	2001      	movs	r0, #1
 800966c:	e7f3      	b.n	8009656 <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 800966e:	2002      	movs	r0, #2
 8009670:	e7f1      	b.n	8009656 <HAL_PCD_EP_SetStall+0x52>

08009672 <HAL_PCD_EP_ClrStall>:
{
 8009672:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009674:	6843      	ldr	r3, [r0, #4]
 8009676:	f001 020f 	and.w	r2, r1, #15
 800967a:	429a      	cmp	r2, r3
{
 800967c:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800967e:	d82a      	bhi.n	80096d6 <HAL_PCD_EP_ClrStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 8009680:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8009684:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009688:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800968c:	f04f 001c 	mov.w	r0, #28
 8009690:	d018      	beq.n	80096c4 <HAL_PCD_EP_ClrStall+0x52>
    ep->is_in = 1U;
 8009692:	fb00 4002 	mla	r0, r0, r2, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009696:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 800969a:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800969c:	4421      	add	r1, r4
    ep->is_in = 1U;
 800969e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  ep->is_stall = 0U;
 80096a2:	2500      	movs	r5, #0
 80096a4:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80096a6:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80096a8:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d014      	beq.n	80096da <HAL_PCD_EP_ClrStall+0x68>
 80096b0:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80096b2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80096b4:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80096b8:	f000 f903 	bl	80098c2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80096bc:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 80096c0:	4628      	mov	r0, r5
}
 80096c2:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 80096c4:	fb00 4002 	mla	r0, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80096c8:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 80096cc:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80096ce:	4421      	add	r1, r4
    ep->is_in = 0U;
 80096d0:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
 80096d4:	e7e5      	b.n	80096a2 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 80096d6:	2001      	movs	r0, #1
 80096d8:	e7f3      	b.n	80096c2 <HAL_PCD_EP_ClrStall+0x50>
  __HAL_LOCK(hpcd);
 80096da:	2002      	movs	r0, #2
 80096dc:	e7f1      	b.n	80096c2 <HAL_PCD_EP_ClrStall+0x50>

080096de <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80096de:	6800      	ldr	r0, [r0, #0]
{
 80096e0:	b570      	push	{r4, r5, r6, lr}

  if (fifo == 0U)
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80096e2:	0412      	lsls	r2, r2, #16
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80096e4:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (fifo == 0U)
 80096e6:	b919      	cbnz	r1, 80096f0 <HAL_PCDEx_SetTxFiFo+0x12>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80096e8:	4322      	orrs	r2, r4
 80096ea:	6282      	str	r2, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 80096ec:	2000      	movs	r0, #0
 80096ee:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80096f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 80096f2:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80096f4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80096f8:	2300      	movs	r3, #0
 80096fa:	1c5e      	adds	r6, r3, #1
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	429d      	cmp	r5, r3
 8009700:	d805      	bhi.n	800970e <HAL_PCDEx_SetTxFiFo+0x30>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009702:	313f      	adds	r1, #63	; 0x3f
 8009704:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8009708:	4322      	orrs	r2, r4
 800970a:	6042      	str	r2, [r0, #4]
 800970c:	e7ee      	b.n	80096ec <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800970e:	3340      	adds	r3, #64	; 0x40
 8009710:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800971a:	4633      	mov	r3, r6
 800971c:	e7ed      	b.n	80096fa <HAL_PCDEx_SetTxFiFo+0x1c>

0800971e <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800971e:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8009720:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8009722:	6259      	str	r1, [r3, #36]	; 0x24
}
 8009724:	4770      	bx	lr

08009726 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009726:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 8009728:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800972a:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 800972c:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8009730:	2000      	movs	r0, #0
 8009732:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009736:	6993      	ldr	r3, [r2, #24]
 8009738:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800973c:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800973e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009744:	f043 0303 	orr.w	r3, r3, #3
 8009748:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 800974a:	4770      	bx	lr

0800974c <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800974c:	4770      	bx	lr

0800974e <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800974e:	6883      	ldr	r3, [r0, #8]
 8009750:	f043 0301 	orr.w	r3, r3, #1
 8009754:	6083      	str	r3, [r0, #8]
}
 8009756:	2000      	movs	r0, #0
 8009758:	4770      	bx	lr

0800975a <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800975a:	6883      	ldr	r3, [r0, #8]
 800975c:	f023 0301 	bic.w	r3, r3, #1
 8009760:	6083      	str	r3, [r0, #8]
}
 8009762:	2000      	movs	r0, #0
 8009764:	4770      	bx	lr

08009766 <USB_SetCurrentMode>:
{
 8009766:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009768:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800976a:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800976c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009770:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8009772:	d108      	bne.n	8009786 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009774:	68c3      	ldr	r3, [r0, #12]
 8009776:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800977a:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800977c:	2032      	movs	r0, #50	; 0x32
 800977e:	f7fe ff44 	bl	800860a <HAL_Delay>
  return HAL_OK;
 8009782:	2000      	movs	r0, #0
}
 8009784:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8009786:	b919      	cbnz	r1, 8009790 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009788:	68c3      	ldr	r3, [r0, #12]
 800978a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800978e:	e7f4      	b.n	800977a <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8009790:	2001      	movs	r0, #1
 8009792:	e7f7      	b.n	8009784 <USB_SetCurrentMode+0x1e>

08009794 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8009794:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8009798:	4319      	orrs	r1, r3
 800979a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800979e:	2000      	movs	r0, #0
 80097a0:	4770      	bx	lr

080097a2 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80097a2:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
    speed = 0xFU;
 80097a6:	f013 0f02 	tst.w	r3, #2
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80097aa:	f500 6000 	add.w	r0, r0, #2048	; 0x800
}
 80097ae:	bf14      	ite	ne
 80097b0:	2002      	movne	r0, #2
 80097b2:	200f      	moveq	r0, #15
 80097b4:	4770      	bx	lr

080097b6 <USB_ActivateEndpoint>:
{
 80097b6:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 80097b8:	780d      	ldrb	r5, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80097ba:	2401      	movs	r4, #1
 80097bc:	f005 030f 	and.w	r3, r5, #15
 80097c0:	409c      	lsls	r4, r3
  if (ep->is_in == 1U)
 80097c2:	784b      	ldrb	r3, [r1, #1]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80097c4:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 80097c8:	2b01      	cmp	r3, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80097ca:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80097ce:	69d3      	ldr	r3, [r2, #28]
  if (ep->is_in == 1U)
 80097d0:	d118      	bne.n	8009804 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80097d2:	431c      	orrs	r4, r3
 80097d4:	61d4      	str	r4, [r2, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80097d6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80097da:	041a      	lsls	r2, r3, #16
 80097dc:	d410      	bmi.n	8009800 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80097de:	688a      	ldr	r2, [r1, #8]
 80097e0:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 80097e4:	f3c2 030a 	ubfx	r3, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80097e8:	78ca      	ldrb	r2, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80097ea:	4323      	orrs	r3, r4
 80097ec:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 80097f0:	ea43 5385 	orr.w	r3, r3, r5, lsl #22
 80097f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097fc:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8009800:	2000      	movs	r0, #0
 8009802:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009804:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009808:	61d4      	str	r4, [r2, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800980a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800980e:	041b      	lsls	r3, r3, #16
 8009810:	d4f6      	bmi.n	8009800 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009812:	688b      	ldr	r3, [r1, #8]
 8009814:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8009818:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800981c:	4313      	orrs	r3, r2
                                    ((uint32_t)ep->type << 18) |
 800981e:	78ca      	ldrb	r2, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009820:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8009824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800982c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8009830:	e7e6      	b.n	8009800 <USB_ActivateEndpoint+0x4a>

08009832 <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 8009832:	3303      	adds	r3, #3
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009834:	3201      	adds	r2, #1
  count32b = ((uint32_t)len + 3U) / 4U;
 8009836:	089b      	lsrs	r3, r3, #2
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009838:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800983c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  for (i = 0U; i < count32b; i++)
 8009840:	4299      	cmp	r1, r3
 8009842:	d101      	bne.n	8009848 <USB_WritePacket+0x16>
}
 8009844:	2000      	movs	r0, #0
 8009846:	4770      	bx	lr
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009848:	f851 2b04 	ldr.w	r2, [r1], #4
 800984c:	6002      	str	r2, [r0, #0]
  for (i = 0U; i < count32b; i++)
 800984e:	e7f7      	b.n	8009840 <USB_WritePacket+0xe>

08009850 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009850:	3203      	adds	r2, #3
 8009852:	0892      	lsrs	r2, r2, #2
 8009854:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009858:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 800985c:	4291      	cmp	r1, r2
 800985e:	d101      	bne.n	8009864 <USB_ReadPacket+0x14>
}
 8009860:	4608      	mov	r0, r1
 8009862:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009864:	6803      	ldr	r3, [r0, #0]
 8009866:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 800986a:	e7f7      	b.n	800985c <USB_ReadPacket+0xc>

0800986c <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800986c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800986e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8009870:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009872:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8009876:	d112      	bne.n	800989e <USB_EPSetStall+0x32>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009878:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800987c:	2a00      	cmp	r2, #0
 800987e:	db06      	blt.n	800988e <USB_EPSetStall+0x22>
 8009880:	b12b      	cbz	r3, 800988e <USB_EPSetStall+0x22>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009882:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8009886:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800988a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800988e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8009892:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009896:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800989a:	2000      	movs	r0, #0
 800989c:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800989e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80098a2:	2a00      	cmp	r2, #0
 80098a4:	db06      	blt.n	80098b4 <USB_EPSetStall+0x48>
 80098a6:	b12b      	cbz	r3, 80098b4 <USB_EPSetStall+0x48>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80098a8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80098ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80098b0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80098b4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80098b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80098bc:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80098c0:	e7eb      	b.n	800989a <USB_EPSetStall+0x2e>

080098c2 <USB_EPClearStall>:
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80098c2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80098c4:	784a      	ldrb	r2, [r1, #1]
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80098c6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80098ca:	78cb      	ldrb	r3, [r1, #3]
  if (ep->is_in == 1U)
 80098cc:	2a01      	cmp	r2, #1
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80098ce:	f1a3 0302 	sub.w	r3, r3, #2
 80098d2:	b2db      	uxtb	r3, r3
  if (ep->is_in == 1U)
 80098d4:	d10f      	bne.n	80098f6 <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80098d6:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80098da:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80098dc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80098e0:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80098e4:	d805      	bhi.n	80098f2 <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80098e6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80098ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098ee:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80098f2:	2000      	movs	r0, #0
 80098f4:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80098f6:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80098fa:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80098fe:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009900:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009904:	bf9e      	ittt	ls
 8009906:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 800990a:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 800990e:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 8009912:	e7ee      	b.n	80098f2 <USB_EPClearStall+0x30>

08009914 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009914:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8009918:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800991c:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009920:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8009924:	0109      	lsls	r1, r1, #4
 8009926:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800992a:	4319      	orrs	r1, r3
 800992c:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8009930:	2000      	movs	r0, #0
 8009932:	4770      	bx	lr

08009934 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009934:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8009938:	f023 0303 	bic.w	r3, r3, #3
 800993c:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009940:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8009944:	f023 0302 	bic.w	r3, r3, #2
 8009948:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800994c:	2000      	movs	r0, #0
 800994e:	4770      	bx	lr

08009950 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009950:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8009954:	f023 0303 	bic.w	r3, r3, #3
 8009958:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800995c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8009960:	f043 0302 	orr.w	r3, r3, #2
 8009964:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8009968:	2000      	movs	r0, #0
 800996a:	4770      	bx	lr

0800996c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800996c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800996e:	6980      	ldr	r0, [r0, #24]
}
 8009970:	4010      	ands	r0, r2
 8009972:	4770      	bx	lr

08009974 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8009974:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8009978:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800997c:	69c0      	ldr	r0, [r0, #28]
 800997e:	4018      	ands	r0, r3
}
 8009980:	0c00      	lsrs	r0, r0, #16
 8009982:	4770      	bx	lr

08009984 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8009984:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8009988:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800998c:	69c0      	ldr	r0, [r0, #28]
 800998e:	4018      	ands	r0, r3
}
 8009990:	b280      	uxth	r0, r0
 8009992:	4770      	bx	lr

08009994 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009994:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009998:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800999c:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80099a0:	6940      	ldr	r0, [r0, #20]
}
 80099a2:	4010      	ands	r0, r2
 80099a4:	4770      	bx	lr

080099a6 <USB_ReadDevInEPInterrupt>:
{
 80099a6:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 80099a8:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80099ac:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80099b0:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80099b4:	f001 010f 	and.w	r1, r1, #15
 80099b8:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80099ba:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80099be:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80099c0:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	4323      	orrs	r3, r4
}
 80099c6:	4018      	ands	r0, r3
 80099c8:	bd10      	pop	{r4, pc}

080099ca <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80099ca:	6940      	ldr	r0, [r0, #20]
}
 80099cc:	f000 0001 	and.w	r0, r0, #1
 80099d0:	4770      	bx	lr

080099d2 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80099d2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80099d6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80099da:	f023 0307 	bic.w	r3, r3, #7
 80099de:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80099e2:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80099e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099ea:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 80099ee:	2000      	movs	r0, #0
 80099f0:	4770      	bx	lr

080099f2 <UTILS_GetPLLOutputFrequency>:
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80099f2:	680a      	ldr	r2, [r1, #0]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 80099f4:	684b      	ldr	r3, [r1, #4]
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80099f6:	0912      	lsrs	r2, r2, #4
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 80099f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80099fc:	3201      	adds	r2, #1
 80099fe:	fbb0 f0f2 	udiv	r0, r0, r2
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8009a02:	4358      	muls	r0, r3
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U);
 8009a04:	688b      	ldr	r3, [r1, #8]
 8009a06:	0e5b      	lsrs	r3, r3, #25
 8009a08:	3301      	adds	r3, #1
 8009a0a:	005b      	lsls	r3, r3, #1
}
 8009a0c:	fbb0 f0f3 	udiv	r0, r0, r3
 8009a10:	4770      	bx	lr

08009a12 <z_device_state_init>:
}
 8009a12:	4770      	bx	lr

08009a14 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 8009a14:	b138      	cbz	r0, 8009a26 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 8009a16:	68c3      	ldr	r3, [r0, #12]
 8009a18:	8818      	ldrh	r0, [r3, #0]
 8009a1a:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8009a1e:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8009a22:	4258      	negs	r0, r3
 8009a24:	4158      	adcs	r0, r3
}
 8009a26:	4770      	bx	lr

08009a28 <arch_system_halt>:
	__asm__ volatile(
 8009a28:	f04f 0210 	mov.w	r2, #16
 8009a2c:	f3ef 8311 	mrs	r3, BASEPRI
 8009a30:	f382 8812 	msr	BASEPRI_MAX, r2
 8009a34:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 8009a38:	e7fe      	b.n	8009a38 <arch_system_halt+0x10>

08009a3a <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8009a3a:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 8009a3c:	f7ff fff4 	bl	8009a28 <arch_system_halt>

08009a40 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8009a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a42:	4605      	mov	r5, r0
 8009a44:	460e      	mov	r6, r1
 8009a46:	f04f 0310 	mov.w	r3, #16
 8009a4a:	f3ef 8711 	mrs	r7, BASEPRI
 8009a4e:	f383 8812 	msr	BASEPRI_MAX, r3
 8009a52:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 8009a56:	f7fe f82d 	bl	8007ab4 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 8009a5a:	4631      	mov	r1, r6
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	4628      	mov	r0, r5
 8009a60:	f7ff ffeb 	bl	8009a3a <k_sys_fatal_error_handler>
	__asm__ volatile(
 8009a64:	f387 8811 	msr	BASEPRI, r7
 8009a68:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8009a6c:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8009a6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009a72:	f7fb b867 	b.w	8004b44 <z_impl_k_thread_abort>

08009a76 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
 8009a76:	f000 b969 	b.w	8009d4c <memset>

08009a7a <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8009a7a:	f000 b959 	b.w	8009d30 <memcpy>

08009a7e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a7e:	f3ef 8005 	mrs	r0, IPSR
}
 8009a82:	3800      	subs	r0, #0
 8009a84:	bf18      	it	ne
 8009a86:	2001      	movne	r0, #1
 8009a88:	4770      	bx	lr

08009a8a <z_impl_k_thread_name_set>:
}
 8009a8a:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8009a8e:	4770      	bx	lr

08009a90 <z_impl_k_thread_start>:
	z_sched_start(thread);
 8009a90:	f7fd be5e 	b.w	8007750 <z_sched_start>

08009a94 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 8009a94:	b508      	push	{r3, lr}
	__asm__ volatile(
 8009a96:	f04f 0210 	mov.w	r2, #16
 8009a9a:	f3ef 8311 	mrs	r3, BASEPRI
 8009a9e:	f382 8812 	msr	BASEPRI_MAX, r2
 8009aa2:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8009aa6:	f7fa fdfb 	bl	80046a0 <arch_cpu_idle>
 8009aaa:	e7f4      	b.n	8009a96 <idle+0x2>

08009aac <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
 8009aac:	f990 300e 	ldrsb.w	r3, [r0, #14]
 8009ab0:	428b      	cmp	r3, r1
 8009ab2:	d001      	beq.n	8009ab8 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
 8009ab4:	f7fd bebc 	b.w	8007830 <z_set_prio>
}
 8009ab8:	2000      	movs	r0, #0
 8009aba:	4770      	bx	lr

08009abc <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 8009abc:	b13a      	cbz	r2, 8009ace <z_impl_k_sem_init+0x12>
 8009abe:	428a      	cmp	r2, r1
 8009ac0:	d305      	bcc.n	8009ace <z_impl_k_sem_init+0x12>
	sem->limit = limit;
 8009ac2:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
 8009ac6:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
 8009aca:	2000      	movs	r0, #0
 8009acc:	4770      	bx	lr
		return -EINVAL;
 8009ace:	f06f 0015 	mvn.w	r0, #21
}
 8009ad2:	4770      	bx	lr

08009ad4 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
 8009ad4:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	408b      	lsls	r3, r1
 8009ada:	ea22 0303 	bic.w	r3, r2, r3
 8009ade:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
 8009ae0:	fa22 f001 	lsr.w	r0, r2, r1
}
 8009ae4:	f000 0001 	and.w	r0, r0, #1
 8009ae8:	4770      	bx	lr

08009aea <notify_queue_locked.isra.0>:
	if (queue != NULL) {
 8009aea:	b120      	cbz	r0, 8009af6 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 8009aec:	2200      	movs	r2, #0
 8009aee:	4611      	mov	r1, r2
 8009af0:	3088      	adds	r0, #136	; 0x88
 8009af2:	f000 b8c9 	b.w	8009c88 <z_sched_wake>
}
 8009af6:	4770      	bx	lr

08009af8 <k_work_init>:
{
 8009af8:	b538      	push	{r3, r4, r5, lr}
 8009afa:	4604      	mov	r4, r0
 8009afc:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 8009afe:	2210      	movs	r2, #16
 8009b00:	2100      	movs	r1, #0
 8009b02:	f000 f923 	bl	8009d4c <memset>
 8009b06:	6065      	str	r5, [r4, #4]
}
 8009b08:	bd38      	pop	{r3, r4, r5, pc}

08009b0a <k_work_submit_to_queue>:
{
 8009b0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b0c:	9001      	str	r0, [sp, #4]
 8009b0e:	4608      	mov	r0, r1
 8009b10:	f04f 0310 	mov.w	r3, #16
 8009b14:	f3ef 8511 	mrs	r5, BASEPRI
 8009b18:	f383 8812 	msr	BASEPRI_MAX, r3
 8009b1c:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 8009b20:	a901      	add	r1, sp, #4
 8009b22:	f7fd fc59 	bl	80073d8 <submit_to_queue_locked>
 8009b26:	4604      	mov	r4, r0
	__asm__ volatile(
 8009b28:	f385 8811 	msr	BASEPRI, r5
 8009b2c:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 8009b30:	2800      	cmp	r0, #0
 8009b32:	dd04      	ble.n	8009b3e <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
 8009b34:	f7fd ffc4 	bl	8007ac0 <z_impl_k_is_preempt_thread>
 8009b38:	b108      	cbz	r0, 8009b3e <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
 8009b3a:	f7fd ff1b 	bl	8007974 <z_impl_k_yield>
}
 8009b3e:	4620      	mov	r0, r4
 8009b40:	b003      	add	sp, #12
 8009b42:	bd30      	pop	{r4, r5, pc}

08009b44 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 8009b44:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8009b48:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8009b4a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8009b4c:	2300      	movs	r3, #0
	node->prev = NULL;
 8009b4e:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 8009b52:	4770      	bx	lr

08009b54 <unpend_thread_no_timeout>:
{
 8009b54:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 8009b56:	f7ff fff5 	bl	8009b44 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8009b5a:	7b43      	ldrb	r3, [r0, #13]
 8009b5c:	f023 0302 	bic.w	r3, r3, #2
 8009b60:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 8009b62:	2300      	movs	r3, #0
 8009b64:	6083      	str	r3, [r0, #8]
}
 8009b66:	bd08      	pop	{r3, pc}

08009b68 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8009b68:	4603      	mov	r3, r0
 8009b6a:	b920      	cbnz	r0, 8009b76 <z_reschedule_irqlock+0xe>
 8009b6c:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
 8009b70:	b90a      	cbnz	r2, 8009b76 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 8009b72:	f7fa be07 	b.w	8004784 <arch_swap>
 8009b76:	f383 8811 	msr	BASEPRI, r3
 8009b7a:	f3bf 8f6f 	isb	sy
}
 8009b7e:	4770      	bx	lr

08009b80 <z_reschedule_unlocked>:
	__asm__ volatile(
 8009b80:	f04f 0310 	mov.w	r3, #16
 8009b84:	f3ef 8011 	mrs	r0, BASEPRI
 8009b88:	f383 8812 	msr	BASEPRI_MAX, r3
 8009b8c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8009b90:	f7ff bfea 	b.w	8009b68 <z_reschedule_irqlock>

08009b94 <z_priq_dumb_best>:
{
 8009b94:	4603      	mov	r3, r0
	return list->head == list;
 8009b96:	6800      	ldr	r0, [r0, #0]
}
 8009b98:	4283      	cmp	r3, r0
 8009b9a:	bf08      	it	eq
 8009b9c:	2000      	moveq	r0, #0
 8009b9e:	4770      	bx	lr

08009ba0 <z_ready_thread>:
{
 8009ba0:	b510      	push	{r4, lr}
 8009ba2:	f04f 0310 	mov.w	r3, #16
 8009ba6:	f3ef 8411 	mrs	r4, BASEPRI
 8009baa:	f383 8812 	msr	BASEPRI_MAX, r3
 8009bae:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 8009bb2:	f7fd fd97 	bl	80076e4 <ready_thread>
	__asm__ volatile(
 8009bb6:	f384 8811 	msr	BASEPRI, r4
 8009bba:	f3bf 8f6f 	isb	sy
}
 8009bbe:	bd10      	pop	{r4, pc}

08009bc0 <z_thread_timeout>:
{
 8009bc0:	b510      	push	{r4, lr}
 8009bc2:	4601      	mov	r1, r0
	__asm__ volatile(
 8009bc4:	f04f 0310 	mov.w	r3, #16
 8009bc8:	f3ef 8411 	mrs	r4, BASEPRI
 8009bcc:	f383 8812 	msr	BASEPRI_MAX, r3
 8009bd0:	f3bf 8f6f 	isb	sy
		if (!killed) {
 8009bd4:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 8009bd8:	f013 0f28 	tst.w	r3, #40	; 0x28
 8009bdc:	d10d      	bne.n	8009bfa <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 8009bde:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 8009be2:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 8009be4:	b10b      	cbz	r3, 8009bea <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 8009be6:	f7ff ffb5 	bl	8009b54 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8009bea:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 8009bee:	f023 0314 	bic.w	r3, r3, #20
 8009bf2:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 8009bf6:	f7fd fd75 	bl	80076e4 <ready_thread>
	__asm__ volatile(
 8009bfa:	f384 8811 	msr	BASEPRI, r4
 8009bfe:	f3bf 8f6f 	isb	sy
}
 8009c02:	bd10      	pop	{r4, pc}

08009c04 <add_to_waitq_locked>:
{
 8009c04:	b538      	push	{r3, r4, r5, lr}
 8009c06:	4604      	mov	r4, r0
 8009c08:	460d      	mov	r5, r1
	unready_thread(thread);
 8009c0a:	f7fd fdbf 	bl	800778c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 8009c0e:	7b63      	ldrb	r3, [r4, #13]
 8009c10:	f043 0302 	orr.w	r3, r3, #2
 8009c14:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 8009c16:	b195      	cbz	r5, 8009c3e <add_to_waitq_locked+0x3a>
 8009c18:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 8009c1a:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009c1c:	429d      	cmp	r5, r3
 8009c1e:	d015      	beq.n	8009c4c <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8009c20:	b1a3      	cbz	r3, 8009c4c <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
 8009c22:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 8009c26:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 8009c2a:	4291      	cmp	r1, r2
 8009c2c:	d008      	beq.n	8009c40 <add_to_waitq_locked+0x3c>
		return b2 - b1;
 8009c2e:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 8009c30:	2a00      	cmp	r2, #0
 8009c32:	dd05      	ble.n	8009c40 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
 8009c34:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8009c36:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8009c3a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8009c3c:	605c      	str	r4, [r3, #4]
}
 8009c3e:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
 8009c40:	686a      	ldr	r2, [r5, #4]
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d002      	beq.n	8009c4c <add_to_waitq_locked+0x48>
 8009c46:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d1ec      	bne.n	8009c26 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
 8009c4c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 8009c4e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 8009c52:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8009c54:	606c      	str	r4, [r5, #4]
}
 8009c56:	e7f2      	b.n	8009c3e <add_to_waitq_locked+0x3a>

08009c58 <z_unpend_first_thread>:
{
 8009c58:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8009c5a:	f04f 0310 	mov.w	r3, #16
 8009c5e:	f3ef 8511 	mrs	r5, BASEPRI
 8009c62:	f383 8812 	msr	BASEPRI_MAX, r3
 8009c66:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 8009c6a:	f7ff ff93 	bl	8009b94 <z_priq_dumb_best>
		if (thread != NULL) {
 8009c6e:	4604      	mov	r4, r0
 8009c70:	b120      	cbz	r0, 8009c7c <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
 8009c72:	f7ff ff6f 	bl	8009b54 <unpend_thread_no_timeout>
 8009c76:	3018      	adds	r0, #24
 8009c78:	f000 f823 	bl	8009cc2 <z_abort_timeout>
	__asm__ volatile(
 8009c7c:	f385 8811 	msr	BASEPRI, r5
 8009c80:	f3bf 8f6f 	isb	sy
}
 8009c84:	4620      	mov	r0, r4
 8009c86:	bd38      	pop	{r3, r4, r5, pc}

08009c88 <z_sched_wake>:
{
 8009c88:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8009c8a:	f04f 0310 	mov.w	r3, #16
 8009c8e:	f3ef 8511 	mrs	r5, BASEPRI
 8009c92:	f383 8812 	msr	BASEPRI_MAX, r3
 8009c96:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 8009c9a:	f7ff ff7b 	bl	8009b94 <z_priq_dumb_best>
		if (thread != NULL) {
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	b150      	cbz	r0, 8009cb8 <z_sched_wake+0x30>
 8009ca2:	6781      	str	r1, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 8009ca4:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
 8009ca6:	f7ff ff55 	bl	8009b54 <unpend_thread_no_timeout>
 8009caa:	3018      	adds	r0, #24
 8009cac:	f000 f809 	bl	8009cc2 <z_abort_timeout>
			ready_thread(thread);
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	f7fd fd17 	bl	80076e4 <ready_thread>
			ret = true;
 8009cb6:	2001      	movs	r0, #1
	__asm__ volatile(
 8009cb8:	f385 8811 	msr	BASEPRI, r5
 8009cbc:	f3bf 8f6f 	isb	sy
}
 8009cc0:	bd38      	pop	{r3, r4, r5, pc}

08009cc2 <z_abort_timeout>:
{
 8009cc2:	b510      	push	{r4, lr}
	__asm__ volatile(
 8009cc4:	f04f 0210 	mov.w	r2, #16
 8009cc8:	f3ef 8411 	mrs	r4, BASEPRI
 8009ccc:	f382 8812 	msr	BASEPRI_MAX, r2
 8009cd0:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8009cd4:	6803      	ldr	r3, [r0, #0]
 8009cd6:	b13b      	cbz	r3, 8009ce8 <z_abort_timeout+0x26>
			remove_timeout(to);
 8009cd8:	f7fd ffb0 	bl	8007c3c <remove_timeout>
			ret = 0;
 8009cdc:	2000      	movs	r0, #0
	__asm__ volatile(
 8009cde:	f384 8811 	msr	BASEPRI, r4
 8009ce2:	f3bf 8f6f 	isb	sy
}
 8009ce6:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8009ce8:	f06f 0015 	mvn.w	r0, #21
 8009cec:	e7f7      	b.n	8009cde <z_abort_timeout+0x1c>

08009cee <z_set_timeout_expiry>:
{
 8009cee:	b570      	push	{r4, r5, r6, lr}
 8009cf0:	4604      	mov	r4, r0
 8009cf2:	460d      	mov	r5, r1
	__asm__ volatile(
 8009cf4:	f04f 0310 	mov.w	r3, #16
 8009cf8:	f3ef 8611 	mrs	r6, BASEPRI
 8009cfc:	f383 8812 	msr	BASEPRI_MAX, r3
 8009d00:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 8009d04:	f7fd ff74 	bl	8007bf0 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 8009d08:	2801      	cmp	r0, #1
 8009d0a:	dd05      	ble.n	8009d18 <z_set_timeout_expiry+0x2a>
 8009d0c:	42a0      	cmp	r0, r4
 8009d0e:	db03      	blt.n	8009d18 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 8009d10:	4629      	mov	r1, r5
 8009d12:	4620      	mov	r0, r4
 8009d14:	f7fc f8e8 	bl	8005ee8 <sys_clock_set_timeout>
	__asm__ volatile(
 8009d18:	f386 8811 	msr	BASEPRI, r6
 8009d1c:	f3bf 8f6f 	isb	sy
}
 8009d20:	bd70      	pop	{r4, r5, r6, pc}

08009d22 <sys_clock_tick_get_32>:
{
 8009d22:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 8009d24:	f7fe f87a 	bl	8007e1c <sys_clock_tick_get>
}
 8009d28:	bd08      	pop	{r3, pc}

08009d2a <z_impl_k_uptime_ticks>:
	return sys_clock_tick_get();
 8009d2a:	f7fe b877 	b.w	8007e1c <sys_clock_tick_get>

08009d2e <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8009d2e:	4770      	bx	lr

08009d30 <memcpy>:
 8009d30:	440a      	add	r2, r1
 8009d32:	4291      	cmp	r1, r2
 8009d34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009d38:	d100      	bne.n	8009d3c <memcpy+0xc>
 8009d3a:	4770      	bx	lr
 8009d3c:	b510      	push	{r4, lr}
 8009d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d46:	4291      	cmp	r1, r2
 8009d48:	d1f9      	bne.n	8009d3e <memcpy+0xe>
 8009d4a:	bd10      	pop	{r4, pc}

08009d4c <memset>:
 8009d4c:	4402      	add	r2, r0
 8009d4e:	4603      	mov	r3, r0
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d100      	bne.n	8009d56 <memset+0xa>
 8009d54:	4770      	bx	lr
 8009d56:	f803 1b01 	strb.w	r1, [r3], #1
 8009d5a:	e7f9      	b.n	8009d50 <memset+0x4>

08009d5c <strcpy>:
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d62:	f803 2b01 	strb.w	r2, [r3], #1
 8009d66:	2a00      	cmp	r2, #0
 8009d68:	d1f9      	bne.n	8009d5e <strcpy+0x2>
 8009d6a:	4770      	bx	lr

08009d6c <strncmp>:
 8009d6c:	b510      	push	{r4, lr}
 8009d6e:	4603      	mov	r3, r0
 8009d70:	b172      	cbz	r2, 8009d90 <strncmp+0x24>
 8009d72:	3901      	subs	r1, #1
 8009d74:	1884      	adds	r4, r0, r2
 8009d76:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009d7a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009d7e:	4290      	cmp	r0, r2
 8009d80:	d101      	bne.n	8009d86 <strncmp+0x1a>
 8009d82:	42a3      	cmp	r3, r4
 8009d84:	d101      	bne.n	8009d8a <strncmp+0x1e>
 8009d86:	1a80      	subs	r0, r0, r2
 8009d88:	bd10      	pop	{r4, pc}
 8009d8a:	2800      	cmp	r0, #0
 8009d8c:	d1f3      	bne.n	8009d76 <strncmp+0xa>
 8009d8e:	e7fa      	b.n	8009d86 <strncmp+0x1a>
 8009d90:	4610      	mov	r0, r2
 8009d92:	e7f9      	b.n	8009d88 <strncmp+0x1c>

08009d94 <strnlen>:
 8009d94:	b510      	push	{r4, lr}
 8009d96:	4602      	mov	r2, r0
 8009d98:	4401      	add	r1, r0
 8009d9a:	428a      	cmp	r2, r1
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	d003      	beq.n	8009da8 <strnlen+0x14>
 8009da0:	781c      	ldrb	r4, [r3, #0]
 8009da2:	3201      	adds	r2, #1
 8009da4:	2c00      	cmp	r4, #0
 8009da6:	d1f8      	bne.n	8009d9a <strnlen+0x6>
 8009da8:	1a18      	subs	r0, r3, r0
 8009daa:	bd10      	pop	{r4, pc}
